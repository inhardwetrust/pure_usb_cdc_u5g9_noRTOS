
u5g9_sbstack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009338  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080095ac  080095ac  0000a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096e0  080096e0  0000b100  2**0
                  CONTENTS
  4 .ARM          00000000  080096e0  080096e0  0000b100  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096e0  080096e0  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096e0  080096e0  0000a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096e4  080096e4  0000a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  080096e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d50  20000100  080097e8  0000b100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e50  080097e8  0000be50  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aca4  00000000  00000000  0000b136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c6b  00000000  00000000  00025dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00029a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b8  00000000  00000000  0002b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040b1f  00000000  00000000  0002c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd41  00000000  00000000  0006ce67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00183852  00000000  00000000  00089ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020d3fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d0  00000000  00000000  0020d440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00213610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000100 	.word	0x20000100
 8000290:	00000000 	.word	0x00000000
 8000294:	08009594 	.word	0x08009594

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000104 	.word	0x20000104
 80002b0:	08009594 	.word	0x08009594

080002b4 <Fill_Buffer>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ICACHE_Init(void);
/* USER CODE BEGIN PFP */

void Fill_Buffer(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    memset(buffer, FILL_VALUE, PACKET_SIZE);
 80002b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002bc:	2155      	movs	r1, #85	@ 0x55
 80002be:	4802      	ldr	r0, [pc, #8]	@ (80002c8 <Fill_Buffer+0x14>)
 80002c0:	f009 f93c 	bl	800953c <memset>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000600 	.word	0x20000600

080002cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002cc:	b5b0      	push	{r4, r5, r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d2:	f000 fb19 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d6:	f000 f81d 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002da:	f000 f8b5 	bl	8000448 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002de:	f000 f871 	bl	80003c4 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_OTG_HS_PCD_Init();
 80002e2:	f000 f883 	bl	80003ec <MX_USB_OTG_HS_PCD_Init>
	MX_USB_DEVICE_Init();
 80002e6:	f008 fc5b 	bl	8008ba0 <MX_USB_DEVICE_Init>

	Fill_Buffer();
 80002ea:	f7ff ffe3 	bl	80002b4 <Fill_Buffer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t msg[] = "Hello, USB CDC!\r\n";
 80002ee:	4b07      	ldr	r3, [pc, #28]	@ (800030c <main+0x40>)
 80002f0:	1d3c      	adds	r4, r7, #4
 80002f2:	461d      	mov	r5, r3
 80002f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f8:	682b      	ldr	r3, [r5, #0]
 80002fa:	8023      	strh	r3, [r4, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//CDC_Transmit_HS(msg, sizeof(msg) - 1);
		CDC_Transmit_HS(buffer, PACKET_SIZE);
 80002fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000300:	4803      	ldr	r0, [pc, #12]	@ (8000310 <main+0x44>)
 8000302:	f008 fd0b 	bl	8008d1c <CDC_Transmit_HS>
	while (1) {
 8000306:	bf00      	nop
 8000308:	e7f8      	b.n	80002fc <main+0x30>
 800030a:	bf00      	nop
 800030c:	080095ac 	.word	0x080095ac
 8000310:	20000600 	.word	0x20000600

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b09e      	sub	sp, #120	@ 0x78
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2260      	movs	r2, #96	@ 0x60
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f009 f90a 	bl	800953c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	463b      	mov	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]
 8000336:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000338:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800033c:	f002 f966 	bl	800260c <HAL_PWREx_ControlVoltageScaling>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000346:	f000 f919 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800034a:	2301      	movs	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000354:	2302      	movs	r3, #2
 8000356:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000358:	2303      	movs	r3, #3
 800035a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000360:	2301      	movs	r3, #1
 8000362:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000364:	2314      	movs	r3, #20
 8000366:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000368:	2308      	movs	r3, #8
 800036a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800036c:	2302      	movs	r3, #2
 800036e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000370:	2302      	movs	r3, #2
 8000372:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000374:	230c      	movs	r3, #12
 8000376:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f002 fa0d 	bl	80027a0 <HAL_RCC_OscConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800038c:	f000 f8f6 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000390:	231f      	movs	r3, #31
 8000392:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	2303      	movs	r3, #3
 8000396:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003a8:	463b      	mov	r3, r7
 80003aa:	2104      	movs	r1, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 f8d3 	bl	8003558 <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80003b8:	f000 f8e0 	bl	800057c <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3778      	adds	r7, #120	@ 0x78
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003c8:	2000      	movs	r0, #0
 80003ca:	f000 fe61 	bl	8001090 <HAL_ICACHE_ConfigAssociativityMode>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003d4:	f000 f8d2 	bl	800057c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003d8:	f000 fe7a 	bl	80010d0 <HAL_ICACHE_Enable>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003e2:	f000 f8cb 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_OTG_HS_PCD_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80003f0:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003f2:	4a14      	ldr	r2, [pc, #80]	@ (8000444 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80003f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80003f6:	4b12      	ldr	r3, [pc, #72]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003f8:	2209      	movs	r2, #9
 80003fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80003fc:	4b10      	ldr	r3, [pc, #64]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003fe:	2200      	movs	r2, #0
 8000400:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000404:	2203      	movs	r2, #3
 8000406:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000408:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800040a:	2200      	movs	r2, #0
 800040c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000410:	2200      	movs	r2, #0
 8000412:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000416:	2200      	movs	r2, #0
 8000418:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800041c:	2200      	movs	r2, #0
 800041e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000422:	2200      	movs	r2, #0
 8000424:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000428:	2200      	movs	r2, #0
 800042a:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	@ (8000440 <MX_USB_OTG_HS_PCD_Init+0x54>)
 800042e:	f000 fe5f 	bl	80010f0 <HAL_PCD_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8000438:	f000 f8a0 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	2000011c 	.word	0x2000011c
 8000444:	42040000 	.word	0x42040000

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	@ 0x28
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800045e:	4b3b      	ldr	r3, [pc, #236]	@ (800054c <MX_GPIO_Init+0x104>)
 8000460:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000464:	4a39      	ldr	r2, [pc, #228]	@ (800054c <MX_GPIO_Init+0x104>)
 8000466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800046a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800046e:	4b37      	ldr	r3, [pc, #220]	@ (800054c <MX_GPIO_Init+0x104>)
 8000470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000478:	613b      	str	r3, [r7, #16]
 800047a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b33      	ldr	r3, [pc, #204]	@ (800054c <MX_GPIO_Init+0x104>)
 800047e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000482:	4a32      	ldr	r2, [pc, #200]	@ (800054c <MX_GPIO_Init+0x104>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800048c:	4b2f      	ldr	r3, [pc, #188]	@ (800054c <MX_GPIO_Init+0x104>)
 800048e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049a:	4b2c      	ldr	r3, [pc, #176]	@ (800054c <MX_GPIO_Init+0x104>)
 800049c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004a0:	4a2a      	ldr	r2, [pc, #168]	@ (800054c <MX_GPIO_Init+0x104>)
 80004a2:	f043 0308 	orr.w	r3, r3, #8
 80004a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004aa:	4b28      	ldr	r3, [pc, #160]	@ (800054c <MX_GPIO_Init+0x104>)
 80004ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004b8:	4b24      	ldr	r3, [pc, #144]	@ (800054c <MX_GPIO_Init+0x104>)
 80004ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004be:	4a23      	ldr	r2, [pc, #140]	@ (800054c <MX_GPIO_Init+0x104>)
 80004c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004c8:	4b20      	ldr	r3, [pc, #128]	@ (800054c <MX_GPIO_Init+0x104>)
 80004ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2114      	movs	r1, #20
 80004da:	481d      	ldr	r0, [pc, #116]	@ (8000550 <MX_GPIO_Init+0x108>)
 80004dc:	f000 fdc0 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DBG1_Pin|DBGP_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80004e6:	481b      	ldr	r0, [pc, #108]	@ (8000554 <MX_GPIO_Init+0x10c>)
 80004e8:	f000 fdba 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80004ec:	2304      	movs	r3, #4
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	2302      	movs	r3, #2
 80004fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	4619      	mov	r1, r3
 8000502:	4813      	ldr	r0, [pc, #76]	@ (8000550 <MX_GPIO_Init+0x108>)
 8000504:	f000 fbd4 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000508:	2310      	movs	r3, #16
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2300      	movs	r3, #0
 8000516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	480c      	ldr	r0, [pc, #48]	@ (8000550 <MX_GPIO_Init+0x108>)
 8000520:	f000 fbc6 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DBG1_Pin DBGP_Pin */
  GPIO_InitStruct.Pin = DBG1_Pin|DBGP_Pin;
 8000524:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_GPIO_Init+0x10c>)
 800053e:	f000 fbb7 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	@ 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	46020c00 	.word	0x46020c00
 8000550:	42020c00 	.word	0x42020c00
 8000554:	42021800 	.word	0x42021800

08000558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a04      	ldr	r2, [pc, #16]	@ (8000578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d101      	bne.n	800056e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800056a:	f000 f9fd 	bl	8000968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40001000 	.word	0x40001000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <HAL_MspInit+0x34>)
 8000590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000594:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <HAL_MspInit+0x34>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800059e:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <HAL_MspInit+0x34>)
 80005a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005a4:	f003 0304 	and.w	r3, r3, #4
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 80005ac:	f002 f8ba 	bl	8002724 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 80005b0:	f002 f8c8 	bl	8002744 <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	46020c00 	.word	0x46020c00

080005c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0be      	sub	sp, #248	@ 0xf8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c8:	f107 0318 	add.w	r3, r7, #24
 80005cc:	22e0      	movs	r2, #224	@ 0xe0
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f008 ffb3 	bl	800953c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a3e      	ldr	r2, [pc, #248]	@ (80006d4 <HAL_PCD_MspInit+0x114>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d174      	bne.n	80006ca <HAL_PCD_MspInit+0x10a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e0:	4b3d      	ldr	r3, [pc, #244]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 80005e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80005e6:	4a3c      	ldr	r2, [pc, #240]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80005f0:	4b39      	ldr	r3, [pc, #228]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 80005f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80005fe:	f04f 0200 	mov.w	r2, #0
 8000602:	f04f 0308 	mov.w	r3, #8
 8000606:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_HSE;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4618      	mov	r0, r3
 8000616:	f003 fb7f 	bl	8003d18 <HAL_RCCEx_PeriphCLKConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 8000620:	f7ff ffac 	bl	800057c <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 8000624:	200c      	movs	r0, #12
 8000626:	f000 f9f7 	bl	8000a18 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 800062c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000630:	4a29      	ldr	r2, [pc, #164]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000636:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800063a:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 800063c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8000648:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 800064a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064e:	4a22      	ldr	r2, [pc, #136]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 8000650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000654:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 800065a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 8000668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	2b00      	cmp	r3, #0
 8000672:	d11b      	bne.n	80006ac <HAL_PCD_MspInit+0xec>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 8000676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800067a:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 8000686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000692:	f002 f847 	bl	8002724 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000696:	f002 f865 	bl	8002764 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 800069c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80006a0:	4a0d      	ldr	r2, [pc, #52]	@ (80006d8 <HAL_PCD_MspInit+0x118>)
 80006a2:	f023 0304 	bic.w	r3, r3, #4
 80006a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80006aa:	e003      	b.n	80006b4 <HAL_PCD_MspInit+0xf4>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80006ac:	f002 f83a 	bl	8002724 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80006b0:	f002 f858 	bl	8002764 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f99b 	bl	80009f0 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 7, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2107      	movs	r1, #7
 80006be:	2049      	movs	r0, #73	@ 0x49
 80006c0:	f000 fa76 	bl	8000bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80006c4:	2049      	movs	r0, #73	@ 0x49
 80006c6:	f000 fa8d 	bl	8000be4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80006ca:	bf00      	nop
 80006cc:	37f8      	adds	r7, #248	@ 0xf8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	42040000 	.word	0x42040000
 80006d8:	46020c00 	.word	0x46020c00

080006dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	@ 0x38
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80006ec:	4b2e      	ldr	r3, [pc, #184]	@ (80007a8 <HAL_InitTick+0xcc>)
 80006ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80006f2:	4a2d      	ldr	r2, [pc, #180]	@ (80007a8 <HAL_InitTick+0xcc>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <HAL_InitTick+0xcc>)
 80006fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000702:	f003 0310 	and.w	r3, r3, #16
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800070a:	f107 0210 	add.w	r2, r7, #16
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fa41 	bl	8003b9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800071a:	f003 fa2b 	bl	8003b74 <HAL_RCC_GetPCLK1Freq>
 800071e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000722:	4a22      	ldr	r2, [pc, #136]	@ (80007ac <HAL_InitTick+0xd0>)
 8000724:	fba2 2303 	umull	r2, r3, r2, r3
 8000728:	0c9b      	lsrs	r3, r3, #18
 800072a:	3b01      	subs	r3, #1
 800072c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <HAL_InitTick+0xd4>)
 8000730:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <HAL_InitTick+0xd8>)
 8000732:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <HAL_InitTick+0xd4>)
 8000736:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800073a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800073c:	4a1c      	ldr	r2, [pc, #112]	@ (80007b0 <HAL_InitTick+0xd4>)
 800073e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000740:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <HAL_InitTick+0xd4>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <HAL_InitTick+0xd4>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800074e:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <HAL_InitTick+0xd4>)
 8000750:	f004 fb4a 	bl	8004de8 <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800075a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800075e:	2b00      	cmp	r3, #0
 8000760:	d118      	bne.n	8000794 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000762:	4813      	ldr	r0, [pc, #76]	@ (80007b0 <HAL_InitTick+0xd4>)
 8000764:	f004 fba2 	bl	8004eac <HAL_TIM_Base_Start_IT>
 8000768:	4603      	mov	r3, r0
 800076a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800076e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10e      	bne.n	8000794 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d808      	bhi.n	800078e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	2031      	movs	r0, #49	@ 0x31
 8000782:	f000 fa15 	bl	8000bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <HAL_InitTick+0xdc>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e002      	b.n	8000794 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000794:	2031      	movs	r0, #49	@ 0x31
 8000796:	f000 fa25 	bl	8000be4 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800079a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3738      	adds	r7, #56	@ 0x38
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	46020c00 	.word	0x46020c00
 80007ac:	431bde83 	.word	0x431bde83
 80007b0:	20000700 	.word	0x20000700
 80007b4:	40001000 	.word	0x40001000
 80007b8:	20000004 	.word	0x20000004

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <NMI_Handler+0x4>

080007c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <MemManage_Handler+0x4>

080007d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000820:	4802      	ldr	r0, [pc, #8]	@ (800082c <TIM6_IRQHandler+0x10>)
 8000822:	f004 fbe3 	bl	8004fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000700 	.word	0x20000700

08000830 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <OTG_HS_IRQHandler+0x10>)
 8000836:	f000 fd89 	bl	800134c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000011c 	.word	0x2000011c

08000844 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <SystemInit+0x68>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800084e:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <SystemInit+0x68>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <SystemInit+0x6c>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <SystemInit+0x6c>)
 8000860:	2200      	movs	r2, #0
 8000862:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <SystemInit+0x6c>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <SystemInit+0x6c>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <SystemInit+0x6c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <SystemInit+0x6c>)
 8000876:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800087a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800087e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <SystemInit+0x6c>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <SystemInit+0x6c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a09      	ldr	r2, [pc, #36]	@ (80008b0 <SystemInit+0x6c>)
 800088c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000890:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <SystemInit+0x6c>)
 8000894:	2200      	movs	r2, #0
 8000896:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <SystemInit+0x68>)
 800089a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800089e:	609a      	str	r2, [r3, #8]
  #endif
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00
 80008b0:	46020c00 	.word	0x46020c00

080008b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80008b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ec <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b8:	f7ff ffc4 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008c0:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008c8:	480a      	ldr	r0, [pc, #40]	@ (80008f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
	ldr	r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008d8:	f842 3b04 	str.w	r3, [r2], #4

080008dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <LoopForever+0x16>)
	cmp	r2, r3
 80008de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e2:	f008 fe33 	bl	800954c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e6:	f7ff fcf1 	bl	80002cc <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80008ec:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 80008f0:	080096e8 	.word	0x080096e8
	ldr	r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008f8:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 80008fc:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8000900:	20001e50 	.word	0x20001e50

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>
	...

08000908 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_Init+0x50>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a11      	ldr	r2, [pc, #68]	@ (8000958 <HAL_Init+0x50>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f93e 	bl	8000b9a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800091e:	f003 f80d 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8000922:	4602      	mov	r2, r0
 8000924:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <HAL_Init+0x54>)
 8000926:	6a1b      	ldr	r3, [r3, #32]
 8000928:	f003 030f 	and.w	r3, r3, #15
 800092c:	490c      	ldr	r1, [pc, #48]	@ (8000960 <HAL_Init+0x58>)
 800092e:	5ccb      	ldrb	r3, [r1, r3]
 8000930:	fa22 f303 	lsr.w	r3, r2, r3
 8000934:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <HAL_Init+0x5c>)
 8000936:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000938:	2004      	movs	r0, #4
 800093a:	f000 f961 	bl	8000c00 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	200f      	movs	r0, #15
 8000940:	f7ff fecc 	bl	80006dc <HAL_InitTick>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e002      	b.n	8000954 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800094e:	f7ff fe1b 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40022000 	.word	0x40022000
 800095c:	46020c00 	.word	0x46020c00
 8000960:	08009608 	.word	0x08009608
 8000964:	20000000 	.word	0x20000000

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	2000074c 	.word	0x2000074c

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	2000074c 	.word	0x2000074c

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff ffee 	bl	8000990 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffde 	bl	8000990 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008

080009f0 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80009fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009fc:	f023 0201 	bic.w	r2, r3, #1
 8000a00:	4904      	ldr	r1, [pc, #16]	@ (8000a14 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	46000400 	.word	0x46000400

08000a18 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8000a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000a24:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8000a28:	4904      	ldr	r1, [pc, #16]	@ (8000a3c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	46000400 	.word	0x46000400

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	@ (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	@ (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ff4c 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbe:	f7ff ff63 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	6978      	ldr	r0, [r7, #20]
 8000bca:	f7ff ffb3 	bl	8000b34 <NVIC_EncodePriority>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff82 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff56 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d844      	bhi.n	8000c98 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c14 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c37 	.word	0x08000c37
 8000c18:	08000c55 	.word	0x08000c55
 8000c1c:	08000c77 	.word	0x08000c77
 8000c20:	08000c99 	.word	0x08000c99
 8000c24:	08000c29 	.word	0x08000c29
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6013      	str	r3, [r2, #0]
      break;
 8000c34:	e031      	b.n	8000c9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c3c:	f023 0304 	bic.w	r3, r3, #4
 8000c40:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c4a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000c52:	e022      	b.n	8000c9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c54:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c5a:	f023 0304 	bic.w	r3, r3, #4
 8000c5e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c66:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c6a:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000c74:	e011      	b.n	8000c9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c7c:	f023 0304 	bic.w	r3, r3, #4
 8000c80:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000c96:	e000      	b.n	8000c9a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000c98:	bf00      	nop
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e010 	.word	0xe000e010
 8000cac:	46020c00 	.word	0x46020c00

08000cb0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	@ 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cc2:	e1ba      	b.n	800103a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 81aa 	beq.w	8001034 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a55      	ldr	r2, [pc, #340]	@ (8000e38 <HAL_GPIO_Init+0x188>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d15d      	bne.n	8000da4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000d18:	4a48      	ldr	r2, [pc, #288]	@ (8000e3c <HAL_GPIO_Init+0x18c>)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d20:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000d22:	4a46      	ldr	r2, [pc, #280]	@ (8000e3c <HAL_GPIO_Init+0x18c>)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4413      	add	r3, r2
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	08da      	lsrs	r2, r3, #3
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	3208      	adds	r2, #8
 8000d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220b      	movs	r2, #11
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	08da      	lsrs	r2, r3, #3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	3208      	adds	r2, #8
 8000d6e:	69f9      	ldr	r1, [r7, #28]
 8000d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2202      	movs	r2, #2
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e067      	b.n	8000e74 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x104>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b12      	cmp	r3, #18
 8000db2:	d145      	bne.n	8000e40 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	f003 020f 	and.w	r2, r3, #15
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69fa      	ldr	r2, [r7, #28]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	69f9      	ldr	r1, [r7, #28]
 8000dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0203 	and.w	r2, r3, #3
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69fa      	ldr	r2, [r7, #28]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	69fa      	ldr	r2, [r7, #28]
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e01e      	b.n	8000e74 <HAL_GPIO_Init+0x1c4>
 8000e36:	bf00      	nop
 8000e38:	46020000 	.word	0x46020000
 8000e3c:	08009660 	.word	0x08009660
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0203 	and.w	r2, r3, #3
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69fa      	ldr	r2, [r7, #28]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d00b      	beq.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d007      	beq.n	8000e94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e88:	2b11      	cmp	r3, #17
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	f003 0201 	and.w	r2, r3, #1
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d017      	beq.n	8000f2e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69fa      	ldr	r2, [r7, #28]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d07c      	beq.n	8001034 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f3a:	4a47      	ldr	r2, [pc, #284]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3318      	adds	r3, #24
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	0a9a      	lsrs	r2, r3, #10
 8000f62:	4b3e      	ldr	r3, [pc, #248]	@ (800105c <HAL_GPIO_Init+0x3ac>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	f002 0203 	and.w	r2, r2, #3
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	4093      	lsls	r3, r2
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f76:	4938      	ldr	r1, [pc, #224]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f84:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000fd2:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8000fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000fde:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000ffe:	4a16      	ldr	r2, [pc, #88]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001006:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 8001008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	4013      	ands	r3, r2
 8001016:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_GPIO_Init+0x3a8>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	f47f ae3d 	bne.w	8000cc4 <HAL_GPIO_Init+0x14>
  }
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	3724      	adds	r7, #36	@ 0x24
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	46022000 	.word	0x46022000
 800105c:	002f7f7f 	.word	0x002f7f7f

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800107c:	e002      	b.n	8001084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e007      	b.n	80010be <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 0204 	bic.w	r2, r3, #4
 80010b6:	4905      	ldr	r1, [pc, #20]	@ (80010cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80010be:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40030400 	.word	0x40030400

080010d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <HAL_ICACHE_Enable+0x1c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <HAL_ICACHE_Enable+0x1c>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40030400 	.word	0x40030400

080010f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0fe      	b.n	8001300 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fa52 	bl	80005c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f004 fb00 	bl	800572e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7c1a      	ldrb	r2, [r3, #16]
 8001136:	f88d 2000 	strb.w	r2, [sp]
 800113a:	3304      	adds	r3, #4
 800113c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113e:	f004 fa13 	bl	8005568 <USB_CoreInit>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0d5      	b.n	8001300 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f004 faf8 	bl	8005750 <USB_SetCurrentMode>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e0c6      	b.n	8001300 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e04a      	b.n	800120e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	3315      	adds	r3, #21
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	3314      	adds	r3, #20
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	b298      	uxth	r0, r3
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	440b      	add	r3, r1
 80011b2:	332e      	adds	r3, #46	@ 0x2e
 80011b4:	4602      	mov	r2, r0
 80011b6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	3318      	adds	r3, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	331c      	adds	r3, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4613      	mov	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	440b      	add	r3, r1
 80011ee:	3320      	adds	r3, #32
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	3324      	adds	r3, #36	@ 0x24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	3301      	adds	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3af      	bcc.n	8001178 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e044      	b.n	80012a8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800121e:	7bfa      	ldrb	r2, [r7, #15]
 8001220:	6879      	ldr	r1, [r7, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	440b      	add	r3, r1
 800126e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	3301      	adds	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3b5      	bcc.n	800121e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7c1a      	ldrb	r2, [r3, #16]
 80012ba:	f88d 2000 	strb.w	r2, [sp]
 80012be:	3304      	adds	r3, #4
 80012c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012c2:	f004 fa91 	bl	80057e8 <USB_DevInit>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2202      	movs	r2, #2
 80012d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e013      	b.n	8001300 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7b1b      	ldrb	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 f95c 	bl	80025ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f005 fae0 	bl	80068be <USB_DevDisconnect>

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_PCD_Start+0x16>
 800131a:	2302      	movs	r3, #2
 800131c:	e012      	b.n	8001344 <HAL_PCD_Start+0x3c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f9ee 	bl	800570c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f005 faa1 	bl	800687c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08d      	sub	sp, #52	@ 0x34
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fb5f 	bl	8006a26 <USB_GetMode>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	f040 84b9 	bne.w	8001ce2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f005 fac3 	bl	8006900 <USB_ReadInterrupts>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 84af 	beq.w	8001ce0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f005 fab0 	bl	8006900 <USB_ReadInterrupts>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d107      	bne.n	80013ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f002 0202 	and.w	r2, r2, #2
 80013b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f005 fa9e 	bl	8006900 <USB_ReadInterrupts>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d161      	bne.n	8001492 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699a      	ldr	r2, [r3, #24]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0210 	bic.w	r2, r2, #16
 80013dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	f003 020f 	and.w	r2, r3, #15
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	3304      	adds	r3, #4
 80013fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	0c5b      	lsrs	r3, r3, #17
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	2b02      	cmp	r3, #2
 8001408:	d124      	bne.n	8001454 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d035      	beq.n	8001482 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	6a38      	ldr	r0, [r7, #32]
 800142a:	f005 f8d5 	bl	80065d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143a:	441a      	add	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144c:	441a      	add	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	615a      	str	r2, [r3, #20]
 8001452:	e016      	b.n	8001482 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	0c5b      	lsrs	r3, r3, #17
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	2b06      	cmp	r3, #6
 800145e:	d110      	bne.n	8001482 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001466:	2208      	movs	r2, #8
 8001468:	4619      	mov	r1, r3
 800146a:	6a38      	ldr	r0, [r7, #32]
 800146c:	f005 f8b4 	bl	80065d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800147c:	441a      	add	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0210 	orr.w	r2, r2, #16
 8001490:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f005 fa32 	bl	8006900 <USB_ReadInterrupts>
 800149c:	4603      	mov	r3, r0
 800149e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80014a6:	f040 80a7 	bne.w	80015f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fa37 	bl	8006926 <USB_ReadDevAllOutEpInterrupt>
 80014b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80014ba:	e099      	b.n	80015f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 808e 	beq.w	80015e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fa5b 	bl	800698e <USB_ReadDevOutEPInterrupt>
 80014d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00c      	beq.n	80014fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014f0:	461a      	mov	r2, r3
 80014f2:	2301      	movs	r3, #1
 80014f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fed1 	bl	80022a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00c      	beq.n	8001522 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4413      	add	r3, r2
 8001510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001514:	461a      	mov	r2, r3
 8001516:	2308      	movs	r3, #8
 8001518:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800151a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 ffa7 	bl	8002470 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800152c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	4413      	add	r3, r2
 8001534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001538:	461a      	mov	r2, r3
 800153a:	2310      	movs	r3, #16
 800153c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d030      	beq.n	80015aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001550:	2b80      	cmp	r3, #128	@ 0x80
 8001552:	d109      	bne.n	8001568 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001562:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001566:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800156a:	4613      	mov	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	3304      	adds	r3, #4
 800157c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	78db      	ldrb	r3, [r3, #3]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d108      	bne.n	8001598 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2200      	movs	r2, #0
 800158a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f007 fdbe 	bl	8009114 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015a4:	461a      	mov	r2, r3
 80015a6:	2302      	movs	r3, #2
 80015a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015c0:	461a      	mov	r2, r3
 80015c2:	2320      	movs	r3, #32
 80015c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015dc:	461a      	mov	r2, r3
 80015de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	3301      	adds	r3, #1
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f47f af62 	bne.w	80014bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f005 f97f 	bl	8006900 <USB_ReadInterrupts>
 8001602:	4603      	mov	r3, r0
 8001604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001608:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800160c:	f040 80db 	bne.w	80017c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f005 f9a0 	bl	800695a <USB_ReadDevAllInEpInterrupt>
 800161a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001620:	e0cd      	b.n	80017be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80c2 	beq.w	80017b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f005 f9c6 	bl	80069ca <USB_ReadDevInEPInterrupt>
 800163e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d057      	beq.n	80016fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	2201      	movs	r2, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800165e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43db      	mvns	r3, r3
 8001664:	69f9      	ldr	r1, [r7, #28]
 8001666:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800166a:	4013      	ands	r3, r2
 800166c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	2301      	movs	r3, #1
 800167e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	799b      	ldrb	r3, [r3, #6]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d132      	bne.n	80016ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	3320      	adds	r3, #32
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4403      	add	r3, r0
 80016a8:	331c      	adds	r3, #28
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4419      	add	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4403      	add	r3, r0
 80016bc:	3320      	adds	r3, #32
 80016be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d113      	bne.n	80016ee <HAL_PCD_IRQHandler+0x3a2>
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ca:	4613      	mov	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	3324      	adds	r3, #36	@ 0x24
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d108      	bne.n	80016ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80016e6:	461a      	mov	r2, r3
 80016e8:	2101      	movs	r1, #1
 80016ea:	f005 f9cd 	bl	8006a88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f007 fc89 	bl	800900c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	015a      	lsls	r2, r3, #5
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001710:	461a      	mov	r2, r3
 8001712:	2308      	movs	r3, #8
 8001714:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b00      	cmp	r3, #0
 800171e:	d008      	beq.n	8001732 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800172c:	461a      	mov	r2, r3
 800172e:	2310      	movs	r3, #16
 8001730:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001748:	461a      	mov	r2, r3
 800174a:	2340      	movs	r3, #64	@ 0x40
 800174c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d023      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001758:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800175a:	6a38      	ldr	r0, [r7, #32]
 800175c:	f004 f9b4 	bl	8005ac8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001762:	4613      	mov	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	3310      	adds	r3, #16
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	3304      	adds	r3, #4
 8001772:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2200      	movs	r2, #0
 8001780:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f007 fcd5 	bl	8009138 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800179a:	461a      	mov	r2, r3
 800179c:	2302      	movs	r3, #2
 800179e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fcea 	bl	8002186 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80017b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80017be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f47f af2e 	bne.w	8001622 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 f898 	bl	8006900 <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80017d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017da:	d122      	bne.n	8001822 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d108      	bne.n	800180c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001802:	2100      	movs	r1, #0
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 fef5 	bl	80025f4 <HAL_PCDEx_LPM_Callback>
 800180a:	e002      	b.n	8001812 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f007 fc73 	bl	80090f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f005 f86a 	bl	8006900 <USB_ReadInterrupts>
 800182c:	4603      	mov	r3, r0
 800182e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001836:	d112      	bne.n	800185e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d102      	bne.n	800184e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f007 fc2f 	bl	80090ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800185c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f005 f84c 	bl	8006900 <USB_ReadInterrupts>
 8001868:	4603      	mov	r3, r0
 800186a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800186e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001872:	d121      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001882:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800188a:	2b00      	cmp	r3, #0
 800188c:	d111      	bne.n	80018b2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	f003 020f 	and.w	r2, r3, #15
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80018a8:	2101      	movs	r1, #1
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 fea2 	bl	80025f4 <HAL_PCDEx_LPM_Callback>
 80018b0:	e002      	b.n	80018b8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f007 fbfa 	bl	80090ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f005 f81f 	bl	8006900 <USB_ReadInterrupts>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018cc:	f040 80b7 	bne.w	8001a3e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2110      	movs	r1, #16
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 f8ec 	bl	8005ac8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f4:	e046      	b.n	8001984 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001902:	461a      	mov	r2, r3
 8001904:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001908:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800191a:	0151      	lsls	r1, r2, #5
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	440a      	add	r2, r1
 8001920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001924:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001928:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001936:	461a      	mov	r2, r3
 8001938:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800193c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800193e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4413      	add	r3, r2
 8001946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800194e:	0151      	lsls	r1, r2, #5
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	440a      	add	r2, r1
 8001954:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001958:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800195c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800195e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800196e:	0151      	lsls	r1, r2, #5
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	440a      	add	r2, r1
 8001974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001978:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800197c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001980:	3301      	adds	r3, #1
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	461a      	mov	r2, r3
 800198a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800198c:	4293      	cmp	r3, r2
 800198e:	d3b2      	bcc.n	80018f6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	69fa      	ldr	r2, [r7, #28]
 800199a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800199e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80019a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7bdb      	ldrb	r3, [r3, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019bc:	f043 030b 	orr.w	r3, r3, #11
 80019c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	69fa      	ldr	r2, [r7, #28]
 80019ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019d2:	f043 030b 	orr.w	r3, r3, #11
 80019d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d8:	e015      	b.n	8001a06 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80019f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a00:	f043 030b 	orr.w	r3, r3, #11
 8001a04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a14:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001a18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f005 f82d 	bl	8006a88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695a      	ldr	r2, [r3, #20]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 ff5c 	bl	8006900 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a52:	d123      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f004 fff2 	bl	8006a42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 f8a9 	bl	8005bba <USB_GetDevSpeed>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	f002 f864 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8001a78:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4620      	mov	r0, r4
 8001a82:	f003 fda1 	bl	80055c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f007 fae8 	bl	800905c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 ff2d 	bl	8006900 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d10a      	bne.n	8001ac6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f007 fac5 	bl	8009040 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f002 0208 	and.w	r2, r2, #8
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 ff18 	bl	8006900 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ad6:	2b80      	cmp	r3, #128	@ 0x80
 8001ad8:	d123      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aea:	e014      	b.n	8001b16 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af0:	4613      	mov	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fb0a 	bl	8002124 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	3301      	adds	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	791b      	ldrb	r3, [r3, #4]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d3e4      	bcc.n	8001aec <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 feea 	bl	8006900 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b36:	d13c      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b38:	2301      	movs	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3c:	e02b      	b.n	8001b96 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	015a      	lsls	r2, r3, #5
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	4413      	add	r3, r2
 8001b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3318      	adds	r3, #24
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d115      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	da12      	bge.n	8001b90 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6e:	4613      	mov	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	3317      	adds	r3, #23
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 faca 	bl	8002124 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	3301      	adds	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	791b      	ldrb	r3, [r3, #4]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d3cd      	bcc.n	8001b3e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fea2 	bl	8006900 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001bc6:	d156      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bc8:	2301      	movs	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bcc:	e045      	b.n	8001c5a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d12e      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bf6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da2b      	bge.n	8001c54 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	0c1a      	lsrs	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001c06:	4053      	eors	r3, r2
 8001c08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d121      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10a      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c50:	6053      	str	r3, [r2, #4]
            break;
 8001c52:	e008      	b.n	8001c66 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	3301      	adds	r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	791b      	ldrb	r3, [r3, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d3b3      	bcc.n	8001bce <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 fe40 	bl	8006900 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f007 fa65 	bl	800915c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fe2a 	bl	8006900 <USB_ReadInterrupts>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d115      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f007 fa55 	bl	8009178 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	e000      	b.n	8001ce2 <HAL_PCD_IRQHandler+0x996>
      return;
 8001ce0:	bf00      	nop
    }
  }
}
 8001ce2:	3734      	adds	r7, #52	@ 0x34
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}

08001ce8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_PCD_SetAddress+0x1a>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e012      	b.n	8001d28 <HAL_PCD_SetAddress+0x40>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f004 fd89 	bl	8006830 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	70fb      	strb	r3, [r7, #3]
 8001d42:	460b      	mov	r3, r1
 8001d44:	803b      	strh	r3, [r7, #0]
 8001d46:	4613      	mov	r3, r2
 8001d48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da0f      	bge.n	8001d76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 020f 	and.w	r2, r3, #15
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	3310      	adds	r3, #16
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	705a      	strb	r2, [r3, #1]
 8001d74:	e00f      	b.n	8001d96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	78ba      	ldrb	r2, [r7, #2]
 8001db0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	785b      	ldrb	r3, [r3, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dc4:	78bb      	ldrb	r3, [r7, #2]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d102      	bne.n	8001dd0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_PCD_EP_Open+0xae>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e00e      	b.n	8001dfc <HAL_PCD_EP_Open+0xcc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f003 ff09 	bl	8005c04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001dfa:	7afb      	ldrb	r3, [r7, #11]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da0f      	bge.n	8001e38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 020f 	and.w	r2, r3, #15
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	3310      	adds	r3, #16
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	705a      	strb	r2, [r3, #1]
 8001e36:	e00f      	b.n	8001e58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 020f 	and.w	r2, r3, #15
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3304      	adds	r3, #4
 8001e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_PCD_EP_Close+0x6e>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e00e      	b.n	8001e90 <HAL_PCD_EP_Close+0x8c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68f9      	ldr	r1, [r7, #12]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 ff47 	bl	8005d14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
 8001eaa:	f003 020f 	and.w	r2, r3, #15
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eda:	7afb      	ldrb	r3, [r7, #11]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	799b      	ldrb	r3, [r3, #6]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	799b      	ldrb	r3, [r3, #6]
 8001efc:	461a      	mov	r2, r3
 8001efe:	6979      	ldr	r1, [r7, #20]
 8001f00:	f003 ffe4 	bl	8005ecc <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f30:	681b      	ldr	r3, [r3, #0]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 020f 	and.w	r2, r3, #15
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	3310      	adds	r3, #16
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	3304      	adds	r3, #4
 8001f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	799b      	ldrb	r3, [r3, #6]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	799b      	ldrb	r3, [r3, #6]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	f003 ff92 	bl	8005ecc <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	7912      	ldrb	r2, [r2, #4]
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e04f      	b.n	8002070 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da0f      	bge.n	8001ff8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	705a      	strb	r2, [r3, #1]
 8001ff6:	e00d      	b.n	8002014 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	b2da      	uxtb	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_PCD_EP_SetStall+0x82>
 8002030:	2302      	movs	r3, #2
 8002032:	e01d      	b.n	8002070 <HAL_PCD_EP_SetStall+0xbe>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fb20 	bl	8006688 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7999      	ldrb	r1, [r3, #6]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002060:	461a      	mov	r2, r3
 8002062:	f004 fd11 	bl	8006a88 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	7912      	ldrb	r2, [r2, #4]
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e042      	b.n	800211c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209a:	2b00      	cmp	r3, #0
 800209c:	da0f      	bge.n	80020be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	f003 020f 	and.w	r2, r3, #15
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3310      	adds	r3, #16
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	3304      	adds	r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	705a      	strb	r2, [r3, #1]
 80020bc:	e00f      	b.n	80020de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_PCD_EP_ClrStall+0x86>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e00e      	b.n	800211c <HAL_PCD_EP_ClrStall+0xa4>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	4618      	mov	r0, r3
 800210e:	f004 fb29 	bl	8006764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002134:	2b00      	cmp	r3, #0
 8002136:	da0c      	bge.n	8002152 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	f003 020f 	and.w	r2, r3, #15
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	3310      	adds	r3, #16
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e00c      	b.n	800216c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 020f 	and.w	r2, r3, #15
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4413      	add	r3, r2
 8002168:	3304      	adds	r3, #4
 800216a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f948 	bl	8006408 <USB_EPStopXfer>
 8002178:	4603      	mov	r3, r0
 800217a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800217c:	7afb      	ldrb	r3, [r7, #11]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b08a      	sub	sp, #40	@ 0x28
 800218a:	af02      	add	r7, sp, #8
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	3310      	adds	r3, #16
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	3304      	adds	r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d901      	bls.n	80021be <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d902      	bls.n	80021da <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3303      	adds	r3, #3
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e2:	e02a      	b.n	800223a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	69fa      	ldr	r2, [r7, #28]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d902      	bls.n	8002200 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	3303      	adds	r3, #3
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4603      	mov	r3, r0
 800221c:	6978      	ldr	r0, [r7, #20]
 800221e:	f004 f99d 	bl	800655c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	441a      	add	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	441a      	add	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	429a      	cmp	r2, r3
 800224e:	d809      	bhi.n	8002264 <PCD_WriteEmptyTxFifo+0xde>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002258:	429a      	cmp	r2, r3
 800225a:	d203      	bcs.n	8002264 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1bf      	bne.n	80021e4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	429a      	cmp	r2, r3
 800226e:	d811      	bhi.n	8002294 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	2201      	movs	r2, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	43db      	mvns	r3, r3
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002290:	4013      	ands	r3, r2
 8002292:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	333c      	adds	r3, #60	@ 0x3c
 80022b8:	3304      	adds	r3, #4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	799b      	ldrb	r3, [r3, #6]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d17b      	bne.n	80023ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	4a61      	ldr	r2, [pc, #388]	@ (8002468 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	f240 80b9 	bls.w	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80b3 	beq.w	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002302:	461a      	mov	r2, r3
 8002304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002308:	6093      	str	r3, [r2, #8]
 800230a:	e0a7      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002322:	461a      	mov	r2, r3
 8002324:	2320      	movs	r3, #32
 8002326:	6093      	str	r3, [r2, #8]
 8002328:	e098      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 8093 	bne.w	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	4a4b      	ldr	r2, [pc, #300]	@ (8002468 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d90f      	bls.n	800235e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4413      	add	r3, r2
 8002350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	e07e      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	3304      	adds	r3, #4
 8002372:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	0159      	lsls	r1, r3, #5
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	440b      	add	r3, r1
 8002380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	1ad2      	subs	r2, r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d114      	bne.n	80023c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023a8:	461a      	mov	r2, r3
 80023aa:	2101      	movs	r1, #1
 80023ac:	f004 fb6c 	bl	8006a88 <USB_EP0_OutStart>
 80023b0:	e006      	b.n	80023c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	441a      	add	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4619      	mov	r1, r3
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f006 fe05 	bl	8008fd6 <HAL_PCD_DataOutStageCallback>
 80023cc:	e046      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4a26      	ldr	r2, [pc, #152]	@ (800246c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d124      	bne.n	8002420 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ec:	461a      	mov	r2, r3
 80023ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	e032      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240c:	461a      	mov	r2, r3
 800240e:	2320      	movs	r3, #32
 8002410:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f006 fddc 	bl	8008fd6 <HAL_PCD_DataOutStageCallback>
 800241e:	e01d      	b.n	800245c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d114      	bne.n	8002450 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002448:	461a      	mov	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	f004 fb1c 	bl	8006a88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f006 fdbd 	bl	8008fd6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	4f54300a 	.word	0x4f54300a
 800246c:	4f54310a 	.word	0x4f54310a

08002470 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	333c      	adds	r3, #60	@ 0x3c
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a15      	ldr	r2, [pc, #84]	@ (80024f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d90e      	bls.n	80024c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024bc:	461a      	mov	r2, r3
 80024be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f006 fd74 	bl	8008fb2 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d90c      	bls.n	80024ec <PCD_EP_OutSetupPacket_int+0x7c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	799b      	ldrb	r3, [r3, #6]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d108      	bne.n	80024ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024e4:	461a      	mov	r2, r3
 80024e6:	2101      	movs	r1, #1
 80024e8:	f004 face 	bl	8006a88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	4f54300a 	.word	0x4f54300a

080024fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
 8002508:	4613      	mov	r3, r2
 800250a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800251a:	883b      	ldrh	r3, [r7, #0]
 800251c:	0419      	lsls	r1, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	430a      	orrs	r2, r1
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
 8002528:	e028      	b.n	800257c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	0c1b      	lsrs	r3, r3, #16
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4413      	add	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e00d      	b.n	800255a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	3340      	adds	r3, #64	@ 0x40
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4413      	add	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	3301      	adds	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	3b01      	subs	r3, #1
 8002560:	429a      	cmp	r2, r3
 8002562:	d3ec      	bcc.n	800253e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002564:	883b      	ldrh	r3, [r7, #0]
 8002566:	0418      	lsls	r0, r3, #16
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	3b01      	subs	r3, #1
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	4302      	orrs	r2, r0
 8002574:	3340      	adds	r3, #64	@ 0x40
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025de:	f043 0303 	orr.w	r3, r3, #3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002614:	4b39      	ldr	r3, [pc, #228]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d10b      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d905      	bls.n	800263a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800262e:	4b33      	ldr	r3, [pc, #204]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a32      	ldr	r2, [pc, #200]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002638:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e057      	b.n	80026ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002644:	d90a      	bls.n	800265c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002646:	4b2d      	ldr	r3, [pc, #180]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4313      	orrs	r3, r2
 8002652:	4a2a      	ldr	r2, [pc, #168]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002658:	60d3      	str	r3, [r2, #12]
 800265a:	e007      	b.n	800266c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800265c:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002664:	4925      	ldr	r1, [pc, #148]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4313      	orrs	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800266c:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a24      	ldr	r2, [pc, #144]	@ (8002704 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	2232      	movs	r2, #50	@ 0x32
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	4a21      	ldr	r2, [pc, #132]	@ (8002704 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	3301      	adds	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800268a:	e002      	b.n	8002692 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3b01      	subs	r3, #1
 8002690:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_PWREx_ControlVoltageScaling+0x98>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f3      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01b      	beq.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a15      	ldr	r2, [pc, #84]	@ (8002704 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	2232      	movs	r2, #50	@ 0x32
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	4a11      	ldr	r2, [pc, #68]	@ (8002704 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	3301      	adds	r3, #1
 80026c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80026c8:	e002      	b.n	80026d0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f3      	bne.n	80026ca <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e000      	b.n	80026ee <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	46020800 	.word	0x46020800
 8002700:	20000000 	.word	0x20000000
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <HAL_PWREx_GetVoltageRange+0x18>)
 800270e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	46020800 	.word	0x46020800

08002724 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_PWREx_EnableVddUSB+0x1c>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <HAL_PWREx_EnableVddUSB+0x1c>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002732:	6113      	str	r3, [r2, #16]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	46020800 	.word	0x46020800

08002744 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_PWREx_EnableVddIO2+0x1c>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	4a04      	ldr	r2, [pc, #16]	@ (8002760 <HAL_PWREx_EnableVddIO2+0x1c>)
 800274e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002752:	6113      	str	r3, [r2, #16]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	46020800 	.word	0x46020800

08002764 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800276a:	f7ff ffcd 	bl	8002708 <HAL_PWREx_GetVoltageRange>
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002776:	d003      	beq.n	8002780 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800277e:	d107      	bne.n	8002790 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a05      	ldr	r2, [pc, #20]	@ (800279c <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 8002786:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 800278a:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
 800278e:	e000      	b.n	8002792 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	46020800 	.word	0x46020800

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08e      	sub	sp, #56	@ 0x38
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f000 bec8 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ba:	4b99      	ldr	r3, [pc, #612]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c4:	4b96      	ldr	r3, [pc, #600]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 816c 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_RCC_OscConfig+0x52>
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	f040 80de 	bne.w	80029a6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	f040 80da 	bne.w	80029a6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	f000 bea5 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002804:	4b86      	ldr	r3, [pc, #536]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_RCC_OscConfig+0x7a>
 8002810:	4b83      	ldr	r3, [pc, #524]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002818:	e005      	b.n	8002826 <HAL_RCC_OscConfig+0x86>
 800281a:	4b81      	ldr	r3, [pc, #516]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800281c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002826:	4293      	cmp	r3, r2
 8002828:	d255      	bcs.n	80028d6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	4618      	mov	r0, r3
 8002836:	f001 f9e9 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f000 be82 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002846:	4b76      	ldr	r3, [pc, #472]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4a75      	ldr	r2, [pc, #468]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800284c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002850:	6093      	str	r3, [r2, #8]
 8002852:	4b73      	ldr	r3, [pc, #460]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	4970      	ldr	r1, [pc, #448]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002860:	4313      	orrs	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002868:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800286c:	d309      	bcc.n	8002882 <HAL_RCC_OscConfig+0xe2>
 800286e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 021f 	bic.w	r2, r3, #31
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4969      	ldr	r1, [pc, #420]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800287c:	4313      	orrs	r3, r2
 800287e:	60cb      	str	r3, [r1, #12]
 8002880:	e07e      	b.n	8002980 <HAL_RCC_OscConfig+0x1e0>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	2b00      	cmp	r3, #0
 8002888:	da0a      	bge.n	80028a0 <HAL_RCC_OscConfig+0x100>
 800288a:	4b65      	ldr	r3, [pc, #404]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	015b      	lsls	r3, r3, #5
 8002898:	4961      	ldr	r1, [pc, #388]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800289a:	4313      	orrs	r3, r2
 800289c:	60cb      	str	r3, [r1, #12]
 800289e:	e06f      	b.n	8002980 <HAL_RCC_OscConfig+0x1e0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a8:	d30a      	bcc.n	80028c0 <HAL_RCC_OscConfig+0x120>
 80028aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	029b      	lsls	r3, r3, #10
 80028b8:	4959      	ldr	r1, [pc, #356]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60cb      	str	r3, [r1, #12]
 80028be:	e05f      	b.n	8002980 <HAL_RCC_OscConfig+0x1e0>
 80028c0:	4b57      	ldr	r3, [pc, #348]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	03db      	lsls	r3, r3, #15
 80028ce:	4954      	ldr	r1, [pc, #336]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
 80028d4:	e054      	b.n	8002980 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80028d6:	4b52      	ldr	r3, [pc, #328]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a51      	ldr	r2, [pc, #324]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028e0:	6093      	str	r3, [r2, #8]
 80028e2:	4b4f      	ldr	r3, [pc, #316]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	494c      	ldr	r1, [pc, #304]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80028fc:	d309      	bcc.n	8002912 <HAL_RCC_OscConfig+0x172>
 80028fe:	4b48      	ldr	r3, [pc, #288]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f023 021f 	bic.w	r2, r3, #31
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4945      	ldr	r1, [pc, #276]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800290c:	4313      	orrs	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e028      	b.n	8002964 <HAL_RCC_OscConfig+0x1c4>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	da0a      	bge.n	8002930 <HAL_RCC_OscConfig+0x190>
 800291a:	4b41      	ldr	r3, [pc, #260]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	493d      	ldr	r1, [pc, #244]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800292a:	4313      	orrs	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
 800292e:	e019      	b.n	8002964 <HAL_RCC_OscConfig+0x1c4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002938:	d30a      	bcc.n	8002950 <HAL_RCC_OscConfig+0x1b0>
 800293a:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	029b      	lsls	r3, r3, #10
 8002948:	4935      	ldr	r1, [pc, #212]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 800294a:	4313      	orrs	r3, r2
 800294c:	60cb      	str	r3, [r1, #12]
 800294e:	e009      	b.n	8002964 <HAL_RCC_OscConfig+0x1c4>
 8002950:	4b33      	ldr	r3, [pc, #204]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	03db      	lsls	r3, r3, #15
 800295e:	4930      	ldr	r1, [pc, #192]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002960:	4313      	orrs	r3, r2
 8002962:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f001 f94c 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f000 bde5 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002980:	f001 f8de 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002984:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <HAL_RCC_OscConfig+0x284>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fea7 	bl	80006dc <HAL_InitTick>
 800298e:	4603      	mov	r3, r0
 8002990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8002994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 808a 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800299e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a2:	f000 bdd2 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d066      	beq.n	8002a7c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80029ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80029ba:	f7fd ffe9 	bl	8000990 <HAL_GetTick>
 80029be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80029c0:	e009      	b.n	80029d6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c2:	f7fd ffe5 	bl	8000990 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d902      	bls.n	80029d6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	f000 bdba 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80029d6:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80029e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	4909      	ldr	r1, [pc, #36]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a08:	d30e      	bcc.n	8002a28 <HAL_RCC_OscConfig+0x288>
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f023 021f 	bic.w	r2, r3, #31
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4902      	ldr	r1, [pc, #8]	@ (8002a20 <HAL_RCC_OscConfig+0x280>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
 8002a1c:	e04a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x314>
 8002a1e:	bf00      	nop
 8002a20:	46020c00 	.word	0x46020c00
 8002a24:	20000004 	.word	0x20000004
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da0a      	bge.n	8002a46 <HAL_RCC_OscConfig+0x2a6>
 8002a30:	4b98      	ldr	r3, [pc, #608]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	015b      	lsls	r3, r3, #5
 8002a3e:	4995      	ldr	r1, [pc, #596]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
 8002a44:	e036      	b.n	8002ab4 <HAL_RCC_OscConfig+0x314>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d30a      	bcc.n	8002a66 <HAL_RCC_OscConfig+0x2c6>
 8002a50:	4b90      	ldr	r3, [pc, #576]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	029b      	lsls	r3, r3, #10
 8002a5e:	498d      	ldr	r1, [pc, #564]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60cb      	str	r3, [r1, #12]
 8002a64:	e026      	b.n	8002ab4 <HAL_RCC_OscConfig+0x314>
 8002a66:	4b8b      	ldr	r3, [pc, #556]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	03db      	lsls	r3, r3, #15
 8002a74:	4987      	ldr	r1, [pc, #540]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60cb      	str	r3, [r1, #12]
 8002a7a:	e01b      	b.n	8002ab4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002a7c:	4b85      	ldr	r3, [pc, #532]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a84      	ldr	r2, [pc, #528]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a88:	f7fd ff82 	bl	8000990 <HAL_GetTick>
 8002a8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a90:	f7fd ff7e 	bl	8000990 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d902      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	f000 bd53 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ef      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2f0>
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ab2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 808b 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x334>
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d109      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d17d      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	f000 bd34 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x35a>
 8002aec:	4b69      	ldr	r3, [pc, #420]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a68      	ldr	r2, [pc, #416]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e041      	b.n	8002b7e <HAL_RCC_OscConfig+0x3de>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b02:	d112      	bne.n	8002b2a <HAL_RCC_OscConfig+0x38a>
 8002b04:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a62      	ldr	r2, [pc, #392]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b60      	ldr	r3, [pc, #384]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5f      	ldr	r2, [pc, #380]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5c      	ldr	r2, [pc, #368]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	e029      	b.n	8002b7e <HAL_RCC_OscConfig+0x3de>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002b32:	d112      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3ba>
 8002b34:	4b57      	ldr	r3, [pc, #348]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a56      	ldr	r2, [pc, #344]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b54      	ldr	r3, [pc, #336]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a53      	ldr	r2, [pc, #332]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b51      	ldr	r3, [pc, #324]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a50      	ldr	r2, [pc, #320]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	e011      	b.n	8002b7e <HAL_RCC_OscConfig+0x3de>
 8002b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b4b      	ldr	r3, [pc, #300]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b48      	ldr	r3, [pc, #288]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a47      	ldr	r2, [pc, #284]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d014      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002b86:	f7fd ff03 	bl	8000990 <HAL_GetTick>
 8002b8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8e:	f7fd feff 	bl	8000990 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	@ 0x64
 8002b9a:	d902      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	f000 bcd4 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ef      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3ee>
 8002bae:	e013      	b.n	8002bd8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002bb0:	f7fd feee 	bl	8000990 <HAL_GetTick>
 8002bb4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bb6:	e009      	b.n	8002bcc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fd feea 	bl	8000990 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	@ 0x64
 8002bc4:	d902      	bls.n	8002bcc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	f000 bcbf 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bcc:	4b31      	ldr	r3, [pc, #196]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ef      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d05f      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d005      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x456>
 8002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d114      	bne.n	8002c1a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d111      	bne.n	8002c1a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f000 bca3 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	4920      	ldr	r1, [pc, #128]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c18:	e044      	b.n	8002ca4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d024      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002c22:	4b1c      	ldr	r3, [pc, #112]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c2e:	f7fd feaf 	bl	8000990 <HAL_GetTick>
 8002c32:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c34:	e009      	b.n	8002c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c36:	f7fd feab 	bl	8000990 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d902      	bls.n	8002c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	f000 bc80 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4a:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ef      	beq.n	8002c36 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002c56:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	490b      	ldr	r1, [pc, #44]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
 8002c6a:	e01b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c78:	f7fd fe8a 	bl	8000990 <HAL_GetTick>
 8002c7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c7e:	e00b      	b.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c80:	f7fd fe86 	bl	8000990 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d904      	bls.n	8002c98 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	f000 bc5b 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
 8002c94:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c98:	4baf      	ldr	r3, [pc, #700]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ed      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80c8 	beq.w	8002e42 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cb8:	4ba7      	ldr	r3, [pc, #668]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d111      	bne.n	8002cea <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4ba4      	ldr	r3, [pc, #656]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ccc:	4aa2      	ldr	r2, [pc, #648]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002cd6:	4ba0      	ldr	r3, [pc, #640]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002cea:	4b9c      	ldr	r3, [pc, #624]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d119      	bne.n	8002d2a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002cf6:	4b99      	ldr	r3, [pc, #612]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	4a98      	ldr	r2, [pc, #608]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fd fe45 	bl	8000990 <HAL_GetTick>
 8002d06:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d08:	e009      	b.n	8002d1e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fd fe41 	bl	8000990 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d902      	bls.n	8002d1e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	f000 bc16 	b.w	800354a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002d1e:	4b8f      	ldr	r3, [pc, #572]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ef      	beq.n	8002d0a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d05f      	beq.n	8002df2 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002d32:	4b89      	ldr	r3, [pc, #548]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d38:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d037      	beq.n	8002db8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e3f4      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d70:	4a79      	ldr	r2, [pc, #484]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002d72:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002d76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002d7a:	f7fd fe09 	bl	8000990 <HAL_GetTick>
 8002d7e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fd fe05 	bl	8000990 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e3da      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d94:	4b70      	ldr	r3, [pc, #448]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1ef      	bne.n	8002d82 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002da2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002da8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4969      	ldr	r1, [pc, #420]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002db8:	4b67      	ldr	r3, [pc, #412]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dbe:	4a66      	ldr	r2, [pc, #408]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002dc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002dc8:	f7fd fde2 	bl	8000990 <HAL_GetTick>
 8002dcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fd fdde 	bl	8000990 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b05      	cmp	r3, #5
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e3b3      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002de2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002de4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ef      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x630>
 8002df0:	e01b      	b.n	8002e2a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002df2:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002df8:	4a57      	ldr	r2, [pc, #348]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002dfa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002e02:	f7fd fdc5 	bl	8000990 <HAL_GetTick>
 8002e06:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fd fdc1 	bl	8000990 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e396      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002e1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1ef      	bne.n	8002e0a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d107      	bne.n	8002e42 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e32:	4b49      	ldr	r3, [pc, #292]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e38:	4a47      	ldr	r2, [pc, #284]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002e3a:	f023 0304 	bic.w	r3, r3, #4
 8002e3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8111 	beq.w	8003072 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b40      	ldr	r3, [pc, #256]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b3c      	ldr	r3, [pc, #240]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002e6c:	f043 0304 	orr.w	r3, r3, #4
 8002e70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e74:	4b38      	ldr	r3, [pc, #224]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e88:	4b34      	ldr	r3, [pc, #208]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d118      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e94:	4b31      	ldr	r3, [pc, #196]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	4a30      	ldr	r2, [pc, #192]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea0:	f7fd fd76 	bl	8000990 <HAL_GetTick>
 8002ea4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fd fd72 	bl	8000990 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e347      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002eba:	4b28      	ldr	r3, [pc, #160]	@ (8002f5c <HAL_RCC_OscConfig+0x7bc>)
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01f      	beq.n	8002f12 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ede:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ef4:	4a18      	ldr	r2, [pc, #96]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002efe:	e018      	b.n	8002f32 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f06:	4a14      	ldr	r2, [pc, #80]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f10:	e00f      	b.n	8002f32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002f14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f18:	4a0f      	ldr	r2, [pc, #60]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002f1a:	f023 0301 	bic.w	r3, r3, #1
 8002f1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f28:	4a0b      	ldr	r2, [pc, #44]	@ (8002f58 <HAL_RCC_OscConfig+0x7b8>)
 8002f2a:	f023 0304 	bic.w	r3, r3, #4
 8002f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d057      	beq.n	8002fea <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002f3a:	f7fd fd29 	bl	8000990 <HAL_GetTick>
 8002f3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f40:	e00e      	b.n	8002f60 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f42:	f7fd fd25 	bl	8000990 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d905      	bls.n	8002f60 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e2f8      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
 8002f58:	46020c00 	.word	0x46020c00
 8002f5c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f60:	4b9c      	ldr	r3, [pc, #624]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8002f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0e9      	beq.n	8002f42 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01b      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f7a:	4b96      	ldr	r3, [pc, #600]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8002f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f80:	4a94      	ldr	r2, [pc, #592]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8002f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fd fd00 	bl	8000990 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e2d3      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8002fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ed      	beq.n	8002f8c <HAL_RCC_OscConfig+0x7ec>
 8002fb0:	e053      	b.n	800305a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fb2:	4b88      	ldr	r3, [pc, #544]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8002fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb8:	4a86      	ldr	r2, [pc, #536]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8002fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fd fce4 	bl	8000990 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e2b7      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fda:	4b7e      	ldr	r3, [pc, #504]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8002fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ed      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x824>
 8002fe8:	e037      	b.n	800305a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002fea:	f7fd fcd1 	bl	8000990 <HAL_GetTick>
 8002fee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fd fccd 	bl	8000990 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e2a0      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003008:	4b72      	ldr	r3, [pc, #456]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800300a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ed      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003016:	4b6f      	ldr	r3, [pc, #444]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800301c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01a      	beq.n	800305a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003024:	4b6b      	ldr	r3, [pc, #428]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800302a:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800302c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003030:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fd fcab 	bl	8000990 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e27e      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800304c:	4b61      	ldr	r3, [pc, #388]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800304e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ed      	bne.n	8003036 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800305a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003062:	4b5c      	ldr	r3, [pc, #368]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003068:	4a5a      	ldr	r2, [pc, #360]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d036      	beq.n	80030ec <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003086:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a52      	ldr	r2, [pc, #328]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800308c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003090:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003092:	f7fd fc7d 	bl	8000990 <HAL_GetTick>
 8003096:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800309a:	f7fd fc79 	bl	8000990 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e24e      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030ac:	4b49      	ldr	r3, [pc, #292]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x8fa>
 80030b8:	e018      	b.n	80030ec <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80030ba:	4b46      	ldr	r3, [pc, #280]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a45      	ldr	r2, [pc, #276]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80030c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030c4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030c6:	f7fd fc63 	bl	8000990 <HAL_GetTick>
 80030ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ce:	f7fd fc5f 	bl	8000990 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e234      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80030e0:	4b3c      	ldr	r3, [pc, #240]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d036      	beq.n	8003166 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d019      	beq.n	8003134 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003100:	4b34      	ldr	r3, [pc, #208]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a33      	ldr	r2, [pc, #204]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800310a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800310c:	f7fd fc40 	bl	8000990 <HAL_GetTick>
 8003110:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003114:	f7fd fc3c 	bl	8000990 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e211      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003126:	4b2b      	ldr	r3, [pc, #172]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x974>
 8003132:	e018      	b.n	8003166 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a26      	ldr	r2, [pc, #152]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800313a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800313e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003140:	f7fd fc26 	bl	8000990 <HAL_GetTick>
 8003144:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003148:	f7fd fc22 	bl	8000990 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1f7      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800315a:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d07f      	beq.n	8003272 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003176:	2b00      	cmp	r3, #0
 8003178:	d062      	beq.n	8003240 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800317a:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4a15      	ldr	r2, [pc, #84]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003184:	6093      	str	r3, [r2, #8]
 8003186:	4b13      	ldr	r3, [pc, #76]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	4910      	ldr	r1, [pc, #64]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80031a0:	d309      	bcc.n	80031b6 <HAL_RCC_OscConfig+0xa16>
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f023 021f 	bic.w	r2, r3, #31
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4909      	ldr	r1, [pc, #36]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60cb      	str	r3, [r1, #12]
 80031b4:	e02a      	b.n	800320c <HAL_RCC_OscConfig+0xa6c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da0c      	bge.n	80031d8 <HAL_RCC_OscConfig+0xa38>
 80031be:	4b05      	ldr	r3, [pc, #20]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	015b      	lsls	r3, r3, #5
 80031cc:	4901      	ldr	r1, [pc, #4]	@ (80031d4 <HAL_RCC_OscConfig+0xa34>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60cb      	str	r3, [r1, #12]
 80031d2:	e01b      	b.n	800320c <HAL_RCC_OscConfig+0xa6c>
 80031d4:	46020c00 	.word	0x46020c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d30a      	bcc.n	80031f8 <HAL_RCC_OscConfig+0xa58>
 80031e2:	4ba1      	ldr	r3, [pc, #644]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	029b      	lsls	r3, r3, #10
 80031f0:	499d      	ldr	r1, [pc, #628]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60cb      	str	r3, [r1, #12]
 80031f6:	e009      	b.n	800320c <HAL_RCC_OscConfig+0xa6c>
 80031f8:	4b9b      	ldr	r3, [pc, #620]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	03db      	lsls	r3, r3, #15
 8003206:	4998      	ldr	r1, [pc, #608]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800320c:	4b96      	ldr	r3, [pc, #600]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a95      	ldr	r2, [pc, #596]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003212:	f043 0310 	orr.w	r3, r3, #16
 8003216:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003218:	f7fd fbba 	bl	8000990 <HAL_GetTick>
 800321c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003220:	f7fd fbb6 	bl	8000990 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e18b      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003232:	4b8d      	ldr	r3, [pc, #564]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xa80>
 800323e:	e018      	b.n	8003272 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003240:	4b89      	ldr	r3, [pc, #548]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a88      	ldr	r2, [pc, #544]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003246:	f023 0310 	bic.w	r3, r3, #16
 800324a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800324c:	f7fd fba0 	bl	8000990 <HAL_GetTick>
 8003250:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003254:	f7fd fb9c 	bl	8000990 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e171      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003266:	4b80      	ldr	r3, [pc, #512]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8166 	beq.w	8003548 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003282:	4b79      	ldr	r3, [pc, #484]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b0c      	cmp	r3, #12
 800328c:	f000 80f2 	beq.w	8003474 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	2b02      	cmp	r3, #2
 8003296:	f040 80c5 	bne.w	8003424 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b73      	ldr	r3, [pc, #460]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a72      	ldr	r2, [pc, #456]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80032a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032a4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80032a6:	f7fd fb73 	bl	8000990 <HAL_GetTick>
 80032aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7fd fb6f 	bl	8000990 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e144      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032c0:	4b69      	ldr	r3, [pc, #420]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032cc:	4b66      	ldr	r3, [pc, #408]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80032ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d111      	bne.n	80032fe <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80032da:	4b63      	ldr	r3, [pc, #396]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80032dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e0:	4a61      	ldr	r2, [pc, #388]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80032ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80032ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80032fe:	4b5b      	ldr	r3, [pc, #364]	@ (800346c <HAL_RCC_OscConfig+0xccc>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800330a:	d102      	bne.n	8003312 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800330c:	2301      	movs	r3, #1
 800330e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003312:	4b56      	ldr	r3, [pc, #344]	@ (800346c <HAL_RCC_OscConfig+0xccc>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4a55      	ldr	r2, [pc, #340]	@ (800346c <HAL_RCC_OscConfig+0xccc>)
 8003318:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800331c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800331e:	4b52      	ldr	r3, [pc, #328]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003332:	3a01      	subs	r2, #1
 8003334:	0212      	lsls	r2, r2, #8
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800333c:	430a      	orrs	r2, r1
 800333e:	494a      	ldr	r1, [pc, #296]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003340:	4313      	orrs	r3, r2
 8003342:	628b      	str	r3, [r1, #40]	@ 0x28
 8003344:	4b48      	ldr	r3, [pc, #288]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003348:	4b49      	ldr	r3, [pc, #292]	@ (8003470 <HAL_RCC_OscConfig+0xcd0>)
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003350:	3a01      	subs	r2, #1
 8003352:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800335a:	3a01      	subs	r2, #1
 800335c:	0252      	lsls	r2, r2, #9
 800335e:	b292      	uxth	r2, r2
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003366:	3a01      	subs	r2, #1
 8003368:	0412      	lsls	r2, r2, #16
 800336a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800336e:	4311      	orrs	r1, r2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003374:	3a01      	subs	r2, #1
 8003376:	0612      	lsls	r2, r2, #24
 8003378:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800337c:	430a      	orrs	r2, r1
 800337e:	493a      	ldr	r1, [pc, #232]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003384:	4b38      	ldr	r3, [pc, #224]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	4a37      	ldr	r2, [pc, #220]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800338a:	f023 0310 	bic.w	r3, r3, #16
 800338e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	4a34      	ldr	r2, [pc, #208]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800339a:	4b33      	ldr	r3, [pc, #204]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	4a32      	ldr	r2, [pc, #200]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80033a0:	f043 0310 	orr.w	r3, r3, #16
 80033a4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80033a6:	4b30      	ldr	r3, [pc, #192]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80033a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033aa:	f023 020c 	bic.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	492d      	ldr	r1, [pc, #180]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80033b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d105      	bne.n	80033cc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80033c0:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <HAL_RCC_OscConfig+0xccc>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a29      	ldr	r2, [pc, #164]	@ (800346c <HAL_RCC_OscConfig+0xccc>)
 80033c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ca:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80033cc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80033d4:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033da:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80033e4:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80033f0:	f7fd face 	bl	8000990 <HAL_GetTick>
 80033f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fd faca 	bl	8000990 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e09f      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800340a:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003416:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	4a13      	ldr	r2, [pc, #76]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003420:	6293      	str	r3, [r2, #40]	@ 0x28
 8003422:	e091      	b.n	8003548 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003424:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0f      	ldr	r2, [pc, #60]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003430:	f7fd faae 	bl	8000990 <HAL_GetTick>
 8003434:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fd faaa 	bl	8000990 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e07f      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800344a:	4b07      	ldr	r3, [pc, #28]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003456:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	4a03      	ldr	r2, [pc, #12]	@ (8003468 <HAL_RCC_OscConfig+0xcc8>)
 800345c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003460:	f023 0303 	bic.w	r3, r3, #3
 8003464:	6293      	str	r3, [r2, #40]	@ 0x28
 8003466:	e06f      	b.n	8003548 <HAL_RCC_OscConfig+0xda8>
 8003468:	46020c00 	.word	0x46020c00
 800346c:	46020800 	.word	0x46020800
 8003470:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003474:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 8003476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003478:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800347a:	4b36      	ldr	r3, [pc, #216]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 800347c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	2b01      	cmp	r3, #1
 8003486:	d039      	beq.n	80034fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0203 	and.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d132      	bne.n	80034fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d129      	bne.n	80034fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d122      	bne.n	80034fc <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d11a      	bne.n	80034fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	0a5b      	lsrs	r3, r3, #9
 80034ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d111      	bne.n	80034fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d108      	bne.n	80034fc <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	0e1b      	lsrs	r3, r3, #24
 80034ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e024      	b.n	800354a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003500:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800350e:	429a      	cmp	r2, r3
 8003510:	d01a      	beq.n	8003548 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 8003514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003516:	4a0f      	ldr	r2, [pc, #60]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 8003518:	f023 0310 	bic.w	r3, r3, #16
 800351c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd fa37 	bl	8000990 <HAL_GetTick>
 8003522:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003524:	bf00      	nop
 8003526:	f7fd fa33 	bl	8000990 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	4293      	cmp	r3, r2
 8003530:	d0f9      	beq.n	8003526 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003536:	4a07      	ldr	r2, [pc, #28]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_RCC_OscConfig+0xdb4>)
 8003542:	f043 0310 	orr.w	r3, r3, #16
 8003546:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3738      	adds	r7, #56	@ 0x38
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	46020c00 	.word	0x46020c00

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e1d9      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b9b      	ldr	r3, [pc, #620]	@ (80037dc <HAL_RCC_ClockConfig+0x284>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d910      	bls.n	800359c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b98      	ldr	r3, [pc, #608]	@ (80037dc <HAL_RCC_ClockConfig+0x284>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 020f 	bic.w	r2, r3, #15
 8003582:	4996      	ldr	r1, [pc, #600]	@ (80037dc <HAL_RCC_ClockConfig+0x284>)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b94      	ldr	r3, [pc, #592]	@ (80037dc <HAL_RCC_ClockConfig+0x284>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e1c1      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	4b8c      	ldr	r3, [pc, #560]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d908      	bls.n	80035ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80035b8:	4b89      	ldr	r3, [pc, #548]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	4986      	ldr	r1, [pc, #536]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	4b81      	ldr	r3, [pc, #516]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d909      	bls.n	80035fc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80035e8:	4b7d      	ldr	r3, [pc, #500]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	497a      	ldr	r1, [pc, #488]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d010      	beq.n	800362a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4b74      	ldr	r3, [pc, #464]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003614:	429a      	cmp	r2, r3
 8003616:	d908      	bls.n	800362a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b71      	ldr	r3, [pc, #452]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	496e      	ldr	r1, [pc, #440]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003626:	4313      	orrs	r3, r2
 8003628:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	4b69      	ldr	r3, [pc, #420]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	429a      	cmp	r2, r3
 8003644:	d908      	bls.n	8003658 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003646:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 020f 	bic.w	r2, r3, #15
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	4963      	ldr	r1, [pc, #396]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003654:	4313      	orrs	r3, r2
 8003656:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80d2 	beq.w	800380a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d143      	bne.n	80036fa <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b5b      	ldr	r3, [pc, #364]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d110      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003680:	4b57      	ldr	r3, [pc, #348]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003686:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80036a2:	f7fd f975 	bl	8000990 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80036a8:	4b4e      	ldr	r3, [pc, #312]	@ (80037e4 <HAL_RCC_ClockConfig+0x28c>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00f      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80036b6:	f7fd f96b 	bl	8000990 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e12b      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80036c8:	4b46      	ldr	r3, [pc, #280]	@ (80037e4 <HAL_RCC_ClockConfig+0x28c>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e0:	4a3f      	ldr	r2, [pc, #252]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80036e2:	f023 0304 	bic.w	r3, r3, #4
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036ea:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d121      	bne.n	800373a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e112      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d115      	bne.n	800373a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e106      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800371a:	4b31      	ldr	r3, [pc, #196]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d109      	bne.n	800373a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0fa      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800372a:	4b2d      	ldr	r3, [pc, #180]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0f2      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800373a:	4b29      	ldr	r3, [pc, #164]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f023 0203 	bic.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4926      	ldr	r1, [pc, #152]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003748:	4313      	orrs	r3, r2
 800374a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800374c:	f7fd f920 	bl	8000990 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d112      	bne.n	8003780 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800375a:	e00a      	b.n	8003772 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375c:	f7fd f918 	bl	8000990 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e0d6      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d1ee      	bne.n	800375c <HAL_RCC_ClockConfig+0x204>
 800377e:	e044      	b.n	800380a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d112      	bne.n	80037ae <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378a:	f7fd f901 	bl	8000990 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0bf      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a0:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d1ee      	bne.n	800378a <HAL_RCC_ClockConfig+0x232>
 80037ac:	e02d      	b.n	800380a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d123      	bne.n	80037fe <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7fd f8ea 	bl	8000990 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0a8      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80037ce:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <HAL_RCC_ClockConfig+0x288>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ee      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x260>
 80037da:	e016      	b.n	800380a <HAL_RCC_ClockConfig+0x2b2>
 80037dc:	40022000 	.word	0x40022000
 80037e0:	46020c00 	.word	0x46020c00
 80037e4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e8:	f7fd f8d2 	bl	8000990 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e090      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d1ee      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	4b43      	ldr	r3, [pc, #268]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	429a      	cmp	r2, r3
 8003824:	d208      	bcs.n	8003838 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003826:	4b40      	ldr	r3, [pc, #256]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 020f 	bic.w	r2, r3, #15
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	493d      	ldr	r1, [pc, #244]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b3c      	ldr	r3, [pc, #240]	@ (800392c <HAL_RCC_ClockConfig+0x3d4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d210      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b39      	ldr	r3, [pc, #228]	@ (800392c <HAL_RCC_ClockConfig+0x3d4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 020f 	bic.w	r2, r3, #15
 800384e:	4937      	ldr	r1, [pc, #220]	@ (800392c <HAL_RCC_ClockConfig+0x3d4>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b35      	ldr	r3, [pc, #212]	@ (800392c <HAL_RCC_ClockConfig+0x3d4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e05b      	b.n	8003920 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d010      	beq.n	8003896 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	4b2b      	ldr	r3, [pc, #172]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003880:	429a      	cmp	r2, r3
 8003882:	d208      	bcs.n	8003896 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b28      	ldr	r3, [pc, #160]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4925      	ldr	r1, [pc, #148]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	4b20      	ldr	r3, [pc, #128]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d209      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80038b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	4919      	ldr	r1, [pc, #100]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d010      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	4b13      	ldr	r3, [pc, #76]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d208      	bcs.n	80038f6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80038e4:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	490d      	ldr	r1, [pc, #52]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80038f6:	f000 f821 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038fa:	4602      	mov	r2, r0
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <HAL_RCC_ClockConfig+0x3d0>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	490a      	ldr	r1, [pc, #40]	@ (8003930 <HAL_RCC_ClockConfig+0x3d8>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	4a09      	ldr	r2, [pc, #36]	@ (8003934 <HAL_RCC_ClockConfig+0x3dc>)
 800390e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003910:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <HAL_RCC_ClockConfig+0x3e0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fee1 	bl	80006dc <HAL_InitTick>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]

  return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	46020c00 	.word	0x46020c00
 800392c:	40022000 	.word	0x40022000
 8003930:	08009608 	.word	0x08009608
 8003934:	20000000 	.word	0x20000000
 8003938:	20000004 	.word	0x20000004

0800393c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b08b      	sub	sp, #44	@ 0x2c
 8003940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394a:	4b78      	ldr	r3, [pc, #480]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003954:	4b75      	ldr	r3, [pc, #468]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x34>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d121      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d11e      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003970:	4b6e      	ldr	r3, [pc, #440]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800397c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800397e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003982:	0b1b      	lsrs	r3, r3, #12
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
 800398a:	e005      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800398c:	4b67      	ldr	r3, [pc, #412]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	0f1b      	lsrs	r3, r3, #28
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003998:	4a65      	ldr	r2, [pc, #404]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d110      	bne.n	80039ca <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039ac:	e00d      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ae:	4b5f      	ldr	r3, [pc, #380]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d102      	bne.n	80039c0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	e004      	b.n	80039ca <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80039c8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b0c      	cmp	r3, #12
 80039ce:	f040 80a5 	bne.w	8003b1c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80039d2:	4b56      	ldr	r3, [pc, #344]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80039dc:	4b53      	ldr	r3, [pc, #332]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80039ea:	4b50      	ldr	r3, [pc, #320]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80039f6:	4b4d      	ldr	r3, [pc, #308]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039fa:	08db      	lsrs	r3, r3, #3
 80039fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d003      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d022      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x128>
 8003a1e:	e043      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003b38 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b3e      	ldr	r3, [pc, #248]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a42:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a46:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003b3c <HAL_RCC_GetSysClockFreq+0x200>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a62:	e046      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003b38 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a86:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a8a:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003b3c <HAL_RCC_GetSysClockFreq+0x200>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa6:	e024      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ad0:	ed97 6a01 	vldr	s12, [r7, #4]
 8003ad4:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003b3c <HAL_RCC_GetSysClockFreq+0x200>
 8003ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003af2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af6:	0e1b      	lsrs	r3, r3, #24
 8003af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003afc:	3301      	adds	r3, #1
 8003afe:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b16:	ee17 3a90 	vmov	r3, s15
 8003b1a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	372c      	adds	r7, #44	@ 0x2c
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	46020c00 	.word	0x46020c00
 8003b30:	08009620 	.word	0x08009620
 8003b34:	00f42400 	.word	0x00f42400
 8003b38:	4b742400 	.word	0x4b742400
 8003b3c:	46000000 	.word	0x46000000

08003b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b44:	f7ff fefa 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <HAL_RCC_GetHCLKFreq+0x28>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	4906      	ldr	r1, [pc, #24]	@ (8003b6c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a05      	ldr	r2, [pc, #20]	@ (8003b70 <HAL_RCC_GetHCLKFreq+0x30>)
 8003b5c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003b5e:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <HAL_RCC_GetHCLKFreq+0x30>)
 8003b60:	681b      	ldr	r3, [r3, #0]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	46020c00 	.word	0x46020c00
 8003b6c:	08009608 	.word	0x08009608
 8003b70:	20000000 	.word	0x20000000

08003b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003b78:	f7ff ffe2 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	@ (8003b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	46020c00 	.word	0x46020c00
 8003b98:	08009618 	.word	0x08009618

08003b9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	221f      	movs	r2, #31
 8003baa:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003bac:	4b15      	ldr	r3, [pc, #84]	@ (8003c04 <HAL_RCC_GetClockConfig+0x68>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 0203 	and.w	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <HAL_RCC_GetClockConfig+0x68>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <HAL_RCC_GetClockConfig+0x68>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_RCC_GetClockConfig+0x68>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <HAL_RCC_GetClockConfig+0x68>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bea:	4b07      	ldr	r3, [pc, #28]	@ (8003c08 <HAL_RCC_GetClockConfig+0x6c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 020f 	and.w	r2, r3, #15
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	46020c00 	.word	0x46020c00
 8003c08:	40022000 	.word	0x40022000

08003c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c14:	4b3e      	ldr	r3, [pc, #248]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c22:	f7fe fd71 	bl	8002708 <HAL_PWREx_GetVoltageRange>
 8003c26:	6178      	str	r0, [r7, #20]
 8003c28:	e019      	b.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	4b39      	ldr	r3, [pc, #228]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c30:	4a37      	ldr	r2, [pc, #220]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c3a:	4b35      	ldr	r3, [pc, #212]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c48:	f7fe fd5e 	bl	8002708 <HAL_PWREx_GetVoltageRange>
 8003c4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c4e:	4b30      	ldr	r3, [pc, #192]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c54:	4a2e      	ldr	r2, [pc, #184]	@ (8003d10 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c64:	d003      	beq.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c6c:	d109      	bne.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c74:	d202      	bcs.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003c76:	2301      	movs	r3, #1
 8003c78:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c7a:	e033      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c80:	e030      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c88:	d208      	bcs.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d102      	bne.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003c92:	2303      	movs	r3, #3
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e025      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e035      	b.n	8003d08 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ca2:	d90f      	bls.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cb0:	d902      	bls.n	8003cb8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	e015      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003cb8:	2301      	movs	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	e012      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e00f      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cca:	d109      	bne.n	8003ce0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd2:	d102      	bne.n	8003cda <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	e004      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003cda:	2302      	movs	r3, #2
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e001      	b.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 020f 	bic.w	r2, r3, #15
 8003cec:	4909      	ldr	r1, [pc, #36]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003cf4:	4b07      	ldr	r3, [pc, #28]	@ (8003d14 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	46020c00 	.word	0x46020c00
 8003d14:	40022000 	.word	0x40022000

08003d18 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b0c8      	sub	sp, #288	@ 0x120
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 0401 	and.w	r4, r2, #1
 8003d3c:	2500      	movs	r5, #0
 8003d3e:	ea54 0305 	orrs.w	r3, r4, r5
 8003d42:	d00b      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003d44:	4bd5      	ldr	r3, [pc, #852]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d4a:	f023 0103 	bic.w	r1, r3, #3
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d54:	4ad1      	ldr	r2, [pc, #836]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f002 0802 	and.w	r8, r2, #2
 8003d68:	f04f 0900 	mov.w	r9, #0
 8003d6c:	ea58 0309 	orrs.w	r3, r8, r9
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003d72:	4bca      	ldr	r3, [pc, #808]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d78:	f023 010c 	bic.w	r1, r3, #12
 8003d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	4ac6      	ldr	r2, [pc, #792]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	f002 0a04 	and.w	sl, r2, #4
 8003d96:	f04f 0b00 	mov.w	fp, #0
 8003d9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d9e:	d00b      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003da0:	4bbe      	ldr	r3, [pc, #760]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003da6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	4aba      	ldr	r2, [pc, #744]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 0308 	and.w	r3, r2, #8
 8003dc4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003dce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003dd8:	4bb0      	ldr	r3, [pc, #704]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de8:	4aac      	ldr	r2, [pc, #688]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f002 0310 	and.w	r3, r2, #16
 8003dfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003e10:	4ba2      	ldr	r3, [pc, #648]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e20:	4a9e      	ldr	r2, [pc, #632]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e34:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e3e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4313      	orrs	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003e48:	4b94      	ldr	r3, [pc, #592]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e58:	4a90      	ldr	r2, [pc, #576]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f002 0320 	and.w	r3, r2, #32
 8003e6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e76:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003e80:	4b86      	ldr	r3, [pc, #536]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e86:	f023 0107 	bic.w	r1, r3, #7
 8003e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e90:	4a82      	ldr	r2, [pc, #520]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e92:	430b      	orrs	r3, r1
 8003e94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003eb8:	4b78      	ldr	r3, [pc, #480]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ebe:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ec8:	4a74      	ldr	r2, [pc, #464]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003edc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f00:	4a66      	ldr	r2, [pc, #408]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4313      	orrs	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003f28:	4b5c      	ldr	r3, [pc, #368]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f38:	4a58      	ldr	r2, [pc, #352]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003f60:	4b4e      	ldr	r3, [pc, #312]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f66:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f70:	4a4a      	ldr	r2, [pc, #296]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f72:	430b      	orrs	r3, r1
 8003f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003f98:	4b40      	ldr	r3, [pc, #256]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f9e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003faa:	430b      	orrs	r3, r1
 8003fac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d00c      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fd6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004000:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004004:	460b      	mov	r3, r1
 8004006:	4313      	orrs	r3, r2
 8004008:	d00c      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800400a:	4b24      	ldr	r3, [pc, #144]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800400c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004010:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800401c:	4a1f      	ldr	r2, [pc, #124]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800401e:	430b      	orrs	r3, r1
 8004020:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800403a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800403e:	460b      	mov	r3, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	d00c      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004044:	4b15      	ldr	r3, [pc, #84]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800404a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800404e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004056:	4a11      	ldr	r2, [pc, #68]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004058:	430b      	orrs	r3, r1
 800405a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800406a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800406e:	2300      	movs	r3, #0
 8004070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004074:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004078:	460b      	mov	r3, r1
 800407a:	4313      	orrs	r3, r2
 800407c:	d010      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800407e:	4b07      	ldr	r3, [pc, #28]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004080:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004084:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800408c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004090:	4a02      	ldr	r2, [pc, #8]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004092:	430b      	orrs	r3, r1
 8004094:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800409a:	bf00      	nop
 800409c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b0:	2300      	movs	r3, #0
 80040b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040b6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040ba:	460b      	mov	r3, r1
 80040bc:	4313      	orrs	r3, r2
 80040be:	d04c      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80040c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c8:	2b80      	cmp	r3, #128	@ 0x80
 80040ca:	d02d      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80040cc:	2b80      	cmp	r3, #128	@ 0x80
 80040ce:	d827      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040d0:	2b60      	cmp	r3, #96	@ 0x60
 80040d2:	d02b      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80040d4:	2b60      	cmp	r3, #96	@ 0x60
 80040d6:	d823      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	d006      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d81f      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d011      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80040e8:	e01a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80040ea:	4bc0      	ldr	r3, [pc, #768]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	4abf      	ldr	r2, [pc, #764]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040f6:	e01a      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040fc:	3308      	adds	r3, #8
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fd42 	bl	8004b88 <RCCEx_PLL2_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800410a:	e010      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800410c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004110:	332c      	adds	r3, #44	@ 0x2c
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fdd0 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800411e:	e006      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004126:	e002      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 800412c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10d      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004136:	4bad      	ldr	r3, [pc, #692]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004138:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800413c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004144:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004148:	4aa8      	ldr	r2, [pc, #672]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800414a:	430b      	orrs	r3, r1
 800414c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004150:	e003      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004152:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004156:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800415a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800416a:	2300      	movs	r3, #0
 800416c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004170:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004174:	460b      	mov	r3, r1
 8004176:	4313      	orrs	r3, r2
 8004178:	d053      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800417a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800417e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004186:	d033      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d82c      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800418e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004192:	d02f      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8004194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004198:	d826      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800419a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800419e:	d008      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a4:	d820      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ae:	d011      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041b0:	e01a      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041b2:	4b8e      	ldr	r3, [pc, #568]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	4a8d      	ldr	r2, [pc, #564]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041bc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80041be:	e01a      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041c4:	3308      	adds	r3, #8
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fcde 	bl	8004b88 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80041d2:	e010      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041d8:	332c      	adds	r3, #44	@ 0x2c
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fd6c 	bl	8004cb8 <RCCEx_PLL3_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10d      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80041fe:	4b7b      	ldr	r3, [pc, #492]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004200:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004204:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800420c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004210:	4a76      	ldr	r2, [pc, #472]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004212:	430b      	orrs	r3, r1
 8004214:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800421e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800422e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004232:	2300      	movs	r3, #0
 8004234:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004238:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d046      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800424a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800424e:	d028      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004250:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004254:	d821      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425a:	d022      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800425c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004260:	d81b      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004262:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004266:	d01c      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004268:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800426c:	d815      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004272:	d008      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004278:	d80f      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d011      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	d00e      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004284:	e009      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800428a:	3308      	adds	r3, #8
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fc7b 	bl	8004b88 <RCCEx_PLL2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004298:	e004      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80042a0:	e000      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 80042a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80042ac:	4b4f      	ldr	r3, [pc, #316]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042b2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80042b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042be:	4a4b      	ldr	r2, [pc, #300]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042c0:	430b      	orrs	r3, r1
 80042c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80042cc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042ea:	460b      	mov	r3, r1
 80042ec:	4313      	orrs	r3, r2
 80042ee:	d03f      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80042f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d81e      	bhi.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x622>
 80042fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004343 	.word	0x08004343
 8004308:	08004319 	.word	0x08004319
 800430c:	08004327 	.word	0x08004327
 8004310:	08004343 	.word	0x08004343
 8004314:	08004343 	.word	0x08004343
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004318:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	4a33      	ldr	r2, [pc, #204]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800431e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004322:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004324:	e00e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800432a:	332c      	adds	r3, #44	@ 0x2c
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fcc3 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004338:	e004      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 8004342:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004344:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800434e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004352:	f023 0107 	bic.w	r1, r3, #7
 8004356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435e:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004360:	430b      	orrs	r3, r1
 8004362:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004366:	e003      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800436c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800437c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800437e:	2300      	movs	r3, #0
 8004380:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004382:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d04c      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800438c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004390:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004394:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004398:	d02a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800439a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800439e:	d821      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80043a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043a4:	d026      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80043a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043aa:	d81b      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80043ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b0:	d00e      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80043b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043b6:	d815      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c0:	d110      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	4a09      	ldr	r2, [pc, #36]	@ (80043ec <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043cc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80043ce:	e014      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043d4:	332c      	adds	r3, #44	@ 0x2c
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc6e 	bl	8004cb8 <RCCEx_PLL3_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80043e2:	e00a      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80043ea:	e006      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80043ec:	46020c00 	.word	0x46020c00
        break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 80043f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80043fa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10d      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004402:	4baf      	ldr	r3, [pc, #700]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004408:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800440c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004414:	4aaa      	ldr	r2, [pc, #680]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004416:	430b      	orrs	r3, r1
 8004418:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004422:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004432:	673b      	str	r3, [r7, #112]	@ 0x70
 8004434:	2300      	movs	r3, #0
 8004436:	677b      	str	r3, [r7, #116]	@ 0x74
 8004438:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	f000 80b5 	beq.w	80045ae <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444a:	4b9d      	ldr	r3, [pc, #628]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d113      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004458:	4b99      	ldr	r3, [pc, #612]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800445a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445e:	4a98      	ldr	r2, [pc, #608]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004468:	4b95      	ldr	r3, [pc, #596]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800446a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004476:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004480:	4b90      	ldr	r3, [pc, #576]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	4a8f      	ldr	r2, [pc, #572]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800448c:	f7fc fa80 	bl	8000990 <HAL_GetTick>
 8004490:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004494:	e00b      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fc fa7b 	bl	8000990 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d903      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80044ac:	e005      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044ae:	4b85      	ldr	r3, [pc, #532]	@ (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80044b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ed      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 80044ba:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d165      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044c2:	4b7f      	ldr	r3, [pc, #508]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80044c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80044d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d023      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x808>
 80044d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044dc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80044e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01b      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e8:	4b75      	ldr	r3, [pc, #468]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80044ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b72      	ldr	r3, [pc, #456]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80044f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044fc:	4a70      	ldr	r2, [pc, #448]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80044fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004502:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004506:	4b6e      	ldr	r3, [pc, #440]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004508:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800450c:	4a6c      	ldr	r2, [pc, #432]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800450e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004512:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004516:	4a6a      	ldr	r2, [pc, #424]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800451c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004520:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d019      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc fa30 	bl	8000990 <HAL_GetTick>
 8004530:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004534:	e00d      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fc fa2b 	bl	8000990 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004540:	1ad2      	subs	r2, r2, r3
 8004542:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004546:	429a      	cmp	r2, r3
 8004548:	d903      	bls.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8004550:	e006      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004552:	4b5b      	ldr	r3, [pc, #364]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ea      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8004560:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004568:	4b55      	ldr	r3, [pc, #340]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800456a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800456e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004576:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800457a:	4a51      	ldr	r2, [pc, #324]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800457c:	430b      	orrs	r3, r1
 800457e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004582:	e008      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004584:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004588:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004592:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004596:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b48      	ldr	r3, [pc, #288]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80045a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a4:	4a46      	ldr	r2, [pc, #280]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80045a6:	f023 0304 	bic.w	r3, r3, #4
 80045aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80045ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045bc:	2300      	movs	r3, #0
 80045be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d042      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045d2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045d6:	d022      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x906>
 80045d8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80045dc:	d81b      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80045de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e2:	d011      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80045e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045e8:	d815      	bhi.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d019      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80045ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f2:	d110      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f8:	3308      	adds	r3, #8
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fac4 	bl	8004b88 <RCCEx_PLL2_Config>
 8004600:	4603      	mov	r3, r0
 8004602:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004606:	e00d      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004608:	4b2d      	ldr	r3, [pc, #180]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	4a2c      	ldr	r2, [pc, #176]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800460e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004612:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004614:	e006      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800461c:	e002      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8004622:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004624:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800462c:	4b24      	ldr	r3, [pc, #144]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800462e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004632:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800463a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800463e:	4a20      	ldr	r2, [pc, #128]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004640:	430b      	orrs	r3, r1
 8004642:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800464c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800465c:	663b      	str	r3, [r7, #96]	@ 0x60
 800465e:	2300      	movs	r3, #0
 8004660:	667b      	str	r3, [r7, #100]	@ 0x64
 8004662:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004666:	460b      	mov	r3, r1
 8004668:	4313      	orrs	r3, r2
 800466a:	d031      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800466c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004670:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004678:	d00b      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467e:	d804      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004688:	d007      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004690:	e004      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8004692:	bf00      	nop
 8004694:	e002      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800469a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800469c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d111      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80046a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046b6:	4a02      	ldr	r2, [pc, #8]	@ (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80046be:	e007      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 80046c0:	46020c00 	.word	0x46020c00
 80046c4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80046cc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80046dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046de:	2300      	movs	r3, #0
 80046e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d00c      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80046ec:	4bb2      	ldr	r3, [pc, #712]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046f2:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046fe:	4aae      	ldr	r2, [pc, #696]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004700:	430b      	orrs	r3, r1
 8004702:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004712:	653b      	str	r3, [r7, #80]	@ 0x50
 8004714:	2300      	movs	r3, #0
 8004716:	657b      	str	r3, [r7, #84]	@ 0x54
 8004718:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d019      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004726:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800472a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800472e:	d105      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004730:	4ba1      	ldr	r3, [pc, #644]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	4aa0      	ldr	r2, [pc, #640]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800473a:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800473c:	4b9e      	ldr	r3, [pc, #632]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800473e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004742:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800474a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800474e:	4a9a      	ldr	r2, [pc, #616]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004750:	430b      	orrs	r3, r1
 8004752:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004764:	2300      	movs	r3, #0
 8004766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004768:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800476c:	460b      	mov	r3, r1
 800476e:	4313      	orrs	r3, r2
 8004770:	d00c      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004772:	4b91      	ldr	r3, [pc, #580]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004778:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800477c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004780:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004784:	4a8c      	ldr	r2, [pc, #560]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004786:	430b      	orrs	r3, r1
 8004788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800478c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004798:	643b      	str	r3, [r7, #64]	@ 0x40
 800479a:	2300      	movs	r3, #0
 800479c:	647b      	str	r3, [r7, #68]	@ 0x44
 800479e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d00c      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80047a8:	4b83      	ldr	r3, [pc, #524]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80047b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80047ba:	4a7f      	ldr	r2, [pc, #508]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047bc:	430b      	orrs	r3, r1
 80047be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80047c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80047ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047d0:	2300      	movs	r3, #0
 80047d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047d4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d00c      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80047de:	4b76      	ldr	r3, [pc, #472]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047e4:	f023 0118 	bic.w	r1, r3, #24
 80047e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80047f0:	4a71      	ldr	r2, [pc, #452]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80047f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004804:	633b      	str	r3, [r7, #48]	@ 0x30
 8004806:	2300      	movs	r3, #0
 8004808:	637b      	str	r3, [r7, #52]	@ 0x34
 800480a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800480e:	460b      	mov	r3, r1
 8004810:	4313      	orrs	r3, r2
 8004812:	d032      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004818:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800481c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004820:	d105      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004822:	4b65      	ldr	r3, [pc, #404]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	4a64      	ldr	r2, [pc, #400]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800482c:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800482e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004836:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800483a:	d108      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004840:	3308      	adds	r3, #8
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f9a0 	bl	8004b88 <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 800484e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10d      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004856:	4b58      	ldr	r3, [pc, #352]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800485c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004864:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004868:	4a53      	ldr	r2, [pc, #332]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800486a:	430b      	orrs	r3, r1
 800486c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004870:	e003      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004872:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004876:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800487a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	2100      	movs	r1, #0
 8004884:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800488c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d04a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8004896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800489e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048a2:	d01e      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 80048a4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048a8:	d825      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80048aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048ae:	d00e      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 80048b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048b4:	d81f      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d021      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 80048ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048be:	d11a      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c0:	4b3d      	ldr	r3, [pc, #244]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	4a3c      	ldr	r2, [pc, #240]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80048cc:	e018      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d2:	3308      	adds	r3, #8
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f957 	bl	8004b88 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80048e0:	e00e      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e6:	332c      	adds	r3, #44	@ 0x2c
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 f9e5 	bl	8004cb8 <RCCEx_PLL3_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80048f4:	e004      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80048fc:	e000      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 80048fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004900:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10d      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8004908:	4b2b      	ldr	r3, [pc, #172]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800490a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800490e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004916:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800491a:	4927      	ldr	r1, [pc, #156]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004928:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	2300      	movs	r3, #0
 800493c:	627b      	str	r3, [r7, #36]	@ 0x24
 800493e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004942:	460b      	mov	r3, r1
 8004944:	4313      	orrs	r3, r2
 8004946:	d03d      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004948:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004950:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004954:	d00e      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800495a:	d815      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d017      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004964:	d110      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004966:	4b14      	ldr	r3, [pc, #80]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	4a13      	ldr	r2, [pc, #76]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800496c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004970:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004972:	e00e      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004978:	3308      	adds	r3, #8
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f904 	bl	8004b88 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004986:	e004      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004990:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004992:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004996:	2b00      	cmp	r3, #0
 8004998:	d110      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800499c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ac:	4902      	ldr	r1, [pc, #8]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80049b6:	bf00      	nop
 80049b8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049bc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80049c0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d00c      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80049e0:	4b68      	ldr	r3, [pc, #416]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80049e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80049ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80049f2:	4964      	ldr	r1, [pc, #400]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	2100      	movs	r1, #0
 8004a04:	6139      	str	r1, [r7, #16]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d036      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 8004a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8004a22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a26:	d113      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f8aa 	bl	8004b88 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8004a3a:	e00d      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a40:	332c      	adds	r3, #44	@ 0x2c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f938 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 8004a4e:	e003      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a58:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10d      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8004a60:	4b48      	ldr	r3, [pc, #288]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004a62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004a72:	4944      	ldr	r1, [pc, #272]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004a80:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	d024      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8004aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab0:	332c      	adds	r3, #44	@ 0x2c
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f900 	bl	8004cb8 <RCCEx_PLL3_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8004abe:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8004ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004acc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ad8:	492a      	ldr	r1, [pc, #168]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004ae0:	e003      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004ae6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8004aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	2100      	movs	r1, #0
 8004af4:	6039      	str	r1, [r7, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b00:	460b      	mov	r3, r1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	d036      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b0e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b12:	d00d      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8004b14:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004b18:	d811      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8004b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b1e:	d012      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8004b20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b24:	d80b      	bhi.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b30:	4b14      	ldr	r3, [pc, #80]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	4a13      	ldr	r2, [pc, #76]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b3a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8004b3c:	e004      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004b44:	e000      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8004b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b48:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004b52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004b56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b62:	4908      	ldr	r1, [pc, #32]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004b6a:	e003      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004b70:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004b74:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b84:	46020c00 	.word	0x46020c00

08004b88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004b90:	4b47      	ldr	r3, [pc, #284]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a46      	ldr	r2, [pc, #280]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004b96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b9a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b9c:	f7fb fef8 	bl	8000990 <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ba2:	e008      	b.n	8004bb6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ba4:	f7fb fef4 	bl	8000990 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e077      	b.n	8004ca6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6811      	ldr	r1, [r2, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6852      	ldr	r2, [r2, #4]
 8004bd6:	3a01      	subs	r2, #1
 8004bd8:	0212      	lsls	r2, r2, #8
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	4934      	ldr	r1, [pc, #208]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004be2:	4b33      	ldr	r3, [pc, #204]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be6:	4b33      	ldr	r3, [pc, #204]	@ (8004cb4 <RCCEx_PLL2_Config+0x12c>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6892      	ldr	r2, [r2, #8]
 8004bee:	3a01      	subs	r2, #1
 8004bf0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	68d2      	ldr	r2, [r2, #12]
 8004bf8:	3a01      	subs	r2, #1
 8004bfa:	0252      	lsls	r2, r2, #9
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	4311      	orrs	r1, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6912      	ldr	r2, [r2, #16]
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0412      	lsls	r2, r2, #16
 8004c08:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004c0c:	4311      	orrs	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6952      	ldr	r2, [r2, #20]
 8004c12:	3a01      	subs	r2, #1
 8004c14:	0612      	lsls	r2, r2, #24
 8004c16:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	4924      	ldr	r1, [pc, #144]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004c22:	4b23      	ldr	r3, [pc, #140]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	f023 020c 	bic.w	r2, r3, #12
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	4920      	ldr	r1, [pc, #128]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004c34:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	491c      	ldr	r1, [pc, #112]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004c42:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c48:	f023 0310 	bic.w	r3, r3, #16
 8004c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c4e:	4b18      	ldr	r3, [pc, #96]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	69d2      	ldr	r2, [r2, #28]
 8004c5e:	00d2      	lsls	r2, r2, #3
 8004c60:	4913      	ldr	r1, [pc, #76]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004c66:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6a:	4a11      	ldr	r2, [pc, #68]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c6c:	f043 0310 	orr.w	r3, r3, #16
 8004c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004c72:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c7e:	f7fb fe87 	bl	8000990 <HAL_GetTick>
 8004c82:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c84:	e008      	b.n	8004c98 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c86:	f7fb fe83 	bl	8000990 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e006      	b.n	8004ca6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c98:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <RCCEx_PLL2_Config+0x128>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0

}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	46020c00 	.word	0x46020c00
 8004cb4:	80800000 	.word	0x80800000

08004cb8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004cc0:	4b47      	ldr	r3, [pc, #284]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a46      	ldr	r2, [pc, #280]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ccc:	f7fb fe60 	bl	8000990 <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cd2:	e008      	b.n	8004ce6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cd4:	f7fb fe5c 	bl	8000990 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e077      	b.n	8004dd6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004cfa:	f023 0303 	bic.w	r3, r3, #3
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6811      	ldr	r1, [r2, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6852      	ldr	r2, [r2, #4]
 8004d06:	3a01      	subs	r2, #1
 8004d08:	0212      	lsls	r2, r2, #8
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	4934      	ldr	r1, [pc, #208]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	630b      	str	r3, [r1, #48]	@ 0x30
 8004d12:	4b33      	ldr	r3, [pc, #204]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d16:	4b33      	ldr	r3, [pc, #204]	@ (8004de4 <RCCEx_PLL3_Config+0x12c>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6892      	ldr	r2, [r2, #8]
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68d2      	ldr	r2, [r2, #12]
 8004d28:	3a01      	subs	r2, #1
 8004d2a:	0252      	lsls	r2, r2, #9
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	4311      	orrs	r1, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6912      	ldr	r2, [r2, #16]
 8004d34:	3a01      	subs	r2, #1
 8004d36:	0412      	lsls	r2, r2, #16
 8004d38:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004d3c:	4311      	orrs	r1, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6952      	ldr	r2, [r2, #20]
 8004d42:	3a01      	subs	r2, #1
 8004d44:	0612      	lsls	r2, r2, #24
 8004d46:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	4924      	ldr	r1, [pc, #144]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004d52:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	f023 020c 	bic.w	r2, r3, #12
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	4920      	ldr	r1, [pc, #128]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004d64:	4b1e      	ldr	r3, [pc, #120]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	491c      	ldr	r1, [pc, #112]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004d72:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	4a1a      	ldr	r2, [pc, #104]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d7e:	4b18      	ldr	r3, [pc, #96]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	69d2      	ldr	r2, [r2, #28]
 8004d8e:	00d2      	lsls	r2, r2, #3
 8004d90:	4913      	ldr	r1, [pc, #76]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004d96:	4b12      	ldr	r3, [pc, #72]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	4a11      	ldr	r2, [pc, #68]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004d9c:	f043 0310 	orr.w	r3, r3, #16
 8004da0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004da2:	4b0f      	ldr	r3, [pc, #60]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a0e      	ldr	r2, [pc, #56]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004dae:	f7fb fdef 	bl	8000990 <HAL_GetTick>
 8004db2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004db4:	e008      	b.n	8004dc8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004db6:	f7fb fdeb 	bl	8000990 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e006      	b.n	8004dd6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <RCCEx_PLL3_Config+0x128>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0f0      	beq.n	8004db6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	46020c00 	.word	0x46020c00
 8004de4:	80800000 	.word	0x80800000

08004de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e049      	b.n	8004e8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f841 	bl	8004e96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f000 fa58 	bl	80052dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d001      	beq.n	8004ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e072      	b.n	8004faa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	@ (8004fb8 <HAL_TIM_Base_Start_IT+0x10c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d040      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a34      	ldr	r2, [pc, #208]	@ (8004fbc <HAL_TIM_Base_Start_IT+0x110>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d03b      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef8:	d036      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f02:	d031      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc0 <HAL_TIM_Base_Start_IT+0x114>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d02c      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc4 <HAL_TIM_Base_Start_IT+0x118>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d027      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <HAL_TIM_Base_Start_IT+0x11c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d022      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a29      	ldr	r2, [pc, #164]	@ (8004fcc <HAL_TIM_Base_Start_IT+0x120>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d01d      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a27      	ldr	r2, [pc, #156]	@ (8004fd0 <HAL_TIM_Base_Start_IT+0x124>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d018      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a26      	ldr	r2, [pc, #152]	@ (8004fd4 <HAL_TIM_Base_Start_IT+0x128>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d013      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <HAL_TIM_Base_Start_IT+0x12c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00e      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a23      	ldr	r2, [pc, #140]	@ (8004fdc <HAL_TIM_Base_Start_IT+0x130>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a21      	ldr	r2, [pc, #132]	@ (8004fe0 <HAL_TIM_Base_Start_IT+0x134>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0xbc>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a20      	ldr	r2, [pc, #128]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0x138>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d115      	bne.n	8004f94 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0x13c>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d015      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0xfa>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f80:	d011      	beq.n	8004fa6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	e008      	b.n	8004fa6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e000      	b.n	8004fa8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	50012c00 	.word	0x50012c00
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	50000400 	.word	0x50000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	50000800 	.word	0x50000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	50000c00 	.word	0x50000c00
 8004fd8:	40013400 	.word	0x40013400
 8004fdc:	50013400 	.word	0x50013400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	50014000 	.word	0x50014000
 8004fe8:	00010007 	.word	0x00010007

08004fec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d020      	beq.n	8005050 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0202 	mvn.w	r2, #2
 8005020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f931 	bl	800529e <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f923 	bl	800528a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f934 	bl	80052b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d020      	beq.n	800509c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01b      	beq.n	800509c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0204 	mvn.w	r2, #4
 800506c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f90b 	bl	800529e <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f8fd 	bl	800528a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f90e 	bl	80052b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d020      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0208 	mvn.w	r2, #8
 80050b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2204      	movs	r2, #4
 80050be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8e5 	bl	800529e <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f8d7 	bl	800528a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8e8 	bl	80052b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d020      	beq.n	8005134 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01b      	beq.n	8005134 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0210 	mvn.w	r2, #16
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2208      	movs	r2, #8
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f8bf 	bl	800529e <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f8b1 	bl	800528a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f8c2 	bl	80052b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d007      	beq.n	8005158 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0201 	mvn.w	r2, #1
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fb fa00 	bl	8000558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00c      	beq.n	8005186 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f9b5 	bl	80054f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00c      	beq.n	80051aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f9ad 	bl	8005504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00c      	beq.n	80051ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f87c 	bl	80052c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00c      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f06f 0220 	mvn.w	r2, #32
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f975 	bl	80054dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00c      	beq.n	8005216 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d007      	beq.n	8005216 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800520e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f981 	bl	8005518 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f979 	bl	800552c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f971 	bl	8005540 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f969 	bl	8005554 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a6b      	ldr	r2, [pc, #428]	@ (800549c <TIM_Base_SetConfig+0x1c0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02b      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a6a      	ldr	r2, [pc, #424]	@ (80054a0 <TIM_Base_SetConfig+0x1c4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d027      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005302:	d023      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800530a:	d01f      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a65      	ldr	r2, [pc, #404]	@ (80054a4 <TIM_Base_SetConfig+0x1c8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d01b      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a64      	ldr	r2, [pc, #400]	@ (80054a8 <TIM_Base_SetConfig+0x1cc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d017      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a63      	ldr	r2, [pc, #396]	@ (80054ac <TIM_Base_SetConfig+0x1d0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a62      	ldr	r2, [pc, #392]	@ (80054b0 <TIM_Base_SetConfig+0x1d4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00f      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a61      	ldr	r2, [pc, #388]	@ (80054b4 <TIM_Base_SetConfig+0x1d8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00b      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a60      	ldr	r2, [pc, #384]	@ (80054b8 <TIM_Base_SetConfig+0x1dc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a5f      	ldr	r2, [pc, #380]	@ (80054bc <TIM_Base_SetConfig+0x1e0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_Base_SetConfig+0x70>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a5e      	ldr	r2, [pc, #376]	@ (80054c0 <TIM_Base_SetConfig+0x1e4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d108      	bne.n	800535e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4e      	ldr	r2, [pc, #312]	@ (800549c <TIM_Base_SetConfig+0x1c0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d043      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a4d      	ldr	r2, [pc, #308]	@ (80054a0 <TIM_Base_SetConfig+0x1c4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d03f      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d03b      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800537c:	d037      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a48      	ldr	r2, [pc, #288]	@ (80054a4 <TIM_Base_SetConfig+0x1c8>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d033      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a47      	ldr	r2, [pc, #284]	@ (80054a8 <TIM_Base_SetConfig+0x1cc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d02f      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a46      	ldr	r2, [pc, #280]	@ (80054ac <TIM_Base_SetConfig+0x1d0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d02b      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a45      	ldr	r2, [pc, #276]	@ (80054b0 <TIM_Base_SetConfig+0x1d4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d027      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a44      	ldr	r2, [pc, #272]	@ (80054b4 <TIM_Base_SetConfig+0x1d8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d023      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a43      	ldr	r2, [pc, #268]	@ (80054b8 <TIM_Base_SetConfig+0x1dc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01f      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a42      	ldr	r2, [pc, #264]	@ (80054bc <TIM_Base_SetConfig+0x1e0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01b      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a41      	ldr	r2, [pc, #260]	@ (80054c0 <TIM_Base_SetConfig+0x1e4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d017      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a40      	ldr	r2, [pc, #256]	@ (80054c4 <TIM_Base_SetConfig+0x1e8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d013      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a3f      	ldr	r2, [pc, #252]	@ (80054c8 <TIM_Base_SetConfig+0x1ec>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00f      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a3e      	ldr	r2, [pc, #248]	@ (80054cc <TIM_Base_SetConfig+0x1f0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00b      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a3d      	ldr	r2, [pc, #244]	@ (80054d0 <TIM_Base_SetConfig+0x1f4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a3c      	ldr	r2, [pc, #240]	@ (80054d4 <TIM_Base_SetConfig+0x1f8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_Base_SetConfig+0x112>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a3b      	ldr	r2, [pc, #236]	@ (80054d8 <TIM_Base_SetConfig+0x1fc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d108      	bne.n	8005400 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a1e      	ldr	r2, [pc, #120]	@ (800549c <TIM_Base_SetConfig+0x1c0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d023      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a1d      	ldr	r2, [pc, #116]	@ (80054a0 <TIM_Base_SetConfig+0x1c4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a22      	ldr	r2, [pc, #136]	@ (80054bc <TIM_Base_SetConfig+0x1e0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a21      	ldr	r2, [pc, #132]	@ (80054c0 <TIM_Base_SetConfig+0x1e4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <TIM_Base_SetConfig+0x1e8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <TIM_Base_SetConfig+0x1ec>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <TIM_Base_SetConfig+0x1f0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <TIM_Base_SetConfig+0x1f4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <TIM_Base_SetConfig+0x1f8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x192>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1b      	ldr	r2, [pc, #108]	@ (80054d8 <TIM_Base_SetConfig+0x1fc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d103      	bne.n	8005476 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f043 0204 	orr.w	r2, r3, #4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	bf00      	nop
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	50012c00 	.word	0x50012c00
 80054a4:	40000400 	.word	0x40000400
 80054a8:	50000400 	.word	0x50000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	50000800 	.word	0x50000800
 80054b4:	40000c00 	.word	0x40000c00
 80054b8:	50000c00 	.word	0x50000c00
 80054bc:	40013400 	.word	0x40013400
 80054c0:	50013400 	.word	0x50013400
 80054c4:	40014000 	.word	0x40014000
 80054c8:	50014000 	.word	0x50014000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	50014400 	.word	0x50014400
 80054d4:	40014800 	.word	0x40014800
 80054d8:	50014800 	.word	0x50014800

080054dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005568:	b084      	sub	sp, #16
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	f107 001c 	add.w	r0, r7, #28
 8005576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800557a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800557e:	2b03      	cmp	r3, #3
 8005580:	d105      	bne.n	800558e <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 fad8 	bl	8006b44 <USB_CoreReset>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8005598:	7fbb      	ldrb	r3, [r7, #30]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d10b      	bne.n	80055b6 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f043 0208 	orr.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c2:	b004      	add	sp, #16
 80055c4:	4770      	bx	lr
	...

080055c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	4613      	mov	r3, r2
 80055d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d165      	bne.n	80056a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a41      	ldr	r2, [pc, #260]	@ (80056e4 <USB_SetTurnaroundTime+0x11c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d906      	bls.n	80055f2 <USB_SetTurnaroundTime+0x2a>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4a40      	ldr	r2, [pc, #256]	@ (80056e8 <USB_SetTurnaroundTime+0x120>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d202      	bcs.n	80055f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055ec:	230f      	movs	r3, #15
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	e062      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4a3c      	ldr	r2, [pc, #240]	@ (80056e8 <USB_SetTurnaroundTime+0x120>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d306      	bcc.n	8005608 <USB_SetTurnaroundTime+0x40>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4a3b      	ldr	r2, [pc, #236]	@ (80056ec <USB_SetTurnaroundTime+0x124>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d202      	bcs.n	8005608 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005602:	230e      	movs	r3, #14
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	e057      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a38      	ldr	r2, [pc, #224]	@ (80056ec <USB_SetTurnaroundTime+0x124>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d306      	bcc.n	800561e <USB_SetTurnaroundTime+0x56>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4a37      	ldr	r2, [pc, #220]	@ (80056f0 <USB_SetTurnaroundTime+0x128>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d202      	bcs.n	800561e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005618:	230d      	movs	r3, #13
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e04c      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a33      	ldr	r2, [pc, #204]	@ (80056f0 <USB_SetTurnaroundTime+0x128>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d306      	bcc.n	8005634 <USB_SetTurnaroundTime+0x6c>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4a32      	ldr	r2, [pc, #200]	@ (80056f4 <USB_SetTurnaroundTime+0x12c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d802      	bhi.n	8005634 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800562e:	230c      	movs	r3, #12
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	e041      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a2f      	ldr	r2, [pc, #188]	@ (80056f4 <USB_SetTurnaroundTime+0x12c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d906      	bls.n	800564a <USB_SetTurnaroundTime+0x82>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4a2e      	ldr	r2, [pc, #184]	@ (80056f8 <USB_SetTurnaroundTime+0x130>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d802      	bhi.n	800564a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005644:	230b      	movs	r3, #11
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e036      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a2a      	ldr	r2, [pc, #168]	@ (80056f8 <USB_SetTurnaroundTime+0x130>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d906      	bls.n	8005660 <USB_SetTurnaroundTime+0x98>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4a29      	ldr	r2, [pc, #164]	@ (80056fc <USB_SetTurnaroundTime+0x134>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d802      	bhi.n	8005660 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800565a:	230a      	movs	r3, #10
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	e02b      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a26      	ldr	r2, [pc, #152]	@ (80056fc <USB_SetTurnaroundTime+0x134>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d906      	bls.n	8005676 <USB_SetTurnaroundTime+0xae>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4a25      	ldr	r2, [pc, #148]	@ (8005700 <USB_SetTurnaroundTime+0x138>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d202      	bcs.n	8005676 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005670:	2309      	movs	r3, #9
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	e020      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a21      	ldr	r2, [pc, #132]	@ (8005700 <USB_SetTurnaroundTime+0x138>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d306      	bcc.n	800568c <USB_SetTurnaroundTime+0xc4>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4a20      	ldr	r2, [pc, #128]	@ (8005704 <USB_SetTurnaroundTime+0x13c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d802      	bhi.n	800568c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005686:	2308      	movs	r3, #8
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e015      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a1d      	ldr	r2, [pc, #116]	@ (8005704 <USB_SetTurnaroundTime+0x13c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d906      	bls.n	80056a2 <USB_SetTurnaroundTime+0xda>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4a1c      	ldr	r2, [pc, #112]	@ (8005708 <USB_SetTurnaroundTime+0x140>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d202      	bcs.n	80056a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800569c:	2307      	movs	r3, #7
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e00a      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80056a2:	2306      	movs	r3, #6
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e007      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056ae:	2309      	movs	r3, #9
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e001      	b.n	80056b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056b4:	2309      	movs	r3, #9
 80056b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	00d8acbf 	.word	0x00d8acbf
 80056e8:	00e4e1c0 	.word	0x00e4e1c0
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	01067380 	.word	0x01067380
 80056f4:	011a499f 	.word	0x011a499f
 80056f8:	01312cff 	.word	0x01312cff
 80056fc:	014ca43f 	.word	0x014ca43f
 8005700:	016e3600 	.word	0x016e3600
 8005704:	01a6ab1f 	.word	0x01a6ab1f
 8005708:	01e84800 	.word	0x01e84800

0800570c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f043 0201 	orr.w	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f023 0201 	bic.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800576c:	78fb      	ldrb	r3, [r7, #3]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d115      	bne.n	800579e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800577e:	200a      	movs	r0, #10
 8005780:	f7fb f912 	bl	80009a8 <HAL_Delay>
      ms += 10U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	330a      	adds	r3, #10
 8005788:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 f94b 	bl	8006a26 <USB_GetMode>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	d01e      	beq.n	80057d4 <USB_SetCurrentMode+0x84>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2bc7      	cmp	r3, #199	@ 0xc7
 800579a:	d9f0      	bls.n	800577e <USB_SetCurrentMode+0x2e>
 800579c:	e01a      	b.n	80057d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d115      	bne.n	80057d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057b0:	200a      	movs	r0, #10
 80057b2:	f7fb f8f9 	bl	80009a8 <HAL_Delay>
      ms += 10U;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	330a      	adds	r3, #10
 80057ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f932 	bl	8006a26 <USB_GetMode>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <USB_SetCurrentMode+0x84>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80057cc:	d9f0      	bls.n	80057b0 <USB_SetCurrentMode+0x60>
 80057ce:	e001      	b.n	80057d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e005      	b.n	80057e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80057d8:	d101      	bne.n	80057de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057e8:	b084      	sub	sp, #16
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005802:	2300      	movs	r3, #0
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e009      	b.n	800581c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3340      	adds	r3, #64	@ 0x40
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	2200      	movs	r2, #0
 8005814:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	3301      	adds	r3, #1
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b0e      	cmp	r3, #14
 8005820:	d9f2      	bls.n	8005808 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800582e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005832:	2b00      	cmp	r3, #0
 8005834:	d11c      	bne.n	8005870 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005866:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38
 800586e:	e011      	b.n	8005894 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005874:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800589a:	461a      	mov	r2, r3
 800589c:	2300      	movs	r3, #0
 800589e:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80058a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d10d      	bne.n	80058c4 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f968 	bl	8005b88 <USB_SetDevSpeed>
 80058b8:	e008      	b.n	80058cc <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058ba:	2101      	movs	r1, #1
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f963 	bl	8005b88 <USB_SetDevSpeed>
 80058c2:	e003      	b.n	80058cc <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058c4:	2103      	movs	r1, #3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f95e 	bl	8005b88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058cc:	2110      	movs	r1, #16
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8fa 	bl	8005ac8 <USB_FlushTxFifo>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f924 	bl	8005b2c <USB_FlushRxFifo>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	461a      	mov	r2, r3
 80058f6:	2300      	movs	r3, #0
 80058f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005900:	461a      	mov	r2, r3
 8005902:	2300      	movs	r3, #0
 8005904:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005912:	2300      	movs	r3, #0
 8005914:	613b      	str	r3, [r7, #16]
 8005916:	e043      	b.n	80059a0 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800592a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800592e:	d118      	bne.n	8005962 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005942:	461a      	mov	r2, r3
 8005944:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e013      	b.n	8005974 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005958:	461a      	mov	r2, r3
 800595a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e008      	b.n	8005974 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596e:	461a      	mov	r2, r3
 8005970:	2300      	movs	r3, #0
 8005972:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005980:	461a      	mov	r2, r3
 8005982:	2300      	movs	r3, #0
 8005984:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005992:	461a      	mov	r2, r3
 8005994:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005998:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	3301      	adds	r3, #1
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059a4:	461a      	mov	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d3b5      	bcc.n	8005918 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	e043      	b.n	8005a3a <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059c8:	d118      	bne.n	80059fc <USB_DevInit+0x214>
    {
      if (i == 0U)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059dc:	461a      	mov	r2, r3
 80059de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e013      	b.n	8005a0e <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f2:	461a      	mov	r2, r3
 80059f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e008      	b.n	8005a0e <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3301      	adds	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a3e:	461a      	mov	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d3b5      	bcc.n	80059b2 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d105      	bne.n	8005a7c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	f043 0210 	orr.w	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	4b10      	ldr	r3, [pc, #64]	@ (8005ac4 <USB_DevInit+0x2dc>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f043 0208 	orr.w	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d107      	bne.n	8005ab4 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aac:	f043 0304 	orr.w	r3, r3, #4
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ac0:	b004      	add	sp, #16
 8005ac2:	4770      	bx	lr
 8005ac4:	803c3800 	.word	0x803c3800

08005ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ae2:	d901      	bls.n	8005ae8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e01b      	b.n	8005b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	daf2      	bge.n	8005ad6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	019b      	lsls	r3, r3, #6
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b0c:	d901      	bls.n	8005b12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e006      	b.n	8005b20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d0f0      	beq.n	8005b00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b44:	d901      	bls.n	8005b4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e018      	b.n	8005b7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	daf2      	bge.n	8005b38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2210      	movs	r2, #16
 8005b5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b68:	d901      	bls.n	8005b6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b10      	cmp	r3, #16
 8005b78:	d0f0      	beq.n	8005b5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b087      	sub	sp, #28
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0306 	and.w	r3, r3, #6
 8005bd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75fb      	strb	r3, [r7, #23]
 8005bde:	e00a      	b.n	8005bf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d002      	beq.n	8005bec <USB_GetDevSpeed+0x32>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b06      	cmp	r3, #6
 8005bea:	d102      	bne.n	8005bf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bec:	2302      	movs	r3, #2
 8005bee:	75fb      	strb	r3, [r7, #23]
 8005bf0:	e001      	b.n	8005bf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bf2:	230f      	movs	r3, #15
 8005bf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d13a      	bne.n	8005c96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	2101      	movs	r1, #1
 8005c32:	fa01 f303 	lsl.w	r3, r1, r3
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	68f9      	ldr	r1, [r7, #12]
 8005c3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d155      	bne.n	8005d04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	791b      	ldrb	r3, [r3, #4]
 8005c72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	059b      	lsls	r3, r3, #22
 8005c7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e036      	b.n	8005d04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	041b      	lsls	r3, r3, #16
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d11a      	bne.n	8005d04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	791b      	ldrb	r3, [r3, #4]
 8005ce8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cea:	430b      	orrs	r3, r1
 8005cec:	4313      	orrs	r3, r2
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d161      	bne.n	8005df4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d46:	d11f      	bne.n	8005d88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	2101      	movs	r1, #1
 8005d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	43db      	mvns	r3, r3
 8005da2:	68f9      	ldr	r1, [r7, #12]
 8005da4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005da8:	4013      	ands	r3, r2
 8005daa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	68f9      	ldr	r1, [r7, #12]
 8005dc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dcc:	4013      	ands	r3, r2
 8005dce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	0159      	lsls	r1, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	440b      	add	r3, r1
 8005de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dea:	4619      	mov	r1, r3
 8005dec:	4b35      	ldr	r3, [pc, #212]	@ (8005ec4 <USB_DeactivateEndpoint+0x1b0>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]
 8005df2:	e060      	b.n	8005eb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e0a:	d11f      	bne.n	8005e4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	43db      	mvns	r3, r3
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	2101      	movs	r1, #1
 8005e82:	fa01 f303 	lsl.w	r3, r1, r3
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e90:	4013      	ands	r3, r2
 8005e92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	0159      	lsls	r1, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <USB_DeactivateEndpoint+0x1b4>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	ec337800 	.word	0xec337800
 8005ec8:	eff37800 	.word	0xeff37800

08005ecc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f040 817f 	bne.w	80061ec <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d132      	bne.n	8005f5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	0151      	lsls	r1, r2, #5
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	440a      	add	r2, r1
 8005f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	0151      	lsls	r1, r2, #5
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	440a      	add	r2, r1
 8005f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f54:	0cdb      	lsrs	r3, r3, #19
 8005f56:	04db      	lsls	r3, r3, #19
 8005f58:	6113      	str	r3, [r2, #16]
 8005f5a:	e097      	b.n	800608c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f76:	0cdb      	lsrs	r3, r3, #19
 8005f78:	04db      	lsls	r3, r3, #19
 8005f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11a      	bne.n	8005fdc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d903      	bls.n	8005fba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fd8:	6113      	str	r3, [r2, #16]
 8005fda:	e044      	b.n	8006066 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	8afb      	ldrh	r3, [r7, #22]
 8006002:	04d9      	lsls	r1, r3, #19
 8006004:	4ba4      	ldr	r3, [pc, #656]	@ (8006298 <USB_EPStartXfer+0x3cc>)
 8006006:	400b      	ands	r3, r1
 8006008:	69b9      	ldr	r1, [r7, #24]
 800600a:	0148      	lsls	r0, r1, #5
 800600c:	69f9      	ldr	r1, [r7, #28]
 800600e:	4401      	add	r1, r0
 8006010:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006014:	4313      	orrs	r3, r2
 8006016:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	791b      	ldrb	r3, [r3, #4]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d122      	bne.n	8006066 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800603a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800603e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	8afb      	ldrh	r3, [r7, #22]
 8006050:	075b      	lsls	r3, r3, #29
 8006052:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006056:	69b9      	ldr	r1, [r7, #24]
 8006058:	0148      	lsls	r0, r1, #5
 800605a:	69f9      	ldr	r1, [r7, #28]
 800605c:	4401      	add	r1, r0
 800605e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006062:	4313      	orrs	r3, r2
 8006064:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	0148      	lsls	r0, r1, #5
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	4401      	add	r1, r0
 8006084:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006088:	4313      	orrs	r3, r2
 800608a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d14b      	bne.n	800612a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a6:	461a      	mov	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	791b      	ldrb	r3, [r3, #4]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d128      	bne.n	8006108 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d110      	bne.n	80060e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	e00f      	b.n	8006108 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006106:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006122:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e166      	b.n	80063f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	440a      	add	r2, r1
 8006140:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006144:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006148:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	791b      	ldrb	r3, [r3, #4]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d015      	beq.n	800617e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 814e 	beq.w	80063f8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	2101      	movs	r1, #1
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	69f9      	ldr	r1, [r7, #28]
 8006174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006178:	4313      	orrs	r3, r2
 800617a:	634b      	str	r3, [r1, #52]	@ 0x34
 800617c:	e13c      	b.n	80063f8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d110      	bne.n	80061b0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e00f      	b.n	80061d0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	68d9      	ldr	r1, [r3, #12]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	781a      	ldrb	r2, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	b298      	uxth	r0, r3
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	9300      	str	r3, [sp, #0]
 80061e2:	4603      	mov	r3, r0
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f9b9 	bl	800655c <USB_WritePacket>
 80061ea:	e105      	b.n	80063f8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	0151      	lsls	r1, r2, #5
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	440a      	add	r2, r1
 8006202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006206:	0cdb      	lsrs	r3, r3, #19
 8006208:	04db      	lsls	r3, r3, #19
 800620a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006226:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800622a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800622e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d132      	bne.n	800629c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	689a      	ldr	r2, [r3, #8]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006264:	69b9      	ldr	r1, [r7, #24]
 8006266:	0148      	lsls	r0, r1, #5
 8006268:	69f9      	ldr	r1, [r7, #28]
 800626a:	4401      	add	r1, r0
 800626c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006270:	4313      	orrs	r3, r2
 8006272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800628e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006292:	6113      	str	r3, [r2, #16]
 8006294:	e062      	b.n	800635c <USB_EPStartXfer+0x490>
 8006296:	bf00      	nop
 8006298:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d123      	bne.n	80062ec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ba:	69b9      	ldr	r1, [r7, #24]
 80062bc:	0148      	lsls	r0, r1, #5
 80062be:	69f9      	ldr	r1, [r7, #28]
 80062c0:	4401      	add	r1, r0
 80062c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062c6:	4313      	orrs	r3, r2
 80062c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062e8:	6113      	str	r3, [r2, #16]
 80062ea:	e037      	b.n	800635c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	4413      	add	r3, r2
 80062f6:	1e5a      	subs	r2, r3, #1
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006300:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	8afa      	ldrh	r2, [r7, #22]
 8006308:	fb03 f202 	mul.w	r2, r3, r2
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	8afb      	ldrh	r3, [r7, #22]
 8006320:	04d9      	lsls	r1, r3, #19
 8006322:	4b38      	ldr	r3, [pc, #224]	@ (8006404 <USB_EPStartXfer+0x538>)
 8006324:	400b      	ands	r3, r1
 8006326:	69b9      	ldr	r1, [r7, #24]
 8006328:	0148      	lsls	r0, r1, #5
 800632a:	69f9      	ldr	r1, [r7, #28]
 800632c:	4401      	add	r1, r0
 800632e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006332:	4313      	orrs	r3, r2
 8006334:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634c:	69b9      	ldr	r1, [r7, #24]
 800634e:	0148      	lsls	r0, r1, #5
 8006350:	69f9      	ldr	r1, [r7, #28]
 8006352:	4401      	add	r1, r0
 8006354:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006358:	4313      	orrs	r3, r2
 800635a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10d      	bne.n	800637e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68d9      	ldr	r1, [r3, #12]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	460a      	mov	r2, r1
 800637c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	791b      	ldrb	r3, [r3, #4]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d128      	bne.n	80063d8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e00f      	b.n	80063d8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3720      	adds	r7, #32
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	1ff80000 	.word	0x1ff80000

08006408 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d14a      	bne.n	80064bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800643a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800643e:	f040 8086 	bne.w	800654e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006460:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006464:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7812      	ldrb	r2, [r2, #0]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006484:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006488:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006496:	4293      	cmp	r3, r2
 8006498:	d902      	bls.n	80064a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
          break;
 800649e:	e056      	b.n	800654e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b8:	d0e7      	beq.n	800648a <USB_EPStopXfer+0x82>
 80064ba:	e048      	b.n	800654e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064d4:	d13b      	bne.n	800654e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80064f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	7812      	ldrb	r2, [r2, #0]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	440a      	add	r2, r1
 8006514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006518:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800651c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f242 7210 	movw	r2, #10000	@ 0x2710
 800652a:	4293      	cmp	r3, r2
 800652c:	d902      	bls.n	8006534 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	75fb      	strb	r3, [r7, #23]
          break;
 8006532:	e00c      	b.n	800654e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800654c:	d0e7      	beq.n	800651e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006550:	4618      	mov	r0, r3
 8006552:	371c      	adds	r7, #28
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800655c:	b480      	push	{r7}
 800655e:	b089      	sub	sp, #36	@ 0x24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4611      	mov	r1, r2
 8006568:	461a      	mov	r2, r3
 800656a:	460b      	mov	r3, r1
 800656c:	71fb      	strb	r3, [r7, #7]
 800656e:	4613      	mov	r3, r2
 8006570:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800657a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800657e:	2b00      	cmp	r3, #0
 8006580:	d123      	bne.n	80065ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006582:	88bb      	ldrh	r3, [r7, #4]
 8006584:	3303      	adds	r3, #3
 8006586:	089b      	lsrs	r3, r3, #2
 8006588:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e018      	b.n	80065c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	031a      	lsls	r2, r3, #12
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	4413      	add	r3, r2
 8006598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800659c:	461a      	mov	r2, r3
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	3301      	adds	r3, #1
 80065a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	3301      	adds	r3, #1
 80065ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3301      	adds	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	3301      	adds	r3, #1
 80065ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	3301      	adds	r3, #1
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3e2      	bcc.n	8006590 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3724      	adds	r7, #36	@ 0x24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065d8:	b480      	push	{r7}
 80065da:	b08b      	sub	sp, #44	@ 0x2c
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	089b      	lsrs	r3, r3, #2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80065fe:	2300      	movs	r3, #0
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	e014      	b.n	800662e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	3301      	adds	r3, #1
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	3301      	adds	r3, #1
 800661a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	3301      	adds	r3, #1
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	3301      	adds	r3, #1
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	3301      	adds	r3, #1
 800662c:	623b      	str	r3, [r7, #32]
 800662e:	6a3a      	ldr	r2, [r7, #32]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	429a      	cmp	r2, r3
 8006634:	d3e6      	bcc.n	8006604 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006636:	8bfb      	ldrh	r3, [r7, #30]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01e      	beq.n	800667a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800663c:	2300      	movs	r3, #0
 800663e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006646:	461a      	mov	r2, r3
 8006648:	f107 0310 	add.w	r3, r7, #16
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	701a      	strb	r2, [r3, #0]
      i++;
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	3301      	adds	r3, #1
 8006666:	623b      	str	r3, [r7, #32]
      pDest++;
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	3301      	adds	r3, #1
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800666e:	8bfb      	ldrh	r3, [r7, #30]
 8006670:	3b01      	subs	r3, #1
 8006672:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006674:	8bfb      	ldrh	r3, [r7, #30]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1ea      	bne.n	8006650 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800667c:	4618      	mov	r0, r3
 800667e:	372c      	adds	r7, #44	@ 0x2c
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d12c      	bne.n	80066fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	db12      	blt.n	80066dc <USB_EPSetStall+0x54>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00f      	beq.n	80066dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	e02b      	b.n	8006756 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	db12      	blt.n	8006736 <USB_EPSetStall+0xae>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00f      	beq.n	8006736 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006730:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006734:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d128      	bne.n	80067d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800679a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800679e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	791b      	ldrb	r3, [r3, #4]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d003      	beq.n	80067b0 <USB_EPClearStall+0x4c>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	791b      	ldrb	r3, [r3, #4]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d138      	bne.n	8006822 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	e027      	b.n	8006822 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	791b      	ldrb	r3, [r3, #4]
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d003      	beq.n	8006802 <USB_EPClearStall+0x9e>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d10f      	bne.n	8006822 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	440a      	add	r2, r1
 8006818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800681c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006820:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800684e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006852:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068aa:	f023 0302 	bic.w	r3, r3, #2
 80068ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068d8:	f023 0303 	bic.w	r3, r3, #3
 80068dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ec:	f043 0302 	orr.w	r3, r3, #2
 80068f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4013      	ands	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006918:	68fb      	ldr	r3, [r7, #12]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	4013      	ands	r3, r2
 8006948:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	0c1b      	lsrs	r3, r3, #16
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	4013      	ands	r3, r2
 800697c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	b29b      	uxth	r3, r3
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4013      	ands	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069bc:	68bb      	ldr	r3, [r7, #8]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b087      	sub	sp, #28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	fa22 f303 	lsr.w	r3, r2, r3
 80069fa:	01db      	lsls	r3, r3, #7
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4013      	ands	r3, r2
 8006a16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a18:	68bb      	ldr	r3, [r7, #8]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0301 	and.w	r3, r3, #1
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a5c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a60:	f023 0307 	bic.w	r3, r3, #7
 8006a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	460b      	mov	r3, r1
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	333c      	adds	r3, #60	@ 0x3c
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4a26      	ldr	r2, [pc, #152]	@ (8006b40 <USB_EP0_OutStart+0xb8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d90a      	bls.n	8006ac2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006abc:	d101      	bne.n	8006ac2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e037      	b.n	8006b32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac8:	461a      	mov	r2, r3
 8006aca:	2300      	movs	r3, #0
 8006acc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006adc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af0:	f043 0318 	orr.w	r3, r3, #24
 8006af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006b08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d10f      	bne.n	8006b30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b16:	461a      	mov	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b2a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	4f54300a 	.word	0x4f54300a

08006b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b5c:	d901      	bls.n	8006b62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e01b      	b.n	8006b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	daf2      	bge.n	8006b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f043 0201 	orr.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b86:	d901      	bls.n	8006b8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e006      	b.n	8006b9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d0f0      	beq.n	8006b7a <USB_CoreReset+0x36>

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bb4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006bb8:	f002 fc7c 	bl	80094b4 <USBD_static_malloc>
 8006bbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	32b0      	adds	r2, #176	@ 0xb0
 8006bce:	2100      	movs	r1, #0
 8006bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e0d4      	b.n	8006d82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006bd8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006bdc:	2100      	movs	r1, #0
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f002 fcac 	bl	800953c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	32b0      	adds	r2, #176	@ 0xb0
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	32b0      	adds	r2, #176	@ 0xb0
 8006bfe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7c1b      	ldrb	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d138      	bne.n	8006c82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c10:	4b5e      	ldr	r3, [pc, #376]	@ (8006d8c <USBD_CDC_Init+0x1e4>)
 8006c12:	7819      	ldrb	r1, [r3, #0]
 8006c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c18:	2202      	movs	r2, #2
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f002 fb27 	bl	800926e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c20:	4b5a      	ldr	r3, [pc, #360]	@ (8006d8c <USBD_CDC_Init+0x1e4>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	3324      	adds	r3, #36	@ 0x24
 8006c36:	2201      	movs	r2, #1
 8006c38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c3a:	4b55      	ldr	r3, [pc, #340]	@ (8006d90 <USBD_CDC_Init+0x1e8>)
 8006c3c:	7819      	ldrb	r1, [r3, #0]
 8006c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c42:	2202      	movs	r2, #2
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 fb12 	bl	800926e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c4a:	4b51      	ldr	r3, [pc, #324]	@ (8006d90 <USBD_CDC_Init+0x1e8>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f003 020f 	and.w	r2, r3, #15
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c62:	2201      	movs	r2, #1
 8006c64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c66:	4b4b      	ldr	r3, [pc, #300]	@ (8006d94 <USBD_CDC_Init+0x1ec>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	f003 020f 	and.w	r2, r3, #15
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	3326      	adds	r3, #38	@ 0x26
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	801a      	strh	r2, [r3, #0]
 8006c80:	e035      	b.n	8006cee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c82:	4b42      	ldr	r3, [pc, #264]	@ (8006d8c <USBD_CDC_Init+0x1e4>)
 8006c84:	7819      	ldrb	r1, [r3, #0]
 8006c86:	2340      	movs	r3, #64	@ 0x40
 8006c88:	2202      	movs	r2, #2
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f002 faef 	bl	800926e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c90:	4b3e      	ldr	r3, [pc, #248]	@ (8006d8c <USBD_CDC_Init+0x1e4>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 020f 	and.w	r2, r3, #15
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	3324      	adds	r3, #36	@ 0x24
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006caa:	4b39      	ldr	r3, [pc, #228]	@ (8006d90 <USBD_CDC_Init+0x1e8>)
 8006cac:	7819      	ldrb	r1, [r3, #0]
 8006cae:	2340      	movs	r3, #64	@ 0x40
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f002 fadb 	bl	800926e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006cb8:	4b35      	ldr	r3, [pc, #212]	@ (8006d90 <USBD_CDC_Init+0x1e8>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8006d94 <USBD_CDC_Init+0x1ec>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	f003 020f 	and.w	r2, r3, #15
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3326      	adds	r3, #38	@ 0x26
 8006cea:	2210      	movs	r2, #16
 8006cec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cee:	4b29      	ldr	r3, [pc, #164]	@ (8006d94 <USBD_CDC_Init+0x1ec>)
 8006cf0:	7819      	ldrb	r1, [r3, #0]
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f002 fab9 	bl	800926e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006cfc:	4b25      	ldr	r3, [pc, #148]	@ (8006d94 <USBD_CDC_Init+0x1ec>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	f003 020f 	and.w	r2, r3, #15
 8006d04:	6879      	ldr	r1, [r7, #4]
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	440b      	add	r3, r1
 8006d10:	3324      	adds	r3, #36	@ 0x24
 8006d12:	2201      	movs	r2, #1
 8006d14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	33b0      	adds	r3, #176	@ 0xb0
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e018      	b.n	8006d82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7c1b      	ldrb	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d58:	4b0d      	ldr	r3, [pc, #52]	@ (8006d90 <USBD_CDC_Init+0x1e8>)
 8006d5a:	7819      	ldrb	r1, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f002 fb70 	bl	800944c <USBD_LL_PrepareReceive>
 8006d6c:	e008      	b.n	8006d80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d6e:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <USBD_CDC_Init+0x1e8>)
 8006d70:	7819      	ldrb	r1, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d78:	2340      	movs	r3, #64	@ 0x40
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f002 fb66 	bl	800944c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000093 	.word	0x20000093
 8006d90:	20000094 	.word	0x20000094
 8006d94:	20000095 	.word	0x20000095

08006d98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006da4:	4b3a      	ldr	r3, [pc, #232]	@ (8006e90 <USBD_CDC_DeInit+0xf8>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f002 fa85 	bl	80092ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006db0:	4b37      	ldr	r3, [pc, #220]	@ (8006e90 <USBD_CDC_DeInit+0xf8>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f003 020f 	and.w	r2, r3, #15
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3324      	adds	r3, #36	@ 0x24
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006dca:	4b32      	ldr	r3, [pc, #200]	@ (8006e94 <USBD_CDC_DeInit+0xfc>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f002 fa72 	bl	80092ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8006e94 <USBD_CDC_DeInit+0xfc>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 020f 	and.w	r2, r3, #15
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	440b      	add	r3, r1
 8006dea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006dee:	2200      	movs	r2, #0
 8006df0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006df2:	4b29      	ldr	r3, [pc, #164]	@ (8006e98 <USBD_CDC_DeInit+0x100>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f002 fa5e 	bl	80092ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006dfe:	4b26      	ldr	r3, [pc, #152]	@ (8006e98 <USBD_CDC_DeInit+0x100>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	3324      	adds	r3, #36	@ 0x24
 8006e14:	2200      	movs	r2, #0
 8006e16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006e18:	4b1f      	ldr	r3, [pc, #124]	@ (8006e98 <USBD_CDC_DeInit+0x100>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 020f 	and.w	r2, r3, #15
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	3326      	adds	r3, #38	@ 0x26
 8006e2e:	2200      	movs	r2, #0
 8006e30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	32b0      	adds	r2, #176	@ 0xb0
 8006e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01f      	beq.n	8006e84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	33b0      	adds	r3, #176	@ 0xb0
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	32b0      	adds	r2, #176	@ 0xb0
 8006e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f002 fb32 	bl	80094d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	32b0      	adds	r2, #176	@ 0xb0
 8006e76:	2100      	movs	r1, #0
 8006e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000093 	.word	0x20000093
 8006e94:	20000094 	.word	0x20000094
 8006e98:	20000095 	.word	0x20000095

08006e9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	32b0      	adds	r2, #176	@ 0xb0
 8006eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e0bf      	b.n	800704c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d050      	beq.n	8006f7a <USBD_CDC_Setup+0xde>
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	f040 80af 	bne.w	800703c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	88db      	ldrh	r3, [r3, #6]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d03a      	beq.n	8006f5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	b25b      	sxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	da1b      	bge.n	8006f28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	33b0      	adds	r3, #176	@ 0xb0
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006f06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	88d2      	ldrh	r2, [r2, #6]
 8006f0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	88db      	ldrh	r3, [r3, #6]
 8006f12:	2b07      	cmp	r3, #7
 8006f14:	bf28      	it	cs
 8006f16:	2307      	movcs	r3, #7
 8006f18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	89fa      	ldrh	r2, [r7, #14]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fdbd 	bl	8008aa0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006f26:	e090      	b.n	800704a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	785a      	ldrb	r2, [r3, #1]
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	88db      	ldrh	r3, [r3, #6]
 8006f36:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f38:	d803      	bhi.n	8006f42 <USBD_CDC_Setup+0xa6>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	88db      	ldrh	r3, [r3, #6]
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	e000      	b.n	8006f44 <USBD_CDC_Setup+0xa8>
 8006f42:	2240      	movs	r2, #64	@ 0x40
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006f4a:	6939      	ldr	r1, [r7, #16]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006f52:	461a      	mov	r2, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fdcf 	bl	8008af8 <USBD_CtlPrepareRx>
      break;
 8006f5a:	e076      	b.n	800704a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	33b0      	adds	r3, #176	@ 0xb0
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	7850      	ldrb	r0, [r2, #1]
 8006f72:	2200      	movs	r2, #0
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	4798      	blx	r3
      break;
 8006f78:	e067      	b.n	800704a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	2b0b      	cmp	r3, #11
 8006f80:	d851      	bhi.n	8007026 <USBD_CDC_Setup+0x18a>
 8006f82:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <USBD_CDC_Setup+0xec>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006fb9 	.word	0x08006fb9
 8006f8c:	08007035 	.word	0x08007035
 8006f90:	08007027 	.word	0x08007027
 8006f94:	08007027 	.word	0x08007027
 8006f98:	08007027 	.word	0x08007027
 8006f9c:	08007027 	.word	0x08007027
 8006fa0:	08007027 	.word	0x08007027
 8006fa4:	08007027 	.word	0x08007027
 8006fa8:	08007027 	.word	0x08007027
 8006fac:	08007027 	.word	0x08007027
 8006fb0:	08006fe3 	.word	0x08006fe3
 8006fb4:	0800700d 	.word	0x0800700d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d107      	bne.n	8006fd4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fc4:	f107 030a 	add.w	r3, r7, #10
 8006fc8:	2202      	movs	r2, #2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 fd67 	bl	8008aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd2:	e032      	b.n	800703a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fce5 	bl	80089a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe0:	e02b      	b.n	800703a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d107      	bne.n	8006ffe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fee:	f107 030d 	add.w	r3, r7, #13
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 fd52 	bl	8008aa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ffc:	e01d      	b.n	800703a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fcd0 	bl	80089a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007006:	2303      	movs	r3, #3
 8007008:	75fb      	strb	r3, [r7, #23]
          break;
 800700a:	e016      	b.n	800703a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b03      	cmp	r3, #3
 8007016:	d00f      	beq.n	8007038 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fcc3 	bl	80089a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007020:	2303      	movs	r3, #3
 8007022:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007024:	e008      	b.n	8007038 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fcbc 	bl	80089a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800702e:	2303      	movs	r3, #3
 8007030:	75fb      	strb	r3, [r7, #23]
          break;
 8007032:	e002      	b.n	800703a <USBD_CDC_Setup+0x19e>
          break;
 8007034:	bf00      	nop
 8007036:	e008      	b.n	800704a <USBD_CDC_Setup+0x1ae>
          break;
 8007038:	bf00      	nop
      }
      break;
 800703a:	e006      	b.n	800704a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fcb1 	bl	80089a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007044:	2303      	movs	r3, #3
 8007046:	75fb      	strb	r3, [r7, #23]
      break;
 8007048:	bf00      	nop
  }

  return (uint8_t)ret;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007066:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	32b0      	adds	r2, #176	@ 0xb0
 8007072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800707a:	2303      	movs	r3, #3
 800707c:	e065      	b.n	800714a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	32b0      	adds	r2, #176	@ 0xb0
 8007088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	440b      	add	r3, r1
 80070a0:	3318      	adds	r3, #24
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02f      	beq.n	8007108 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80070a8:	78fb      	ldrb	r3, [r7, #3]
 80070aa:	f003 020f 	and.w	r2, r3, #15
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	3318      	adds	r3, #24
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	f003 010f 	and.w	r1, r3, #15
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	460b      	mov	r3, r1
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	440b      	add	r3, r1
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4403      	add	r3, r0
 80070d0:	331c      	adds	r3, #28
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d112      	bne.n	8007108 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	f003 020f 	and.w	r2, r3, #15
 80070e8:	6879      	ldr	r1, [r7, #4]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	3318      	adds	r3, #24
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070fa:	78f9      	ldrb	r1, [r7, #3]
 80070fc:	2300      	movs	r3, #0
 80070fe:	2200      	movs	r2, #0
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f002 f982 	bl	800940a <USBD_LL_Transmit>
 8007106:	e01f      	b.n	8007148 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	33b0      	adds	r3, #176	@ 0xb0
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d010      	beq.n	8007148 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	33b0      	adds	r3, #176	@ 0xb0
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b084      	sub	sp, #16
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	32b0      	adds	r2, #176	@ 0xb0
 8007168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	32b0      	adds	r2, #176	@ 0xb0
 8007178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007180:	2303      	movs	r3, #3
 8007182:	e01a      	b.n	80071ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f002 f980 	bl	800948e <USBD_LL_GetRxDataSize>
 800718e:	4602      	mov	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	33b0      	adds	r3, #176	@ 0xb0
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80071b4:	4611      	mov	r1, r2
 80071b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	32b0      	adds	r2, #176	@ 0xb0
 80071d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e024      	b.n	800722e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	33b0      	adds	r3, #176	@ 0xb0
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d019      	beq.n	800722c <USBD_CDC_EP0_RxReady+0x6a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80071fe:	2bff      	cmp	r3, #255	@ 0xff
 8007200:	d014      	beq.n	800722c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	33b0      	adds	r3, #176	@ 0xb0
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800721a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007222:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	22ff      	movs	r2, #255	@ 0xff
 8007228:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007240:	2182      	movs	r1, #130	@ 0x82
 8007242:	4818      	ldr	r0, [pc, #96]	@ (80072a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007244:	f000 fd4f 	bl	8007ce6 <USBD_GetEpDesc>
 8007248:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800724a:	2101      	movs	r1, #1
 800724c:	4815      	ldr	r0, [pc, #84]	@ (80072a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800724e:	f000 fd4a 	bl	8007ce6 <USBD_GetEpDesc>
 8007252:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007254:	2181      	movs	r1, #129	@ 0x81
 8007256:	4813      	ldr	r0, [pc, #76]	@ (80072a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007258:	f000 fd45 	bl	8007ce6 <USBD_GetEpDesc>
 800725c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2210      	movs	r2, #16
 8007268:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d006      	beq.n	800727e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2200      	movs	r2, #0
 8007274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007278:	711a      	strb	r2, [r3, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800728c:	711a      	strb	r2, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2243      	movs	r2, #67	@ 0x43
 8007296:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007298:	4b02      	ldr	r3, [pc, #8]	@ (80072a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000050 	.word	0x20000050

080072a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072b0:	2182      	movs	r1, #130	@ 0x82
 80072b2:	4818      	ldr	r0, [pc, #96]	@ (8007314 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072b4:	f000 fd17 	bl	8007ce6 <USBD_GetEpDesc>
 80072b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072ba:	2101      	movs	r1, #1
 80072bc:	4815      	ldr	r0, [pc, #84]	@ (8007314 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072be:	f000 fd12 	bl	8007ce6 <USBD_GetEpDesc>
 80072c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072c4:	2181      	movs	r1, #129	@ 0x81
 80072c6:	4813      	ldr	r0, [pc, #76]	@ (8007314 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80072c8:	f000 fd0d 	bl	8007ce6 <USBD_GetEpDesc>
 80072cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2210      	movs	r2, #16
 80072d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d006      	beq.n	80072ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2200      	movs	r2, #0
 80072e4:	711a      	strb	r2, [r3, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f042 0202 	orr.w	r2, r2, #2
 80072ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d006      	beq.n	8007302 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	711a      	strb	r2, [r3, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f042 0202 	orr.w	r2, r2, #2
 8007300:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2243      	movs	r2, #67	@ 0x43
 8007306:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007308:	4b02      	ldr	r3, [pc, #8]	@ (8007314 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000050 	.word	0x20000050

08007318 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007320:	2182      	movs	r1, #130	@ 0x82
 8007322:	4818      	ldr	r0, [pc, #96]	@ (8007384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007324:	f000 fcdf 	bl	8007ce6 <USBD_GetEpDesc>
 8007328:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800732a:	2101      	movs	r1, #1
 800732c:	4815      	ldr	r0, [pc, #84]	@ (8007384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800732e:	f000 fcda 	bl	8007ce6 <USBD_GetEpDesc>
 8007332:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007334:	2181      	movs	r1, #129	@ 0x81
 8007336:	4813      	ldr	r0, [pc, #76]	@ (8007384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007338:	f000 fcd5 	bl	8007ce6 <USBD_GetEpDesc>
 800733c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2210      	movs	r2, #16
 8007348:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d006      	beq.n	800735e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	2200      	movs	r2, #0
 8007354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007358:	711a      	strb	r2, [r3, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d006      	beq.n	8007372 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800736c:	711a      	strb	r2, [r3, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2243      	movs	r2, #67	@ 0x43
 8007376:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007378:	4b02      	ldr	r3, [pc, #8]	@ (8007384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000050 	.word	0x20000050

08007388 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	220a      	movs	r2, #10
 8007394:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007396:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	2000000c 	.word	0x2000000c

080073a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e009      	b.n	80073d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	33b0      	adds	r3, #176	@ 0xb0
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	32b0      	adds	r2, #176	@ 0xb0
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073fe:	2303      	movs	r3, #3
 8007400:	e008      	b.n	8007414 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	32b0      	adds	r2, #176	@ 0xb0
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007440:	2303      	movs	r3, #3
 8007442:	e004      	b.n	800744e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
	...

0800745c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	32b0      	adds	r2, #176	@ 0xb0
 800746e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007472:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800747e:	2303      	movs	r3, #3
 8007480:	e025      	b.n	80074ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11f      	bne.n	80074cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2201      	movs	r2, #1
 8007490:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007494:	4b10      	ldr	r3, [pc, #64]	@ (80074d8 <USBD_CDC_TransmitPacket+0x7c>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4403      	add	r3, r0
 80074ae:	3318      	adds	r3, #24
 80074b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80074b2:	4b09      	ldr	r3, [pc, #36]	@ (80074d8 <USBD_CDC_TransmitPacket+0x7c>)
 80074b4:	7819      	ldrb	r1, [r3, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 ffa1 	bl	800940a <USBD_LL_Transmit>

    ret = USBD_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000093 	.word	0x20000093

080074dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	32b0      	adds	r2, #176	@ 0xb0
 80074ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	32b0      	adds	r2, #176	@ 0xb0
 80074fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007506:	2303      	movs	r3, #3
 8007508:	e018      	b.n	800753c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	7c1b      	ldrb	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007512:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <USBD_CDC_ReceivePacket+0x68>)
 8007514:	7819      	ldrb	r1, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800751c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 ff93 	bl	800944c <USBD_LL_PrepareReceive>
 8007526:	e008      	b.n	800753a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <USBD_CDC_ReceivePacket+0x68>)
 800752a:	7819      	ldrb	r1, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007532:	2340      	movs	r3, #64	@ 0x40
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 ff89 	bl	800944c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000094 	.word	0x20000094

08007548 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	4613      	mov	r3, r2
 8007554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	e01f      	b.n	80075a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	79fa      	ldrb	r2, [r7, #7]
 8007592:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f001 fdfd 	bl	8009194 <USBD_LL_Init>
 800759a:	4603      	mov	r3, r0
 800759c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80075bc:	2303      	movs	r3, #3
 80075be:	e025      	b.n	800760c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	32ae      	adds	r2, #174	@ 0xae
 80075d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00f      	beq.n	80075fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	32ae      	adds	r2, #174	@ 0xae
 80075e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ec:	f107 020e 	add.w	r2, r7, #14
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	4602      	mov	r2, r0
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f001 fe0b 	bl	8009238 <USBD_LL_Start>
 8007622:	4603      	mov	r3, r0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007658:	2b00      	cmp	r3, #0
 800765a:	d009      	beq.n	8007670 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	78fa      	ldrb	r2, [r7, #3]
 8007666:	4611      	mov	r1, r2
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	4611      	mov	r1, r2
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 f936 	bl	8008932 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80076d4:	461a      	mov	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d01a      	beq.n	8007720 <USBD_LL_SetupStage+0x72>
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d822      	bhi.n	8007734 <USBD_LL_SetupStage+0x86>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <USBD_LL_SetupStage+0x4a>
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d00a      	beq.n	800770c <USBD_LL_SetupStage+0x5e>
 80076f6:	e01d      	b.n	8007734 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fb63 	bl	8007dcc <USBD_StdDevReq>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]
      break;
 800770a:	e020      	b.n	800774e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fbcb 	bl	8007eb0 <USBD_StdItfReq>
 800771a:	4603      	mov	r3, r0
 800771c:	73fb      	strb	r3, [r7, #15]
      break;
 800771e:	e016      	b.n	800774e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fc2d 	bl	8007f88 <USBD_StdEPReq>
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]
      break;
 8007732:	e00c      	b.n	800774e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800773a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800773e:	b2db      	uxtb	r3, r3
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f001 fdd8 	bl	80092f8 <USBD_LL_StallEP>
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
      break;
 800774c:	bf00      	nop
  }

  return ret;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	460b      	mov	r3, r1
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d16e      	bne.n	800784e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007776:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800777e:	2b03      	cmp	r3, #3
 8007780:	f040 8098 	bne.w	80078b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	429a      	cmp	r2, r3
 800778e:	d913      	bls.n	80077b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	1ad2      	subs	r2, r2, r3
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	4293      	cmp	r3, r2
 80077a8:	bf28      	it	cs
 80077aa:	4613      	movcs	r3, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f001 f9be 	bl	8008b32 <USBD_CtlContinueRx>
 80077b6:	e07d      	b.n	80078b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d014      	beq.n	80077f0 <USBD_LL_DataOutStage+0x98>
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d81d      	bhi.n	8007806 <USBD_LL_DataOutStage+0xae>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <USBD_LL_DataOutStage+0x7c>
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d003      	beq.n	80077da <USBD_LL_DataOutStage+0x82>
 80077d2:	e018      	b.n	8007806 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	75bb      	strb	r3, [r7, #22]
            break;
 80077d8:	e018      	b.n	800780c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	4619      	mov	r1, r3
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 fa64 	bl	8007cb2 <USBD_CoreFindIF>
 80077ea:	4603      	mov	r3, r0
 80077ec:	75bb      	strb	r3, [r7, #22]
            break;
 80077ee:	e00d      	b.n	800780c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	4619      	mov	r1, r3
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 fa66 	bl	8007ccc <USBD_CoreFindEP>
 8007800:	4603      	mov	r3, r0
 8007802:	75bb      	strb	r3, [r7, #22]
            break;
 8007804:	e002      	b.n	800780c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	75bb      	strb	r3, [r7, #22]
            break;
 800780a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800780c:	7dbb      	ldrb	r3, [r7, #22]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d119      	bne.n	8007846 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d113      	bne.n	8007846 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800781e:	7dba      	ldrb	r2, [r7, #22]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	32ae      	adds	r2, #174	@ 0xae
 8007824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800782e:	7dba      	ldrb	r2, [r7, #22]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007836:	7dba      	ldrb	r2, [r7, #22]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	32ae      	adds	r2, #174	@ 0xae
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f001 f984 	bl	8008b54 <USBD_CtlSendStatus>
 800784c:	e032      	b.n	80078b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007854:	b2db      	uxtb	r3, r3
 8007856:	4619      	mov	r1, r3
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fa37 	bl	8007ccc <USBD_CoreFindEP>
 800785e:	4603      	mov	r3, r0
 8007860:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007862:	7dbb      	ldrb	r3, [r7, #22]
 8007864:	2bff      	cmp	r3, #255	@ 0xff
 8007866:	d025      	beq.n	80078b4 <USBD_LL_DataOutStage+0x15c>
 8007868:	7dbb      	ldrb	r3, [r7, #22]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d122      	bne.n	80078b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b03      	cmp	r3, #3
 8007878:	d117      	bne.n	80078aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800787a:	7dba      	ldrb	r2, [r7, #22]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	32ae      	adds	r2, #174	@ 0xae
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00f      	beq.n	80078aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800788a:	7dba      	ldrb	r2, [r7, #22]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007892:	7dba      	ldrb	r2, [r7, #22]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	32ae      	adds	r2, #174	@ 0xae
 8007898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	7afa      	ldrb	r2, [r7, #11]
 80078a0:	4611      	mov	r1, r2
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	4798      	blx	r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	e000      	b.n	80078b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b086      	sub	sp, #24
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	460b      	mov	r3, r1
 80078c8:	607a      	str	r2, [r7, #4]
 80078ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d16f      	bne.n	80079b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3314      	adds	r3, #20
 80078d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d15a      	bne.n	8007998 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d914      	bls.n	8007918 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	1ad2      	subs	r2, r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	461a      	mov	r2, r3
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f001 f8e6 	bl	8008ad6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800790a:	2300      	movs	r3, #0
 800790c:	2200      	movs	r2, #0
 800790e:	2100      	movs	r1, #0
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f001 fd9b 	bl	800944c <USBD_LL_PrepareReceive>
 8007916:	e03f      	b.n	8007998 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	429a      	cmp	r2, r3
 8007922:	d11c      	bne.n	800795e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800792c:	429a      	cmp	r2, r3
 800792e:	d316      	bcc.n	800795e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800793a:	429a      	cmp	r2, r3
 800793c:	d20f      	bcs.n	800795e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800793e:	2200      	movs	r2, #0
 8007940:	2100      	movs	r1, #0
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f001 f8c7 	bl	8008ad6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007950:	2300      	movs	r3, #0
 8007952:	2200      	movs	r2, #0
 8007954:	2100      	movs	r1, #0
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f001 fd78 	bl	800944c <USBD_LL_PrepareReceive>
 800795c:	e01c      	b.n	8007998 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b03      	cmp	r3, #3
 8007968:	d10f      	bne.n	800798a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d009      	beq.n	800798a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800798a:	2180      	movs	r1, #128	@ 0x80
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f001 fcb3 	bl	80092f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f001 f8f1 	bl	8008b7a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d03a      	beq.n	8007a18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff fe42 	bl	800762c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80079b0:	e032      	b.n	8007a18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	4619      	mov	r1, r3
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f985 	bl	8007ccc <USBD_CoreFindEP>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	2bff      	cmp	r3, #255	@ 0xff
 80079ca:	d025      	beq.n	8007a18 <USBD_LL_DataInStage+0x15a>
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d122      	bne.n	8007a18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d11c      	bne.n	8007a18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80079de:	7dfa      	ldrb	r2, [r7, #23]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	32ae      	adds	r2, #174	@ 0xae
 80079e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d014      	beq.n	8007a18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80079ee:	7dfa      	ldrb	r2, [r7, #23]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80079f6:	7dfa      	ldrb	r2, [r7, #23]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	32ae      	adds	r2, #174	@ 0xae
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	7afa      	ldrb	r2, [r7, #11]
 8007a04:	4611      	mov	r1, r2
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	4798      	blx	r3
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007a0e:	7dbb      	ldrb	r3, [r7, #22]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007a14:	7dbb      	ldrb	r3, [r7, #22]
 8007a16:	e000      	b.n	8007a1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d014      	beq.n	8007a88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00e      	beq.n	8007a88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6852      	ldr	r2, [r2, #4]
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	4611      	mov	r1, r2
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a88:	2340      	movs	r3, #64	@ 0x40
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fbed 	bl	800926e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2240      	movs	r2, #64	@ 0x40
 8007aa0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa4:	2340      	movs	r3, #64	@ 0x40
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2180      	movs	r1, #128	@ 0x80
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f001 fbdf 	bl	800926e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2240      	movs	r2, #64	@ 0x40
 8007aba:	621a      	str	r2, [r3, #32]

  return ret;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d006      	beq.n	8007b08 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b04      	cmp	r3, #4
 8007b30:	d106      	bne.n	8007b40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d110      	bne.n	8007b84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00b      	beq.n	8007b84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b72:	69db      	ldr	r3, [r3, #28]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	32ae      	adds	r2, #174	@ 0xae
 8007ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e01c      	b.n	8007bea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d115      	bne.n	8007be8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32ae      	adds	r2, #174	@ 0xae
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	32ae      	adds	r2, #174	@ 0xae
 8007bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	4611      	mov	r1, r2
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	32ae      	adds	r2, #174	@ 0xae
 8007c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e01c      	b.n	8007c4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d115      	bne.n	8007c4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	32ae      	adds	r2, #174	@ 0xae
 8007c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00b      	beq.n	8007c4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	32ae      	adds	r2, #174	@ 0xae
 8007c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	4611      	mov	r1, r2
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00e      	beq.n	8007ca8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6852      	ldr	r2, [r2, #4]
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	4611      	mov	r1, r2
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007cd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	885b      	ldrh	r3, [r3, #2]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	7812      	ldrb	r2, [r2, #0]
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d91f      	bls.n	8007d4c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007d12:	e013      	b.n	8007d3c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007d14:	f107 030a 	add.w	r3, r7, #10
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6978      	ldr	r0, [r7, #20]
 8007d1c:	f000 f81b 	bl	8007d56 <USBD_GetNextDesc>
 8007d20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d108      	bne.n	8007d3c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	789b      	ldrb	r3, [r3, #2]
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d008      	beq.n	8007d4a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	885b      	ldrh	r3, [r3, #2]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	897b      	ldrh	r3, [r7, #10]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d8e5      	bhi.n	8007d14 <USBD_GetEpDesc+0x2e>
 8007d48:	e000      	b.n	8007d4c <USBD_GetEpDesc+0x66>
          break;
 8007d4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007d4c:	693b      	ldr	r3, [r7, #16]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3718      	adds	r7, #24
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	7812      	ldrb	r2, [r2, #0]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d80:	68fb      	ldr	r3, [r7, #12]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b087      	sub	sp, #28
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	3301      	adds	r3, #1
 8007da4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dac:	8a3b      	ldrh	r3, [r7, #16]
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	b21a      	sxth	r2, r3
 8007db2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	b21b      	sxth	r3, r3
 8007dba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007dbc:	89fb      	ldrh	r3, [r7, #14]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007de2:	2b40      	cmp	r3, #64	@ 0x40
 8007de4:	d005      	beq.n	8007df2 <USBD_StdDevReq+0x26>
 8007de6:	2b40      	cmp	r3, #64	@ 0x40
 8007de8:	d857      	bhi.n	8007e9a <USBD_StdDevReq+0xce>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00f      	beq.n	8007e0e <USBD_StdDevReq+0x42>
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d153      	bne.n	8007e9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	32ae      	adds	r2, #174	@ 0xae
 8007dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e0c:	e04a      	b.n	8007ea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	785b      	ldrb	r3, [r3, #1]
 8007e12:	2b09      	cmp	r3, #9
 8007e14:	d83b      	bhi.n	8007e8e <USBD_StdDevReq+0xc2>
 8007e16:	a201      	add	r2, pc, #4	@ (adr r2, 8007e1c <USBD_StdDevReq+0x50>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007e85 	.word	0x08007e85
 8007e24:	08007e8f 	.word	0x08007e8f
 8007e28:	08007e7b 	.word	0x08007e7b
 8007e2c:	08007e8f 	.word	0x08007e8f
 8007e30:	08007e4f 	.word	0x08007e4f
 8007e34:	08007e45 	.word	0x08007e45
 8007e38:	08007e8f 	.word	0x08007e8f
 8007e3c:	08007e67 	.word	0x08007e67
 8007e40:	08007e59 	.word	0x08007e59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa3c 	bl	80082c4 <USBD_GetDescriptor>
          break;
 8007e4c:	e024      	b.n	8007e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fbcb 	bl	80085ec <USBD_SetAddress>
          break;
 8007e56:	e01f      	b.n	8007e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fc0a 	bl	8008674 <USBD_SetConfig>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
          break;
 8007e64:	e018      	b.n	8007e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fcad 	bl	80087c8 <USBD_GetConfig>
          break;
 8007e6e:	e013      	b.n	8007e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fcde 	bl	8008834 <USBD_GetStatus>
          break;
 8007e78:	e00e      	b.n	8007e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fd0d 	bl	800889c <USBD_SetFeature>
          break;
 8007e82:	e009      	b.n	8007e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fd31 	bl	80088ee <USBD_ClrFeature>
          break;
 8007e8c:	e004      	b.n	8007e98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e8e:	6839      	ldr	r1, [r7, #0]
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fd88 	bl	80089a6 <USBD_CtlError>
          break;
 8007e96:	bf00      	nop
      }
      break;
 8007e98:	e004      	b.n	8007ea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fd82 	bl	80089a6 <USBD_CtlError>
      break;
 8007ea2:	bf00      	nop
  }

  return ret;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop

08007eb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ec6:	2b40      	cmp	r3, #64	@ 0x40
 8007ec8:	d005      	beq.n	8007ed6 <USBD_StdItfReq+0x26>
 8007eca:	2b40      	cmp	r3, #64	@ 0x40
 8007ecc:	d852      	bhi.n	8007f74 <USBD_StdItfReq+0xc4>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <USBD_StdItfReq+0x26>
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d14e      	bne.n	8007f74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d840      	bhi.n	8007f66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	889b      	ldrh	r3, [r3, #4]
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d836      	bhi.n	8007f5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	889b      	ldrh	r3, [r3, #4]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fedb 	bl	8007cb2 <USBD_CoreFindIF>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2bff      	cmp	r3, #255	@ 0xff
 8007f04:	d01d      	beq.n	8007f42 <USBD_StdItfReq+0x92>
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d11a      	bne.n	8007f42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007f0c:	7bba      	ldrb	r2, [r7, #14]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	32ae      	adds	r2, #174	@ 0xae
 8007f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00f      	beq.n	8007f3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007f1c:	7bba      	ldrb	r2, [r7, #14]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007f24:	7bba      	ldrb	r2, [r7, #14]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32ae      	adds	r2, #174	@ 0xae
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	4798      	blx	r3
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f3a:	e004      	b.n	8007f46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007f40:	e001      	b.n	8007f46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007f42:	2303      	movs	r3, #3
 8007f44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	88db      	ldrh	r3, [r3, #6]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d110      	bne.n	8007f70 <USBD_StdItfReq+0xc0>
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10d      	bne.n	8007f70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fdfd 	bl	8008b54 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f5a:	e009      	b.n	8007f70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fd21 	bl	80089a6 <USBD_CtlError>
          break;
 8007f64:	e004      	b.n	8007f70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fd1c 	bl	80089a6 <USBD_CtlError>
          break;
 8007f6e:	e000      	b.n	8007f72 <USBD_StdItfReq+0xc2>
          break;
 8007f70:	bf00      	nop
      }
      break;
 8007f72:	e004      	b.n	8007f7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fd15 	bl	80089a6 <USBD_CtlError>
      break;
 8007f7c:	bf00      	nop
  }

  return ret;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	889b      	ldrh	r3, [r3, #4]
 8007f9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fa4:	2b40      	cmp	r3, #64	@ 0x40
 8007fa6:	d007      	beq.n	8007fb8 <USBD_StdEPReq+0x30>
 8007fa8:	2b40      	cmp	r3, #64	@ 0x40
 8007faa:	f200 817f 	bhi.w	80082ac <USBD_StdEPReq+0x324>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d02a      	beq.n	8008008 <USBD_StdEPReq+0x80>
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	f040 817a 	bne.w	80082ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fe85 	bl	8007ccc <USBD_CoreFindEP>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fc6:	7b7b      	ldrb	r3, [r7, #13]
 8007fc8:	2bff      	cmp	r3, #255	@ 0xff
 8007fca:	f000 8174 	beq.w	80082b6 <USBD_StdEPReq+0x32e>
 8007fce:	7b7b      	ldrb	r3, [r7, #13]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8170 	bne.w	80082b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007fd6:	7b7a      	ldrb	r2, [r7, #13]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007fde:	7b7a      	ldrb	r2, [r7, #13]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	32ae      	adds	r2, #174	@ 0xae
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 8163 	beq.w	80082b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ff0:	7b7a      	ldrb	r2, [r7, #13]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	32ae      	adds	r2, #174	@ 0xae
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008006:	e156      	b.n	80082b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	785b      	ldrb	r3, [r3, #1]
 800800c:	2b03      	cmp	r3, #3
 800800e:	d008      	beq.n	8008022 <USBD_StdEPReq+0x9a>
 8008010:	2b03      	cmp	r3, #3
 8008012:	f300 8145 	bgt.w	80082a0 <USBD_StdEPReq+0x318>
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 809b 	beq.w	8008152 <USBD_StdEPReq+0x1ca>
 800801c:	2b01      	cmp	r3, #1
 800801e:	d03c      	beq.n	800809a <USBD_StdEPReq+0x112>
 8008020:	e13e      	b.n	80082a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d002      	beq.n	8008034 <USBD_StdEPReq+0xac>
 800802e:	2b03      	cmp	r3, #3
 8008030:	d016      	beq.n	8008060 <USBD_StdEPReq+0xd8>
 8008032:	e02c      	b.n	800808e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00d      	beq.n	8008056 <USBD_StdEPReq+0xce>
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b80      	cmp	r3, #128	@ 0x80
 800803e:	d00a      	beq.n	8008056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f957 	bl	80092f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800804a:	2180      	movs	r1, #128	@ 0x80
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 f953 	bl	80092f8 <USBD_LL_StallEP>
 8008052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008054:	e020      	b.n	8008098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fca4 	bl	80089a6 <USBD_CtlError>
              break;
 800805e:	e01b      	b.n	8008098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10e      	bne.n	8008086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <USBD_StdEPReq+0xfe>
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	2b80      	cmp	r3, #128	@ 0x80
 8008072:	d008      	beq.n	8008086 <USBD_StdEPReq+0xfe>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	88db      	ldrh	r3, [r3, #6]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f939 	bl	80092f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fd64 	bl	8008b54 <USBD_CtlSendStatus>

              break;
 800808c:	e004      	b.n	8008098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc88 	bl	80089a6 <USBD_CtlError>
              break;
 8008096:	bf00      	nop
          }
          break;
 8008098:	e107      	b.n	80082aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d002      	beq.n	80080ac <USBD_StdEPReq+0x124>
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d016      	beq.n	80080d8 <USBD_StdEPReq+0x150>
 80080aa:	e04b      	b.n	8008144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00d      	beq.n	80080ce <USBD_StdEPReq+0x146>
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b80      	cmp	r3, #128	@ 0x80
 80080b6:	d00a      	beq.n	80080ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 f91b 	bl	80092f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80080c2:	2180      	movs	r1, #128	@ 0x80
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f917 	bl	80092f8 <USBD_LL_StallEP>
 80080ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080cc:	e040      	b.n	8008150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fc68 	bl	80089a6 <USBD_CtlError>
              break;
 80080d6:	e03b      	b.n	8008150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	885b      	ldrh	r3, [r3, #2]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d136      	bne.n	800814e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 f921 	bl	8009336 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fd2d 	bl	8008b54 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff fde4 	bl	8007ccc <USBD_CoreFindEP>
 8008104:	4603      	mov	r3, r0
 8008106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008108:	7b7b      	ldrb	r3, [r7, #13]
 800810a:	2bff      	cmp	r3, #255	@ 0xff
 800810c:	d01f      	beq.n	800814e <USBD_StdEPReq+0x1c6>
 800810e:	7b7b      	ldrb	r3, [r7, #13]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d11c      	bne.n	800814e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008114:	7b7a      	ldrb	r2, [r7, #13]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800811c:	7b7a      	ldrb	r2, [r7, #13]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	32ae      	adds	r2, #174	@ 0xae
 8008122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d010      	beq.n	800814e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800812c:	7b7a      	ldrb	r2, [r7, #13]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32ae      	adds	r2, #174	@ 0xae
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008142:	e004      	b.n	800814e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fc2d 	bl	80089a6 <USBD_CtlError>
              break;
 800814c:	e000      	b.n	8008150 <USBD_StdEPReq+0x1c8>
              break;
 800814e:	bf00      	nop
          }
          break;
 8008150:	e0ab      	b.n	80082aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d002      	beq.n	8008164 <USBD_StdEPReq+0x1dc>
 800815e:	2b03      	cmp	r3, #3
 8008160:	d032      	beq.n	80081c8 <USBD_StdEPReq+0x240>
 8008162:	e097      	b.n	8008294 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <USBD_StdEPReq+0x1f2>
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b80      	cmp	r3, #128	@ 0x80
 800816e:	d004      	beq.n	800817a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fc17 	bl	80089a6 <USBD_CtlError>
                break;
 8008178:	e091      	b.n	800829e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800817a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	da0b      	bge.n	800819a <USBD_StdEPReq+0x212>
 8008182:	7bbb      	ldrb	r3, [r7, #14]
 8008184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	3310      	adds	r3, #16
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	3304      	adds	r3, #4
 8008198:	e00b      	b.n	80081b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	4413      	add	r3, r2
 80081b0:	3304      	adds	r3, #4
 80081b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	2202      	movs	r2, #2
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fc6d 	bl	8008aa0 <USBD_CtlSendData>
              break;
 80081c6:	e06a      	b.n	800829e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	da11      	bge.n	80081f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	f003 020f 	and.w	r2, r3, #15
 80081d6:	6879      	ldr	r1, [r7, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	3324      	adds	r3, #36	@ 0x24
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d117      	bne.n	800821a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fbda 	bl	80089a6 <USBD_CtlError>
                  break;
 80081f2:	e054      	b.n	800829e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	f003 020f 	and.w	r2, r3, #15
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fbc7 	bl	80089a6 <USBD_CtlError>
                  break;
 8008218:	e041      	b.n	800829e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800821a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800821e:	2b00      	cmp	r3, #0
 8008220:	da0b      	bge.n	800823a <USBD_StdEPReq+0x2b2>
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	3310      	adds	r3, #16
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	4413      	add	r3, r2
 8008236:	3304      	adds	r3, #4
 8008238:	e00b      	b.n	8008252 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008240:	4613      	mov	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	4413      	add	r3, r2
 8008250:	3304      	adds	r3, #4
 8008252:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <USBD_StdEPReq+0x2d8>
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b80      	cmp	r3, #128	@ 0x80
 800825e:	d103      	bne.n	8008268 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	e00e      	b.n	8008286 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f881 	bl	8009374 <USBD_LL_IsStallEP>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2201      	movs	r2, #1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e002      	b.n	8008286 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2202      	movs	r2, #2
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc07 	bl	8008aa0 <USBD_CtlSendData>
              break;
 8008292:	e004      	b.n	800829e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fb85 	bl	80089a6 <USBD_CtlError>
              break;
 800829c:	bf00      	nop
          }
          break;
 800829e:	e004      	b.n	80082aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fb7f 	bl	80089a6 <USBD_CtlError>
          break;
 80082a8:	bf00      	nop
      }
      break;
 80082aa:	e005      	b.n	80082b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fb79 	bl	80089a6 <USBD_CtlError>
      break;
 80082b4:	e000      	b.n	80082b8 <USBD_StdEPReq+0x330>
      break;
 80082b6:	bf00      	nop
  }

  return ret;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
	...

080082c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	0a1b      	lsrs	r3, r3, #8
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2b0e      	cmp	r3, #14
 80082e6:	f200 8152 	bhi.w	800858e <USBD_GetDescriptor+0x2ca>
 80082ea:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <USBD_GetDescriptor+0x2c>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008361 	.word	0x08008361
 80082f4:	08008379 	.word	0x08008379
 80082f8:	080083b9 	.word	0x080083b9
 80082fc:	0800858f 	.word	0x0800858f
 8008300:	0800858f 	.word	0x0800858f
 8008304:	0800852f 	.word	0x0800852f
 8008308:	0800855b 	.word	0x0800855b
 800830c:	0800858f 	.word	0x0800858f
 8008310:	0800858f 	.word	0x0800858f
 8008314:	0800858f 	.word	0x0800858f
 8008318:	0800858f 	.word	0x0800858f
 800831c:	0800858f 	.word	0x0800858f
 8008320:	0800858f 	.word	0x0800858f
 8008324:	0800858f 	.word	0x0800858f
 8008328:	0800832d 	.word	0x0800832d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00b      	beq.n	8008350 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	7c12      	ldrb	r2, [r2, #16]
 8008344:	f107 0108 	add.w	r1, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800834e:	e126      	b.n	800859e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb27 	bl	80089a6 <USBD_CtlError>
        err++;
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	3301      	adds	r3, #1
 800835c:	72fb      	strb	r3, [r7, #11]
      break;
 800835e:	e11e      	b.n	800859e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	7c12      	ldrb	r2, [r2, #16]
 800836c:	f107 0108 	add.w	r1, r7, #8
 8008370:	4610      	mov	r0, r2
 8008372:	4798      	blx	r3
 8008374:	60f8      	str	r0, [r7, #12]
      break;
 8008376:	e112      	b.n	800859e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7c1b      	ldrb	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10d      	bne.n	800839c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008388:	f107 0208 	add.w	r2, r7, #8
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3301      	adds	r3, #1
 8008396:	2202      	movs	r2, #2
 8008398:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800839a:	e100      	b.n	800859e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	f107 0208 	add.w	r2, r7, #8
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	2202      	movs	r2, #2
 80083b4:	701a      	strb	r2, [r3, #0]
      break;
 80083b6:	e0f2      	b.n	800859e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	885b      	ldrh	r3, [r3, #2]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b05      	cmp	r3, #5
 80083c0:	f200 80ac 	bhi.w	800851c <USBD_GetDescriptor+0x258>
 80083c4:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <USBD_GetDescriptor+0x108>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	08008419 	.word	0x08008419
 80083d4:	0800844d 	.word	0x0800844d
 80083d8:	08008481 	.word	0x08008481
 80083dc:	080084b5 	.word	0x080084b5
 80083e0:	080084e9 	.word	0x080084e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
 8008404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008406:	e091      	b.n	800852c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 facb 	bl	80089a6 <USBD_CtlError>
            err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
          break;
 8008416:	e089      	b.n	800852c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00b      	beq.n	800843c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	7c12      	ldrb	r2, [r2, #16]
 8008430:	f107 0108 	add.w	r1, r7, #8
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
 8008438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800843a:	e077      	b.n	800852c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fab1 	bl	80089a6 <USBD_CtlError>
            err++;
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	3301      	adds	r3, #1
 8008448:	72fb      	strb	r3, [r7, #11]
          break;
 800844a:	e06f      	b.n	800852c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	7c12      	ldrb	r2, [r2, #16]
 8008464:	f107 0108 	add.w	r1, r7, #8
 8008468:	4610      	mov	r0, r2
 800846a:	4798      	blx	r3
 800846c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800846e:	e05d      	b.n	800852c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa97 	bl	80089a6 <USBD_CtlError>
            err++;
 8008478:	7afb      	ldrb	r3, [r7, #11]
 800847a:	3301      	adds	r3, #1
 800847c:	72fb      	strb	r3, [r7, #11]
          break;
 800847e:	e055      	b.n	800852c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00b      	beq.n	80084a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	7c12      	ldrb	r2, [r2, #16]
 8008498:	f107 0108 	add.w	r1, r7, #8
 800849c:	4610      	mov	r0, r2
 800849e:	4798      	blx	r3
 80084a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084a2:	e043      	b.n	800852c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa7d 	bl	80089a6 <USBD_CtlError>
            err++;
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	3301      	adds	r3, #1
 80084b0:	72fb      	strb	r3, [r7, #11]
          break;
 80084b2:	e03b      	b.n	800852c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00b      	beq.n	80084d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	7c12      	ldrb	r2, [r2, #16]
 80084cc:	f107 0108 	add.w	r1, r7, #8
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084d6:	e029      	b.n	800852c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa63 	bl	80089a6 <USBD_CtlError>
            err++;
 80084e0:	7afb      	ldrb	r3, [r7, #11]
 80084e2:	3301      	adds	r3, #1
 80084e4:	72fb      	strb	r3, [r7, #11]
          break;
 80084e6:	e021      	b.n	800852c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00b      	beq.n	800850c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	7c12      	ldrb	r2, [r2, #16]
 8008500:	f107 0108 	add.w	r1, r7, #8
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
 8008508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800850a:	e00f      	b.n	800852c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fa49 	bl	80089a6 <USBD_CtlError>
            err++;
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	3301      	adds	r3, #1
 8008518:	72fb      	strb	r3, [r7, #11]
          break;
 800851a:	e007      	b.n	800852c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa41 	bl	80089a6 <USBD_CtlError>
          err++;
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	3301      	adds	r3, #1
 8008528:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800852a:	bf00      	nop
      }
      break;
 800852c:	e037      	b.n	800859e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7c1b      	ldrb	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800853c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800853e:	f107 0208 	add.w	r2, r7, #8
 8008542:	4610      	mov	r0, r2
 8008544:	4798      	blx	r3
 8008546:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008548:	e029      	b.n	800859e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa2a 	bl	80089a6 <USBD_CtlError>
        err++;
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	3301      	adds	r3, #1
 8008556:	72fb      	strb	r3, [r7, #11]
      break;
 8008558:	e021      	b.n	800859e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	7c1b      	ldrb	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10d      	bne.n	800857e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856a:	f107 0208 	add.w	r2, r7, #8
 800856e:	4610      	mov	r0, r2
 8008570:	4798      	blx	r3
 8008572:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	2207      	movs	r2, #7
 800857a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800857c:	e00f      	b.n	800859e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fa10 	bl	80089a6 <USBD_CtlError>
        err++;
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	3301      	adds	r3, #1
 800858a:	72fb      	strb	r3, [r7, #11]
      break;
 800858c:	e007      	b.n	800859e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa08 	bl	80089a6 <USBD_CtlError>
      err++;
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	3301      	adds	r3, #1
 800859a:	72fb      	strb	r3, [r7, #11]
      break;
 800859c:	bf00      	nop
  }

  if (err != 0U)
 800859e:	7afb      	ldrb	r3, [r7, #11]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d11e      	bne.n	80085e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	88db      	ldrh	r3, [r3, #6]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d016      	beq.n	80085da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80085ac:	893b      	ldrh	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00e      	beq.n	80085d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	88da      	ldrh	r2, [r3, #6]
 80085b6:	893b      	ldrh	r3, [r7, #8]
 80085b8:	4293      	cmp	r3, r2
 80085ba:	bf28      	it	cs
 80085bc:	4613      	movcs	r3, r2
 80085be:	b29b      	uxth	r3, r3
 80085c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085c2:	893b      	ldrh	r3, [r7, #8]
 80085c4:	461a      	mov	r2, r3
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fa69 	bl	8008aa0 <USBD_CtlSendData>
 80085ce:	e009      	b.n	80085e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f9e7 	bl	80089a6 <USBD_CtlError>
 80085d8:	e004      	b.n	80085e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 faba 	bl	8008b54 <USBD_CtlSendStatus>
 80085e0:	e000      	b.n	80085e4 <USBD_GetDescriptor+0x320>
    return;
 80085e2:	bf00      	nop
  }
}
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop

080085ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	889b      	ldrh	r3, [r3, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d131      	bne.n	8008662 <USBD_SetAddress+0x76>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	88db      	ldrh	r3, [r3, #6]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d12d      	bne.n	8008662 <USBD_SetAddress+0x76>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	2b7f      	cmp	r3, #127	@ 0x7f
 800860c:	d829      	bhi.n	8008662 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	885b      	ldrh	r3, [r3, #2]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008618:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b03      	cmp	r3, #3
 8008624:	d104      	bne.n	8008630 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f9bc 	bl	80089a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800862e:	e01d      	b.n	800866c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	7bfa      	ldrb	r2, [r7, #15]
 8008634:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fec5 	bl	80093cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa86 	bl	8008b54 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2202      	movs	r2, #2
 8008652:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008656:	e009      	b.n	800866c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008660:	e004      	b.n	800866c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f99e 	bl	80089a6 <USBD_CtlError>
  }
}
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	885b      	ldrh	r3, [r3, #2]
 8008686:	b2da      	uxtb	r2, r3
 8008688:	4b4e      	ldr	r3, [pc, #312]	@ (80087c4 <USBD_SetConfig+0x150>)
 800868a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800868c:	4b4d      	ldr	r3, [pc, #308]	@ (80087c4 <USBD_SetConfig+0x150>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d905      	bls.n	80086a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f985 	bl	80089a6 <USBD_CtlError>
    return USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	e08c      	b.n	80087ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d002      	beq.n	80086b2 <USBD_SetConfig+0x3e>
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d029      	beq.n	8008704 <USBD_SetConfig+0x90>
 80086b0:	e075      	b.n	800879e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80086b2:	4b44      	ldr	r3, [pc, #272]	@ (80087c4 <USBD_SetConfig+0x150>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d020      	beq.n	80086fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80086ba:	4b42      	ldr	r3, [pc, #264]	@ (80087c4 <USBD_SetConfig+0x150>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086c4:	4b3f      	ldr	r3, [pc, #252]	@ (80087c4 <USBD_SetConfig+0x150>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7fe ffb9 	bl	8007642 <USBD_SetClassConfig>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f962 	bl	80089a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086ea:	e065      	b.n	80087b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa31 	bl	8008b54 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2203      	movs	r2, #3
 80086f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80086fa:	e05d      	b.n	80087b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fa29 	bl	8008b54 <USBD_CtlSendStatus>
      break;
 8008702:	e059      	b.n	80087b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008704:	4b2f      	ldr	r3, [pc, #188]	@ (80087c4 <USBD_SetConfig+0x150>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d112      	bne.n	8008732 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008714:	4b2b      	ldr	r3, [pc, #172]	@ (80087c4 <USBD_SetConfig+0x150>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800871e:	4b29      	ldr	r3, [pc, #164]	@ (80087c4 <USBD_SetConfig+0x150>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fe ffa8 	bl	800767a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa12 	bl	8008b54 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008730:	e042      	b.n	80087b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008732:	4b24      	ldr	r3, [pc, #144]	@ (80087c4 <USBD_SetConfig+0x150>)
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d02a      	beq.n	8008796 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7fe ff96 	bl	800767a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800874e:	4b1d      	ldr	r3, [pc, #116]	@ (80087c4 <USBD_SetConfig+0x150>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	461a      	mov	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008758:	4b1a      	ldr	r3, [pc, #104]	@ (80087c4 <USBD_SetConfig+0x150>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fe ff6f 	bl	8007642 <USBD_SetClassConfig>
 8008764:	4603      	mov	r3, r0
 8008766:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00f      	beq.n	800878e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f918 	bl	80089a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7fe ff7b 	bl	800767a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800878c:	e014      	b.n	80087b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f9e0 	bl	8008b54 <USBD_CtlSendStatus>
      break;
 8008794:	e010      	b.n	80087b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f9dc 	bl	8008b54 <USBD_CtlSendStatus>
      break;
 800879c:	e00c      	b.n	80087b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f900 	bl	80089a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80087a6:	4b07      	ldr	r3, [pc, #28]	@ (80087c4 <USBD_SetConfig+0x150>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7fe ff64 	bl	800767a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80087b2:	2303      	movs	r3, #3
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	bf00      	nop
  }

  return ret;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000750 	.word	0x20000750

080087c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	88db      	ldrh	r3, [r3, #6]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d004      	beq.n	80087e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f8e2 	bl	80089a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087e2:	e023      	b.n	800882c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	dc02      	bgt.n	80087f6 <USBD_GetConfig+0x2e>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dc03      	bgt.n	80087fc <USBD_GetConfig+0x34>
 80087f4:	e015      	b.n	8008822 <USBD_GetConfig+0x5a>
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d00b      	beq.n	8008812 <USBD_GetConfig+0x4a>
 80087fa:	e012      	b.n	8008822 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3308      	adds	r3, #8
 8008806:	2201      	movs	r2, #1
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f948 	bl	8008aa0 <USBD_CtlSendData>
        break;
 8008810:	e00c      	b.n	800882c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	3304      	adds	r3, #4
 8008816:	2201      	movs	r2, #1
 8008818:	4619      	mov	r1, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f940 	bl	8008aa0 <USBD_CtlSendData>
        break;
 8008820:	e004      	b.n	800882c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f8be 	bl	80089a6 <USBD_CtlError>
        break;
 800882a:	bf00      	nop
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008844:	b2db      	uxtb	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	2b02      	cmp	r3, #2
 800884a:	d81e      	bhi.n	800888a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	88db      	ldrh	r3, [r3, #6]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d004      	beq.n	800885e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f8a5 	bl	80089a6 <USBD_CtlError>
        break;
 800885c:	e01a      	b.n	8008894 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f043 0202 	orr.w	r2, r3, #2
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	330c      	adds	r3, #12
 800887e:	2202      	movs	r2, #2
 8008880:	4619      	mov	r1, r3
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f90c 	bl	8008aa0 <USBD_CtlSendData>
      break;
 8008888:	e004      	b.n	8008894 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f88a 	bl	80089a6 <USBD_CtlError>
      break;
 8008892:	bf00      	nop
  }
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	885b      	ldrh	r3, [r3, #2]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d107      	bne.n	80088be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f94c 	bl	8008b54 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80088bc:	e013      	b.n	80088e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	885b      	ldrh	r3, [r3, #2]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d10b      	bne.n	80088de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	889b      	ldrh	r3, [r3, #4]
 80088ca:	0a1b      	lsrs	r3, r3, #8
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f93c 	bl	8008b54 <USBD_CtlSendStatus>
}
 80088dc:	e003      	b.n	80088e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80088de:	6839      	ldr	r1, [r7, #0]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f860 	bl	80089a6 <USBD_CtlError>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	3b01      	subs	r3, #1
 8008902:	2b02      	cmp	r3, #2
 8008904:	d80b      	bhi.n	800891e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	885b      	ldrh	r3, [r3, #2]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d10c      	bne.n	8008928 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f91c 	bl	8008b54 <USBD_CtlSendStatus>
      }
      break;
 800891c:	e004      	b.n	8008928 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f840 	bl	80089a6 <USBD_CtlError>
      break;
 8008926:	e000      	b.n	800892a <USBD_ClrFeature+0x3c>
      break;
 8008928:	bf00      	nop
  }
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3301      	adds	r3, #1
 800895a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff fa16 	bl	8007d8e <SWAPBYTE>
 8008962:	4603      	mov	r3, r0
 8008964:	461a      	mov	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3301      	adds	r3, #1
 800896e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3301      	adds	r3, #1
 8008974:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f7ff fa09 	bl	8007d8e <SWAPBYTE>
 800897c:	4603      	mov	r3, r0
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	3301      	adds	r3, #1
 8008988:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3301      	adds	r3, #1
 800898e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f7ff f9fc 	bl	8007d8e <SWAPBYTE>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	80da      	strh	r2, [r3, #6]
}
 800899e:	bf00      	nop
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80089b0:	2180      	movs	r1, #128	@ 0x80
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fca0 	bl	80092f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80089b8:	2100      	movs	r1, #0
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fc9c 	bl	80092f8 <USBD_LL_StallEP>
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d042      	beq.n	8008a64 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80089e2:	6938      	ldr	r0, [r7, #16]
 80089e4:	f000 f842 	bl	8008a6c <USBD_GetLen>
 80089e8:	4603      	mov	r3, r0
 80089ea:	3301      	adds	r3, #1
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089f2:	d808      	bhi.n	8008a06 <USBD_GetString+0x3e>
 80089f4:	6938      	ldr	r0, [r7, #16]
 80089f6:	f000 f839 	bl	8008a6c <USBD_GetLen>
 80089fa:	4603      	mov	r3, r0
 80089fc:	3301      	adds	r3, #1
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	e001      	b.n	8008a0a <USBD_GetString+0x42>
 8008a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	4413      	add	r3, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	7812      	ldrb	r2, [r2, #0]
 8008a18:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a1a:	7dfb      	ldrb	r3, [r7, #23]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008a20:	7dfb      	ldrb	r3, [r7, #23]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	4413      	add	r3, r2
 8008a26:	2203      	movs	r2, #3
 8008a28:	701a      	strb	r2, [r3, #0]
  idx++;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008a30:	e013      	b.n	8008a5a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	4413      	add	r3, r2
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
    idx++;
 8008a44:	7dfb      	ldrb	r3, [r7, #23]
 8008a46:	3301      	adds	r3, #1
 8008a48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	4413      	add	r3, r2
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
    idx++;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
 8008a56:	3301      	adds	r3, #1
 8008a58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e7      	bne.n	8008a32 <USBD_GetString+0x6a>
 8008a62:	e000      	b.n	8008a66 <USBD_GetString+0x9e>
    return;
 8008a64:	bf00      	nop
  }
}
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a7c:	e005      	b.n	8008a8a <USBD_GetLen+0x1e>
  {
    len++;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	3301      	adds	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3301      	adds	r3, #1
 8008a88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f5      	bne.n	8008a7e <USBD_GetLen+0x12>
  }

  return len;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 fc9f 	bl	800940a <USBD_LL_Transmit>

  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b084      	sub	sp, #16
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 fc8e 	bl	800940a <USBD_LL_Transmit>

  return USBD_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2203      	movs	r2, #3
 8008b08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	2100      	movs	r1, #0
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fc92 	bl	800944c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	2100      	movs	r1, #0
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fc81 	bl	800944c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2204      	movs	r2, #4
 8008b60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b64:	2300      	movs	r3, #0
 8008b66:	2200      	movs	r2, #0
 8008b68:	2100      	movs	r1, #0
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fc4d 	bl	800940a <USBD_LL_Transmit>

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2205      	movs	r2, #5
 8008b86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2100      	movs	r1, #0
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc5b 	bl	800944c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	4912      	ldr	r1, [pc, #72]	@ (8008bf0 <MX_USB_DEVICE_Init+0x50>)
 8008ba8:	4812      	ldr	r0, [pc, #72]	@ (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008baa:	f7fe fccd 	bl	8007548 <USBD_Init>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bb4:	f7f7 fce2 	bl	800057c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8008bb8:	490f      	ldr	r1, [pc, #60]	@ (8008bf8 <MX_USB_DEVICE_Init+0x58>)
 8008bba:	480e      	ldr	r0, [pc, #56]	@ (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bbc:	f7fe fcf4 	bl	80075a8 <USBD_RegisterClass>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008bc6:	f7f7 fcd9 	bl	800057c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8008bca:	490c      	ldr	r1, [pc, #48]	@ (8008bfc <MX_USB_DEVICE_Init+0x5c>)
 8008bcc:	4809      	ldr	r0, [pc, #36]	@ (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bce:	f7fe fbeb 	bl	80073a8 <USBD_CDC_RegisterInterface>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bd8:	f7f7 fcd0 	bl	800057c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008bdc:	4805      	ldr	r0, [pc, #20]	@ (8008bf4 <MX_USB_DEVICE_Init+0x54>)
 8008bde:	f7fe fd19 	bl	8007614 <USBD_Start>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008be8:	f7f7 fcc8 	bl	800057c <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  //HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008bec:	bf00      	nop
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	200000ac 	.word	0x200000ac
 8008bf4:	20000754 	.word	0x20000754
 8008bf8:	20000018 	.word	0x20000018
 8008bfc:	20000098 	.word	0x20000098

08008c00 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8008c04:	2200      	movs	r2, #0
 8008c06:	4905      	ldr	r1, [pc, #20]	@ (8008c1c <CDC_Init_HS+0x1c>)
 8008c08:	4805      	ldr	r0, [pc, #20]	@ (8008c20 <CDC_Init_HS+0x20>)
 8008c0a:	f7fe fbe7 	bl	80073dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8008c0e:	4905      	ldr	r1, [pc, #20]	@ (8008c24 <CDC_Init_HS+0x24>)
 8008c10:	4803      	ldr	r0, [pc, #12]	@ (8008c20 <CDC_Init_HS+0x20>)
 8008c12:	f7fe fc05 	bl	8007420 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c16:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20001230 	.word	0x20001230
 8008c20:	20000754 	.word	0x20000754
 8008c24:	20000a30 	.word	0x20000a30

08008c28 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8008c2c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	4603      	mov	r3, r0
 8008c40:	6039      	str	r1, [r7, #0]
 8008c42:	71fb      	strb	r3, [r7, #7]
 8008c44:	4613      	mov	r3, r2
 8008c46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8008c48:	79fb      	ldrb	r3, [r7, #7]
 8008c4a:	2b23      	cmp	r3, #35	@ 0x23
 8008c4c:	d84a      	bhi.n	8008ce4 <CDC_Control_HS+0xac>
 8008c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c54 <CDC_Control_HS+0x1c>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008ce5 	.word	0x08008ce5
 8008c58:	08008ce5 	.word	0x08008ce5
 8008c5c:	08008ce5 	.word	0x08008ce5
 8008c60:	08008ce5 	.word	0x08008ce5
 8008c64:	08008ce5 	.word	0x08008ce5
 8008c68:	08008ce5 	.word	0x08008ce5
 8008c6c:	08008ce5 	.word	0x08008ce5
 8008c70:	08008ce5 	.word	0x08008ce5
 8008c74:	08008ce5 	.word	0x08008ce5
 8008c78:	08008ce5 	.word	0x08008ce5
 8008c7c:	08008ce5 	.word	0x08008ce5
 8008c80:	08008ce5 	.word	0x08008ce5
 8008c84:	08008ce5 	.word	0x08008ce5
 8008c88:	08008ce5 	.word	0x08008ce5
 8008c8c:	08008ce5 	.word	0x08008ce5
 8008c90:	08008ce5 	.word	0x08008ce5
 8008c94:	08008ce5 	.word	0x08008ce5
 8008c98:	08008ce5 	.word	0x08008ce5
 8008c9c:	08008ce5 	.word	0x08008ce5
 8008ca0:	08008ce5 	.word	0x08008ce5
 8008ca4:	08008ce5 	.word	0x08008ce5
 8008ca8:	08008ce5 	.word	0x08008ce5
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008ce5 	.word	0x08008ce5
 8008cb4:	08008ce5 	.word	0x08008ce5
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	08008ce5 	.word	0x08008ce5
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008ce5 	.word	0x08008ce5
 8008cc8:	08008ce5 	.word	0x08008ce5
 8008ccc:	08008ce5 	.word	0x08008ce5
 8008cd0:	08008ce5 	.word	0x08008ce5
 8008cd4:	08008ce5 	.word	0x08008ce5
 8008cd8:	08008ce5 	.word	0x08008ce5
 8008cdc:	08008ce5 	.word	0x08008ce5
 8008ce0:	08008ce5 	.word	0x08008ce5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008ce4:	bf00      	nop
  }

  return (USBD_OK);
 8008ce6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4805      	ldr	r0, [pc, #20]	@ (8008d18 <CDC_Receive_HS+0x24>)
 8008d02:	f7fe fb8d 	bl	8007420 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8008d06:	4804      	ldr	r0, [pc, #16]	@ (8008d18 <CDC_Receive_HS+0x24>)
 8008d08:	f7fe fbe8 	bl	80074dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d0c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000754 	.word	0x20000754

08008d1c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */



  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d6c <CDC_Transmit_HS+0x50>)
 8008d2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d32:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <CDC_Transmit_HS+0x22>
    		return USBD_FAIL;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e012      	b.n	8008d64 <CDC_Transmit_HS+0x48>

  if (hcdc->TxState != 0){
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <CDC_Transmit_HS+0x30>
    return USBD_BUSY;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e00b      	b.n	8008d64 <CDC_Transmit_HS+0x48>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8008d4c:	887b      	ldrh	r3, [r7, #2]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4806      	ldr	r0, [pc, #24]	@ (8008d6c <CDC_Transmit_HS+0x50>)
 8008d54:	f7fe fb42 	bl	80073dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8008d58:	4804      	ldr	r0, [pc, #16]	@ (8008d6c <CDC_Transmit_HS+0x50>)
 8008d5a:	f7fe fb7f 	bl	800745c <USBD_CDC_TransmitPacket>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000754 	.word	0x20000754

08008d70 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8008d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	6039      	str	r1, [r7, #0]
 8008d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2212      	movs	r2, #18
 8008da4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008da6:	4b03      	ldr	r3, [pc, #12]	@ (8008db4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	200000cc 	.word	0x200000cc

08008db8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2204      	movs	r2, #4
 8008dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dca:	4b03      	ldr	r3, [pc, #12]	@ (8008dd8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	200000e0 	.word	0x200000e0

08008ddc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4907      	ldr	r1, [pc, #28]	@ (8008e10 <USBD_HS_ProductStrDescriptor+0x34>)
 8008df2:	4808      	ldr	r0, [pc, #32]	@ (8008e14 <USBD_HS_ProductStrDescriptor+0x38>)
 8008df4:	f7ff fde8 	bl	80089c8 <USBD_GetString>
 8008df8:	e004      	b.n	8008e04 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	4904      	ldr	r1, [pc, #16]	@ (8008e10 <USBD_HS_ProductStrDescriptor+0x34>)
 8008dfe:	4805      	ldr	r0, [pc, #20]	@ (8008e14 <USBD_HS_ProductStrDescriptor+0x38>)
 8008e00:	f7ff fde2 	bl	80089c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e04:	4b02      	ldr	r3, [pc, #8]	@ (8008e10 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	20001a30 	.word	0x20001a30
 8008e14:	080095c0 	.word	0x080095c0

08008e18 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6039      	str	r1, [r7, #0]
 8008e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	4904      	ldr	r1, [pc, #16]	@ (8008e38 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008e28:	4804      	ldr	r0, [pc, #16]	@ (8008e3c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8008e2a:	f7ff fdcd 	bl	80089c8 <USBD_GetString>
  return USBD_StrDesc;
 8008e2e:	4b02      	ldr	r3, [pc, #8]	@ (8008e38 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20001a30 	.word	0x20001a30
 8008e3c:	080095d8 	.word	0x080095d8

08008e40 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	221a      	movs	r2, #26
 8008e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e52:	f000 f843 	bl	8008edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008e56:	4b02      	ldr	r3, [pc, #8]	@ (8008e60 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200000e4 	.word	0x200000e4

08008e64 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4907      	ldr	r1, [pc, #28]	@ (8008e98 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008e7a:	4808      	ldr	r0, [pc, #32]	@ (8008e9c <USBD_HS_ConfigStrDescriptor+0x38>)
 8008e7c:	f7ff fda4 	bl	80089c8 <USBD_GetString>
 8008e80:	e004      	b.n	8008e8c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4904      	ldr	r1, [pc, #16]	@ (8008e98 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008e86:	4805      	ldr	r0, [pc, #20]	@ (8008e9c <USBD_HS_ConfigStrDescriptor+0x38>)
 8008e88:	f7ff fd9e 	bl	80089c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	@ (8008e98 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20001a30 	.word	0x20001a30
 8008e9c:	080095ec 	.word	0x080095ec

08008ea0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	6039      	str	r1, [r7, #0]
 8008eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d105      	bne.n	8008ebe <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4907      	ldr	r1, [pc, #28]	@ (8008ed4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008eb6:	4808      	ldr	r0, [pc, #32]	@ (8008ed8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008eb8:	f7ff fd86 	bl	80089c8 <USBD_GetString>
 8008ebc:	e004      	b.n	8008ec8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	4904      	ldr	r1, [pc, #16]	@ (8008ed4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008ec2:	4805      	ldr	r0, [pc, #20]	@ (8008ed8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008ec4:	f7ff fd80 	bl	80089c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ec8:	4b02      	ldr	r3, [pc, #8]	@ (8008ed4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20001a30 	.word	0x20001a30
 8008ed8:	080095f8 	.word	0x080095f8

08008edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8008f20 <Get_SerialNum+0x44>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f24 <Get_SerialNum+0x48>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eee:	4b0e      	ldr	r3, [pc, #56]	@ (8008f28 <Get_SerialNum+0x4c>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4413      	add	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d009      	beq.n	8008f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f02:	2208      	movs	r2, #8
 8008f04:	4909      	ldr	r1, [pc, #36]	@ (8008f2c <Get_SerialNum+0x50>)
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f814 	bl	8008f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	4908      	ldr	r1, [pc, #32]	@ (8008f30 <Get_SerialNum+0x54>)
 8008f10:	68b8      	ldr	r0, [r7, #8]
 8008f12:	f000 f80f 	bl	8008f34 <IntToUnicode>
  }
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	0bfa0700 	.word	0x0bfa0700
 8008f24:	0bfa0704 	.word	0x0bfa0704
 8008f28:	0bfa0708 	.word	0x0bfa0708
 8008f2c:	200000e6 	.word	0x200000e6
 8008f30:	200000f6 	.word	0x200000f6

08008f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
 8008f4a:	e027      	b.n	8008f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	0f1b      	lsrs	r3, r3, #28
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d80b      	bhi.n	8008f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	0f1b      	lsrs	r3, r3, #28
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	440b      	add	r3, r1
 8008f64:	3230      	adds	r2, #48	@ 0x30
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e00a      	b.n	8008f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	0f1b      	lsrs	r3, r3, #28
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4619      	mov	r1, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3237      	adds	r2, #55	@ 0x37
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	4413      	add	r3, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	75fb      	strb	r3, [r7, #23]
 8008f9c:	7dfa      	ldrb	r2, [r7, #23]
 8008f9e:	79fb      	ldrb	r3, [r7, #7]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3d3      	bcc.n	8008f4c <IntToUnicode+0x18>
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4610      	mov	r0, r2
 8008fca:	f7fe fb70 	bl	80076ae <USBD_LL_SetupStage>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	4619      	mov	r1, r3
 8009000:	f7fe fbaa 	bl	8007758 <USBD_LL_DataOutStage>
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800901e:	78fa      	ldrb	r2, [r7, #3]
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	3320      	adds	r3, #32
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	78fb      	ldrb	r3, [r7, #3]
 8009032:	4619      	mov	r1, r3
 8009034:	f7fe fc43 	bl	80078be <USBD_LL_DataInStage>
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fd7d 	bl	8007b4e <USBD_LL_SOF>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009064:	2301      	movs	r3, #1
 8009066:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	79db      	ldrb	r3, [r3, #7]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009070:	2300      	movs	r3, #0
 8009072:	73fb      	strb	r3, [r7, #15]
 8009074:	e008      	b.n	8009088 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	79db      	ldrb	r3, [r3, #7]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d102      	bne.n	8009084 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]
 8009082:	e001      	b.n	8009088 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009084:	f7f7 fa7a 	bl	800057c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800908e:	7bfa      	ldrb	r2, [r7, #15]
 8009090:	4611      	mov	r1, r2
 8009092:	4618      	mov	r0, r3
 8009094:	f7fe fd17 	bl	8007ac6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fcbf 	bl	8007a22 <USBD_LL_Reset>
}
 80090a4:	bf00      	nop
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fd13 	bl	8007ae6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6812      	ldr	r2, [r2, #0]
 80090ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090d2:	f043 0301 	orr.w	r3, r3, #1
 80090d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	7adb      	ldrb	r3, [r3, #11]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090e0:	4b04      	ldr	r3, [pc, #16]	@ (80090f4 <HAL_PCD_SuspendCallback+0x48>)
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	4a03      	ldr	r2, [pc, #12]	@ (80090f4 <HAL_PCD_SuspendCallback+0x48>)
 80090e6:	f043 0306 	orr.w	r3, r3, #6
 80090ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e000ed00 	.word	0xe000ed00

080090f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fd09 	bl	8007b1e <USBD_LL_Resume>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fd61 	bl	8007bf2 <USBD_LL_IsoOUTIncomplete>
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fd1d 	bl	8007b8e <USBD_LL_IsoINIncomplete>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fd73 	bl	8007c56 <USBD_LL_DevConnected>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fd70 	bl	8007c6c <USBD_LL_DevDisconnected>
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d140      	bne.n	8009226 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80091a4:	4a22      	ldr	r2, [pc, #136]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a20      	ldr	r2, [pc, #128]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80091b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009234 <USBD_LL_Init+0xa0>)
 80091b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80091ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091bc:	2209      	movs	r2, #9
 80091be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80091c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80091c6:	4b1a      	ldr	r3, [pc, #104]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80091cc:	4b18      	ldr	r3, [pc, #96]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091ce:	2203      	movs	r2, #3
 80091d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80091d2:	4b17      	ldr	r3, [pc, #92]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80091d8:	4b15      	ldr	r3, [pc, #84]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091da:	2200      	movs	r2, #0
 80091dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80091de:	4b14      	ldr	r3, [pc, #80]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091e0:	2200      	movs	r2, #0
 80091e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80091e4:	4b12      	ldr	r3, [pc, #72]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80091ea:	4b11      	ldr	r3, [pc, #68]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80091f0:	4b0f      	ldr	r3, [pc, #60]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80091f6:	480e      	ldr	r0, [pc, #56]	@ (8009230 <USBD_LL_Init+0x9c>)
 80091f8:	f7f7 ff7a 	bl	80010f0 <HAL_PCD_Init>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009202:	f7f7 f9bb 	bl	800057c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800920a:	4809      	ldr	r0, [pc, #36]	@ (8009230 <USBD_LL_Init+0x9c>)
 800920c:	f7f9 f9bd 	bl	800258a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009210:	2280      	movs	r2, #128	@ 0x80
 8009212:	2100      	movs	r1, #0
 8009214:	4806      	ldr	r0, [pc, #24]	@ (8009230 <USBD_LL_Init+0x9c>)
 8009216:	f7f9 f971 	bl	80024fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800921a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800921e:	2101      	movs	r1, #1
 8009220:	4803      	ldr	r0, [pc, #12]	@ (8009230 <USBD_LL_Init+0x9c>)
 8009222:	f7f9 f96b 	bl	80024fc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	2000011c 	.word	0x2000011c
 8009234:	42040000 	.word	0x42040000

08009238 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800924e:	4618      	mov	r0, r3
 8009250:	f7f8 f85a 	bl	8001308 <HAL_PCD_Start>
 8009254:	4603      	mov	r3, r0
 8009256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f942 	bl	80094e4 <USBD_Get_USB_Status>
 8009260:	4603      	mov	r3, r0
 8009262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009264:	7bbb      	ldrb	r3, [r7, #14]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	4608      	mov	r0, r1
 8009278:	4611      	mov	r1, r2
 800927a:	461a      	mov	r2, r3
 800927c:	4603      	mov	r3, r0
 800927e:	70fb      	strb	r3, [r7, #3]
 8009280:	460b      	mov	r3, r1
 8009282:	70bb      	strb	r3, [r7, #2]
 8009284:	4613      	mov	r3, r2
 8009286:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009296:	78bb      	ldrb	r3, [r7, #2]
 8009298:	883a      	ldrh	r2, [r7, #0]
 800929a:	78f9      	ldrb	r1, [r7, #3]
 800929c:	f7f8 fd48 	bl	8001d30 <HAL_PCD_EP_Open>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f91c 	bl	80094e4 <USBD_Get_USB_Status>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	460b      	mov	r3, r1
 80092c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092d4:	78fa      	ldrb	r2, [r7, #3]
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f7f8 fd93 	bl	8001e04 <HAL_PCD_EP_Close>
 80092de:	4603      	mov	r3, r0
 80092e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f8fd 	bl	80094e4 <USBD_Get_USB_Status>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	460b      	mov	r3, r1
 8009302:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009312:	78fa      	ldrb	r2, [r7, #3]
 8009314:	4611      	mov	r1, r2
 8009316:	4618      	mov	r0, r3
 8009318:	f7f8 fe4b 	bl	8001fb2 <HAL_PCD_EP_SetStall>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	4618      	mov	r0, r3
 8009324:	f000 f8de 	bl	80094e4 <USBD_Get_USB_Status>
 8009328:	4603      	mov	r3, r0
 800932a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932c:	7bbb      	ldrb	r3, [r7, #14]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009350:	78fa      	ldrb	r2, [r7, #3]
 8009352:	4611      	mov	r1, r2
 8009354:	4618      	mov	r0, r3
 8009356:	f7f8 fe8f 	bl	8002078 <HAL_PCD_EP_ClrStall>
 800935a:	4603      	mov	r3, r0
 800935c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935e:	7bfb      	ldrb	r3, [r7, #15]
 8009360:	4618      	mov	r0, r3
 8009362:	f000 f8bf 	bl	80094e4 <USBD_Get_USB_Status>
 8009366:	4603      	mov	r3, r0
 8009368:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800936a:	7bbb      	ldrb	r3, [r7, #14]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009386:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800938c:	2b00      	cmp	r3, #0
 800938e:	da0b      	bge.n	80093a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009390:	78fb      	ldrb	r3, [r7, #3]
 8009392:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009396:	68f9      	ldr	r1, [r7, #12]
 8009398:	4613      	mov	r3, r2
 800939a:	00db      	lsls	r3, r3, #3
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	3316      	adds	r3, #22
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	e00b      	b.n	80093c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	4613      	mov	r3, r2
 80093b2:	00db      	lsls	r3, r3, #3
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80093be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7f8 fc7c 	bl	8001ce8 <HAL_PCD_SetAddress>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 f874 	bl	80094e4 <USBD_Get_USB_Status>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009400:	7bbb      	ldrb	r3, [r7, #14]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b086      	sub	sp, #24
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
 8009416:	460b      	mov	r3, r1
 8009418:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009428:	7af9      	ldrb	r1, [r7, #11]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	f7f8 fd86 	bl	8001f3e <HAL_PCD_EP_Transmit>
 8009432:	4603      	mov	r3, r0
 8009434:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	4618      	mov	r0, r3
 800943a:	f000 f853 	bl	80094e4 <USBD_Get_USB_Status>
 800943e:	4603      	mov	r3, r0
 8009440:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009442:	7dbb      	ldrb	r3, [r7, #22]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3718      	adds	r7, #24
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	607a      	str	r2, [r7, #4]
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	460b      	mov	r3, r1
 800945a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800946a:	7af9      	ldrb	r1, [r7, #11]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	f7f8 fd12 	bl	8001e98 <HAL_PCD_EP_Receive>
 8009474:	4603      	mov	r3, r0
 8009476:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	4618      	mov	r0, r3
 800947c:	f000 f832 	bl	80094e4 <USBD_Get_USB_Status>
 8009480:	4603      	mov	r3, r0
 8009482:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009484:	7dbb      	ldrb	r3, [r7, #22]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b082      	sub	sp, #8
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
 8009496:	460b      	mov	r3, r1
 8009498:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	4611      	mov	r1, r2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7f8 fd32 	bl	8001f0e <HAL_PCD_EP_GetRxCount>
 80094aa:	4603      	mov	r3, r0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094bc:	4b03      	ldr	r3, [pc, #12]	@ (80094cc <USBD_static_malloc+0x18>)
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	20001c30 	.word	0x20001c30

080094d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80094d8:	bf00      	nop
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d817      	bhi.n	8009528 <USBD_Get_USB_Status+0x44>
 80094f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009500 <USBD_Get_USB_Status+0x1c>)
 80094fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fe:	bf00      	nop
 8009500:	08009511 	.word	0x08009511
 8009504:	08009517 	.word	0x08009517
 8009508:	0800951d 	.word	0x0800951d
 800950c:	08009523 	.word	0x08009523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
    break;
 8009514:	e00b      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009516:	2303      	movs	r3, #3
 8009518:	73fb      	strb	r3, [r7, #15]
    break;
 800951a:	e008      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
    break;
 8009520:	e005      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009522:	2303      	movs	r3, #3
 8009524:	73fb      	strb	r3, [r7, #15]
    break;
 8009526:	e002      	b.n	800952e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009528:	2303      	movs	r3, #3
 800952a:	73fb      	strb	r3, [r7, #15]
    break;
 800952c:	bf00      	nop
  }
  return usb_status;
 800952e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <memset>:
 800953c:	4402      	add	r2, r0
 800953e:	4603      	mov	r3, r0
 8009540:	4293      	cmp	r3, r2
 8009542:	d100      	bne.n	8009546 <memset+0xa>
 8009544:	4770      	bx	lr
 8009546:	f803 1b01 	strb.w	r1, [r3], #1
 800954a:	e7f9      	b.n	8009540 <memset+0x4>

0800954c <__libc_init_array>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	4d0d      	ldr	r5, [pc, #52]	@ (8009584 <__libc_init_array+0x38>)
 8009550:	2600      	movs	r6, #0
 8009552:	4c0d      	ldr	r4, [pc, #52]	@ (8009588 <__libc_init_array+0x3c>)
 8009554:	1b64      	subs	r4, r4, r5
 8009556:	10a4      	asrs	r4, r4, #2
 8009558:	42a6      	cmp	r6, r4
 800955a:	d109      	bne.n	8009570 <__libc_init_array+0x24>
 800955c:	4d0b      	ldr	r5, [pc, #44]	@ (800958c <__libc_init_array+0x40>)
 800955e:	2600      	movs	r6, #0
 8009560:	4c0b      	ldr	r4, [pc, #44]	@ (8009590 <__libc_init_array+0x44>)
 8009562:	f000 f817 	bl	8009594 <_init>
 8009566:	1b64      	subs	r4, r4, r5
 8009568:	10a4      	asrs	r4, r4, #2
 800956a:	42a6      	cmp	r6, r4
 800956c:	d105      	bne.n	800957a <__libc_init_array+0x2e>
 800956e:	bd70      	pop	{r4, r5, r6, pc}
 8009570:	f855 3b04 	ldr.w	r3, [r5], #4
 8009574:	3601      	adds	r6, #1
 8009576:	4798      	blx	r3
 8009578:	e7ee      	b.n	8009558 <__libc_init_array+0xc>
 800957a:	f855 3b04 	ldr.w	r3, [r5], #4
 800957e:	3601      	adds	r6, #1
 8009580:	4798      	blx	r3
 8009582:	e7f2      	b.n	800956a <__libc_init_array+0x1e>
 8009584:	080096e0 	.word	0x080096e0
 8009588:	080096e0 	.word	0x080096e0
 800958c:	080096e0 	.word	0x080096e0
 8009590:	080096e4 	.word	0x080096e4

08009594 <_init>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	bf00      	nop
 8009598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959a:	bc08      	pop	{r3}
 800959c:	469e      	mov	lr, r3
 800959e:	4770      	bx	lr

080095a0 <_fini>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	bf00      	nop
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr
