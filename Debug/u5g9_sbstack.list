
u5g9_sbstack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000274  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d8  08000274  08000274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800954c  0800954c  0000a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009680  08009680  0000b100  2**0
                  CONTENTS
  4 .ARM          00000000  08009680  08009680  0000b100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009680  08009680  0000b100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009680  08009680  0000a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009684  08009684  0000a684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08009688  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  20000100  08009788  0000b100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  08009788  0000bd50  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000b100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac5c  00000000  00000000  0000b136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c54  00000000  00000000  00025d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  000299e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b2  00000000  00000000  0002b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040b13  00000000  00000000  0002c2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc44  00000000  00000000  0006cded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001837e1  00000000  00000000  00089a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020d212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  0020d258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0021340c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	20000100 	.word	0x20000100
 8000290:	00000000 	.word	0x00000000
 8000294:	08009534 	.word	0x08009534

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000104 	.word	0x20000104
 80002b0:	08009534 	.word	0x08009534

080002b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002ba:	f000 fae9 	bl	8000890 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002be:	f000 f81b 	bl	80002f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002c2:	f000 f885 	bl	80003d0 <MX_GPIO_Init>
	MX_ICACHE_Init();
 80002c6:	f000 f86f 	bl	80003a8 <MX_ICACHE_Init>
	/* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 80002ca:	f008 fc2d 	bl	8008b28 <MX_USB_DEVICE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t msg[] = "Hello, USB CDC!\r\n";
 80002ce:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <main+0x40>)
 80002d0:	1d3c      	adds	r4, r7, #4
 80002d2:	461d      	mov	r5, r3
 80002d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d8:	682b      	ldr	r3, [r5, #0]
 80002da:	8023      	strh	r3, [r4, #0]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		CDC_Transmit_HS(msg, sizeof(msg) - 1);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2111      	movs	r1, #17
 80002e0:	4618      	mov	r0, r3
 80002e2:	f008 fceb 	bl	8008cbc <CDC_Transmit_HS>
		HAL_Delay(1000);
 80002e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ea:	f000 fb21 	bl	8000930 <HAL_Delay>
	while (1) {
 80002ee:	bf00      	nop
 80002f0:	e7f4      	b.n	80002dc <main+0x28>
 80002f2:	bf00      	nop
 80002f4:	0800954c 	.word	0x0800954c

080002f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b09e      	sub	sp, #120	@ 0x78
 80002fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2260      	movs	r2, #96	@ 0x60
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f009 f8e8 	bl	80094dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800030c:	463b      	mov	r3, r7
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]
 800031a:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800031c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000320:	f002 f938 	bl	8002594 <HAL_PWREx_ControlVoltageScaling>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x36>
			!= HAL_OK) {
		Error_Handler();
 800032a:	f000 f8eb 	bl	8000504 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800032e:	2301      	movs	r3, #1
 8000330:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000336:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000338:	2302      	movs	r3, #2
 800033a:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033c:	2303      	movs	r3, #3
 800033e:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000344:	2301      	movs	r3, #1
 8000346:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000348:	2314      	movs	r3, #20
 800034a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLP = 8;
 800034c:	2308      	movs	r3, #8
 800034e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000350:	2302      	movs	r3, #2
 8000352:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000354:	2302      	movs	r3, #2
 8000356:	66fb      	str	r3, [r7, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000358:	230c      	movs	r3, #12
 800035a:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	677b      	str	r3, [r7, #116]	@ 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f002 f9df 	bl	8002728 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x7c>
		Error_Handler();
 8000370:	f000 f8c8 	bl	8000504 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000374:	231f      	movs	r3, #31
 8000376:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2303      	movs	r3, #3
 800037a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800038c:	463b      	mov	r3, r7
 800038e:	2104      	movs	r1, #4
 8000390:	4618      	mov	r0, r3
 8000392:	f003 f8a5 	bl	80034e0 <HAL_RCC_ClockConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0xa8>
		Error_Handler();
 800039c:	f000 f8b2 	bl	8000504 <Error_Handler>
	}
}
 80003a0:	bf00      	nop
 80003a2:	3778      	adds	r7, #120	@ 0x78
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <MX_ICACHE_Init>:
/**
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK) {
 80003ac:	2000      	movs	r0, #0
 80003ae:	f000 fe33 	bl	8001018 <HAL_ICACHE_ConfigAssociativityMode>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_ICACHE_Init+0x14>
		Error_Handler();
 80003b8:	f000 f8a4 	bl	8000504 <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK) {
 80003bc:	f000 fe4c 	bl	8001058 <HAL_ICACHE_Enable>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ICACHE_Init+0x22>
		Error_Handler();
 80003c6:	f000 f89d 	bl	8000504 <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	@ 0x28
 80003d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003d6:	f107 0314 	add.w	r3, r7, #20
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80003e6:	4b3b      	ldr	r3, [pc, #236]	@ (80004d4 <MX_GPIO_Init+0x104>)
 80003e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003ec:	4a39      	ldr	r2, [pc, #228]	@ (80004d4 <MX_GPIO_Init+0x104>)
 80003ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003f6:	4b37      	ldr	r3, [pc, #220]	@ (80004d4 <MX_GPIO_Init+0x104>)
 80003f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000400:	613b      	str	r3, [r7, #16]
 8000402:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b33      	ldr	r3, [pc, #204]	@ (80004d4 <MX_GPIO_Init+0x104>)
 8000406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800040a:	4a32      	ldr	r2, [pc, #200]	@ (80004d4 <MX_GPIO_Init+0x104>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000414:	4b2f      	ldr	r3, [pc, #188]	@ (80004d4 <MX_GPIO_Init+0x104>)
 8000416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000422:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <MX_GPIO_Init+0x104>)
 8000424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000428:	4a2a      	ldr	r2, [pc, #168]	@ (80004d4 <MX_GPIO_Init+0x104>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000432:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <MX_GPIO_Init+0x104>)
 8000434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000438:	f003 0308 	and.w	r3, r3, #8
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000440:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <MX_GPIO_Init+0x104>)
 8000442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000446:	4a23      	ldr	r2, [pc, #140]	@ (80004d4 <MX_GPIO_Init+0x104>)
 8000448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800044c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000450:	4b20      	ldr	r3, [pc, #128]	@ (80004d4 <MX_GPIO_Init+0x104>)
 8000452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin | LED_GREEN_Pin, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2114      	movs	r1, #20
 8000462:	481d      	ldr	r0, [pc, #116]	@ (80004d8 <MX_GPIO_Init+0x108>)
 8000464:	f000 fdc0 	bl	8000fe8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, DBG1_Pin | DBGP_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 800046e:	481b      	ldr	r0, [pc, #108]	@ (80004dc <MX_GPIO_Init+0x10c>)
 8000470:	f000 fdba 	bl	8000fe8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8000474:	2304      	movs	r3, #4
 8000476:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2302      	movs	r3, #2
 8000482:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4619      	mov	r1, r3
 800048a:	4813      	ldr	r0, [pc, #76]	@ (80004d8 <MX_GPIO_Init+0x108>)
 800048c:	f000 fbd4 	bl	8000c38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000490:	2310      	movs	r3, #16
 8000492:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4619      	mov	r1, r3
 80004a6:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <MX_GPIO_Init+0x108>)
 80004a8:	f000 fbc6 	bl	8000c38 <HAL_GPIO_Init>

	/*Configure GPIO pins : DBG1_Pin DBGP_Pin */
	GPIO_InitStruct.Pin = DBG1_Pin | DBGP_Pin;
 80004ac:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80004b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2300      	movs	r3, #0
 80004bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	@ (80004dc <MX_GPIO_Init+0x10c>)
 80004c6:	f000 fbb7 	bl	8000c38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004ca:	bf00      	nop
 80004cc:	3728      	adds	r7, #40	@ 0x28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	46020c00 	.word	0x46020c00
 80004d8:	42020c00 	.word	0x42020c00
 80004dc:	42021800 	.word	0x42021800

080004e0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d101      	bne.n	80004f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004f2:	f000 f9fd 	bl	80008f0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40001000 	.word	0x40001000

08000504 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <HAL_MspInit+0x34>)
 8000518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800051c:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <HAL_MspInit+0x34>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000526:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <HAL_MspInit+0x34>)
 8000528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000534:	f002 f8ba 	bl	80026ac <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8000538:	f002 f8c8 	bl	80026cc <HAL_PWREx_EnableVddIO2>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	46020c00 	.word	0x46020c00

08000548 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0be      	sub	sp, #248	@ 0xf8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	22e0      	movs	r2, #224	@ 0xe0
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f008 ffbf 	bl	80094dc <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a3e      	ldr	r2, [pc, #248]	@ (800065c <HAL_PCD_MspInit+0x114>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d174      	bne.n	8000652 <HAL_PCD_MspInit+0x10a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000568:	4b3d      	ldr	r3, [pc, #244]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 800056a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800056e:	4a3c      	ldr	r2, [pc, #240]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000578:	4b39      	ldr	r3, [pc, #228]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 800057a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8000586:	f04f 0200 	mov.w	r2, #0
 800058a:	f04f 0308 	mov.w	r3, #8
 800058e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_HSE;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	4618      	mov	r0, r3
 800059e:	f003 fb7f 	bl	8003ca0 <HAL_RCCEx_PeriphCLKConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <HAL_PCD_MspInit+0x64>
    {
      Error_Handler();
 80005a8:	f7ff ffac 	bl	8000504 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_1);
 80005ac:	200c      	movs	r0, #12
 80005ae:	f000 f9f7 	bl	80009a0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80005b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005b8:	4a29      	ldr	r2, [pc, #164]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005c2:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80005d0:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d6:	4a22      	ldr	r2, [pc, #136]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d11b      	bne.n	8000634 <HAL_PCD_MspInit+0xec>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 80005fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000602:	4a17      	ldr	r2, [pc, #92]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 800060e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800061a:	f002 f847 	bl	80026ac <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800061e:	f002 f865 	bl	80026ec <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 8000624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <HAL_PCD_MspInit+0x118>)
 800062a:	f023 0304 	bic.w	r3, r3, #4
 800062e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000632:	e003      	b.n	800063c <HAL_PCD_MspInit+0xf4>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000634:	f002 f83a 	bl	80026ac <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000638:	f002 f858 	bl	80026ec <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800063c:	2001      	movs	r0, #1
 800063e:	f000 f99b 	bl	8000978 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 7, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2107      	movs	r1, #7
 8000646:	2049      	movs	r0, #73	@ 0x49
 8000648:	f000 fa76 	bl	8000b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800064c:	2049      	movs	r0, #73	@ 0x49
 800064e:	f000 fa8d 	bl	8000b6c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8000652:	bf00      	nop
 8000654:	37f8      	adds	r7, #248	@ 0xf8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	42040000 	.word	0x42040000
 8000660:	46020c00 	.word	0x46020c00

08000664 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08e      	sub	sp, #56	@ 0x38
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <HAL_InitTick+0xcc>)
 8000676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800067a:	4a2d      	ldr	r2, [pc, #180]	@ (8000730 <HAL_InitTick+0xcc>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <HAL_InitTick+0xcc>)
 8000686:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000692:	f107 0210 	add.w	r2, r7, #16
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fa41 	bl	8003b24 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006a2:	f003 fa2b 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 80006a6:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006aa:	4a22      	ldr	r2, [pc, #136]	@ (8000734 <HAL_InitTick+0xd0>)
 80006ac:	fba2 2303 	umull	r2, r3, r2, r3
 80006b0:	0c9b      	lsrs	r3, r3, #18
 80006b2:	3b01      	subs	r3, #1
 80006b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <HAL_InitTick+0xd4>)
 80006b8:	4a20      	ldr	r2, [pc, #128]	@ (800073c <HAL_InitTick+0xd8>)
 80006ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <HAL_InitTick+0xd4>)
 80006be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000738 <HAL_InitTick+0xd4>)
 80006c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <HAL_InitTick+0xd4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <HAL_InitTick+0xd4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80006d6:	4818      	ldr	r0, [pc, #96]	@ (8000738 <HAL_InitTick+0xd4>)
 80006d8:	f004 fb4a 	bl	8004d70 <HAL_TIM_Base_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80006e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d118      	bne.n	800071c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006ea:	4813      	ldr	r0, [pc, #76]	@ (8000738 <HAL_InitTick+0xd4>)
 80006ec:	f004 fba2 	bl	8004e34 <HAL_TIM_Base_Start_IT>
 80006f0:	4603      	mov	r3, r0
 80006f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80006f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10e      	bne.n	800071c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d808      	bhi.n	8000716 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2031      	movs	r0, #49	@ 0x31
 800070a:	f000 fa15 	bl	8000b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800070e:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <HAL_InitTick+0xdc>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	e002      	b.n	800071c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800071c:	2031      	movs	r0, #49	@ 0x31
 800071e:	f000 fa25 	bl	8000b6c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000722:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000726:	4618      	mov	r0, r3
 8000728:	3738      	adds	r7, #56	@ 0x38
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	46020c00 	.word	0x46020c00
 8000734:	431bde83 	.word	0x431bde83
 8000738:	20000600 	.word	0x20000600
 800073c:	40001000 	.word	0x40001000
 8000740:	20000004 	.word	0x20000004

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <NMI_Handler+0x4>

0800074c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <HardFault_Handler+0x4>

08000754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <MemManage_Handler+0x4>

0800075c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007a8:	4802      	ldr	r0, [pc, #8]	@ (80007b4 <TIM6_IRQHandler+0x10>)
 80007aa:	f004 fbe3 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000600 	.word	0x20000600

080007b8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <OTG_HS_IRQHandler+0x10>)
 80007be:	f000 fd89 	bl	80012d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000011c 	.word	0x2000011c

080007cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <SystemInit+0x68>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007d6:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <SystemInit+0x68>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <SystemInit+0x6c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <SystemInit+0x6c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <SystemInit+0x6c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <SystemInit+0x6c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <SystemInit+0x6c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000838 <SystemInit+0x6c>)
 80007fe:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000802:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000806:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000808:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <SystemInit+0x6c>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <SystemInit+0x6c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a09      	ldr	r2, [pc, #36]	@ (8000838 <SystemInit+0x6c>)
 8000814:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000818:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800081a:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <SystemInit+0x6c>)
 800081c:	2200      	movs	r2, #0
 800081e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000820:	4b04      	ldr	r3, [pc, #16]	@ (8000834 <SystemInit+0x68>)
 8000822:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000826:	609a      	str	r2, [r3, #8]
  #endif
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00
 8000838:	46020c00 	.word	0x46020c00

0800083c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800083c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000874 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000840:	f7ff ffc4 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000844:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000846:	e003      	b.n	8000850 <LoopCopyDataInit>

08000848 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000848:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800084a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800084c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800084e:	3104      	adds	r1, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000850:	480a      	ldr	r0, [pc, #40]	@ (800087c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000852:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000854:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000856:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000858:	d3f6      	bcc.n	8000848 <CopyDataInit>
	ldr	r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <LoopForever+0x12>)
	b	LoopFillZerobss
 800085c:	e002      	b.n	8000864 <LoopFillZerobss>

0800085e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800085e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000860:	f842 3b04 	str.w	r3, [r2], #4

08000864 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000864:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <LoopForever+0x16>)
	cmp	r2, r3
 8000866:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000868:	d3f9      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086a:	f008 fe3f 	bl	80094ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800086e:	f7ff fd21 	bl	80002b4 <main>

08000872 <LoopForever>:

LoopForever:
    b LoopForever
 8000872:	e7fe      	b.n	8000872 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000874:	202f0000 	.word	0x202f0000
	ldr	r3, =_sidata
 8000878:	08009688 	.word	0x08009688
	ldr	r0, =_sdata
 800087c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000880:	20000100 	.word	0x20000100
	ldr	r2, =_sbss
 8000884:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8000888:	20001d50 	.word	0x20001d50

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_Init+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <HAL_Init+0x50>)
 800089a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800089e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f93e 	bl	8000b22 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80008a6:	f003 f80d 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 80008aa:	4602      	mov	r2, r0
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <HAL_Init+0x54>)
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	490c      	ldr	r1, [pc, #48]	@ (80008e8 <HAL_Init+0x58>)
 80008b6:	5ccb      	ldrb	r3, [r1, r3]
 80008b8:	fa22 f303 	lsr.w	r3, r2, r3
 80008bc:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <HAL_Init+0x5c>)
 80008be:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008c0:	2004      	movs	r0, #4
 80008c2:	f000 f961 	bl	8000b88 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c6:	200f      	movs	r0, #15
 80008c8:	f7ff fecc 	bl	8000664 <HAL_InitTick>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e002      	b.n	80008dc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008d6:	f7ff fe1b 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40022000 	.word	0x40022000
 80008e4:	46020c00 	.word	0x46020c00
 80008e8:	080095a8 	.word	0x080095a8
 80008ec:	20000000 	.word	0x20000000

080008f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	2000064c 	.word	0x2000064c

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000064c 	.word	0x2000064c

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff ffee 	bl	8000918 <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffde 	bl	8000918 <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000984:	f023 0201 	bic.w	r2, r3, #1
 8000988:	4904      	ldr	r1, [pc, #16]	@ (800099c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4313      	orrs	r3, r2
 800098e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	46000400 	.word	0x46000400

080009a0 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80009aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80009ac:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80009b0:	4904      	ldr	r1, [pc, #16]	@ (80009c4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	46000400 	.word	0x46000400

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4907      	ldr	r1, [pc, #28]	@ (8000a64 <__NVIC_EnableIRQ+0x38>)
 8000a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	@ (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	@ (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	@ 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	@ 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ff4c 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b46:	f7ff ff63 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	6978      	ldr	r0, [r7, #20]
 8000b52:	f7ff ffb3 	bl	8000abc <NVIC_EncodePriority>
 8000b56:	4602      	mov	r2, r0
 8000b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff82 	bl	8000a68 <__NVIC_SetPriority>
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff56 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d844      	bhi.n	8000c20 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000b96:	a201      	add	r2, pc, #4	@ (adr r2, 8000b9c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bbf 	.word	0x08000bbf
 8000ba0:	08000bdd 	.word	0x08000bdd
 8000ba4:	08000bff 	.word	0x08000bff
 8000ba8:	08000c21 	.word	0x08000c21
 8000bac:	08000bb1 	.word	0x08000bb1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6013      	str	r3, [r2, #0]
      break;
 8000bbc:	e031      	b.n	8000c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bc4:	f023 0304 	bic.w	r3, r3, #4
 8000bc8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a18      	ldr	r2, [pc, #96]	@ (8000c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bd2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000bda:	e022      	b.n	8000c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a13      	ldr	r2, [pc, #76]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000be2:	f023 0304 	bic.w	r3, r3, #4
 8000be6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bf2:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bf4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000bfc:	e011      	b.n	8000c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000c04:	f023 0304 	bic.w	r3, r3, #4
 8000c08:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000c16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000c1e:	e000      	b.n	8000c22 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000c20:	bf00      	nop
  }
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010
 8000c34:	46020c00 	.word	0x46020c00

08000c38 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b089      	sub	sp, #36	@ 0x24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c4a:	e1ba      	b.n	8000fc2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2101      	movs	r1, #1
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 81aa 	beq.w	8000fbc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a55      	ldr	r2, [pc, #340]	@ (8000dc0 <HAL_GPIO_Init+0x188>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d15d      	bne.n	8000d2c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000c76:	2201      	movs	r2, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0201 	and.w	r2, r3, #1
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000ca0:	4a48      	ldr	r2, [pc, #288]	@ (8000dc4 <HAL_GPIO_Init+0x18c>)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ca8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000caa:	4a46      	ldr	r2, [pc, #280]	@ (8000dc4 <HAL_GPIO_Init+0x18c>)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	220f      	movs	r2, #15
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220b      	movs	r2, #11
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69fa      	ldr	r2, [r7, #28]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	69f9      	ldr	r1, [r7, #28]
 8000cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2202      	movs	r2, #2
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69fa      	ldr	r2, [r7, #28]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e067      	b.n	8000dfc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x104>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b12      	cmp	r3, #18
 8000d3a:	d145      	bne.n	8000dc8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d48:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	f003 020f 	and.w	r2, r3, #15
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	69f9      	ldr	r1, [r7, #28]
 8000d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69fa      	ldr	r2, [r7, #28]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0203 	and.w	r2, r3, #3
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	e01e      	b.n	8000dfc <HAL_GPIO_Init+0x1c4>
 8000dbe:	bf00      	nop
 8000dc0:	46020000 	.word	0x46020000
 8000dc4:	08009600 	.word	0x08009600
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0203 	and.w	r2, r3, #3
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69fa      	ldr	r2, [r7, #28]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	69fa      	ldr	r2, [r7, #28]
 8000dfa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d00b      	beq.n	8000e1c <HAL_GPIO_Init+0x1e4>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e10:	2b11      	cmp	r3, #17
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d130      	bne.n	8000e7e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000e52:	2201      	movs	r2, #1
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	f003 0201 	and.w	r2, r3, #1
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d017      	beq.n	8000eb6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d07c      	beq.n	8000fbc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ec2:	4a47      	ldr	r2, [pc, #284]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3318      	adds	r3, #24
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0a9a      	lsrs	r2, r3, #10
 8000eea:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe4 <HAL_GPIO_Init+0x3ac>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	f002 0203 	and.w	r2, r2, #3
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	4093      	lsls	r3, r2
 8000ef8:	69fa      	ldr	r2, [r7, #28]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000efe:	4938      	ldr	r1, [pc, #224]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3318      	adds	r3, #24
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f0c:	4b34      	ldr	r3, [pc, #208]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000f30:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000f52:	69fa      	ldr	r2, [r7, #28]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000f66:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f94:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_GPIO_Init+0x3a8>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f ae3d 	bne.w	8000c4c <HAL_GPIO_Init+0x14>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3724      	adds	r7, #36	@ 0x24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	46022000 	.word	0x46022000
 8000fe4:	002f7f7f 	.word	0x002f7f7f

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001004:	e002      	b.n	800100c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e007      	b.n	8001046 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 0204 	bic.w	r2, r3, #4
 800103e:	4905      	ldr	r1, [pc, #20]	@ (8001054 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
  }

  return status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40030400 	.word	0x40030400

08001058 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_ICACHE_Enable+0x1c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_ICACHE_Enable+0x1c>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40030400 	.word	0x40030400

08001078 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0fe      	b.n	8001288 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fa52 	bl	8000548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2203      	movs	r2, #3
 80010a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 fb00 	bl	80056b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7c1a      	ldrb	r2, [r3, #16]
 80010be:	f88d 2000 	strb.w	r2, [sp]
 80010c2:	3304      	adds	r3, #4
 80010c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c6:	f004 fa13 	bl	80054f0 <USB_CoreInit>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0d5      	b.n	8001288 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 faf8 	bl	80056d8 <USB_SetCurrentMode>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2202      	movs	r2, #2
 80010f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0c6      	b.n	8001288 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e04a      	b.n	8001196 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3315      	adds	r3, #21
 8001110:	2201      	movs	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	3314      	adds	r3, #20
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	b298      	uxth	r0, r3
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	332e      	adds	r3, #46	@ 0x2e
 800113c:	4602      	mov	r2, r0
 800113e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	3318      	adds	r3, #24
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	331c      	adds	r3, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	3320      	adds	r3, #32
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	3324      	adds	r3, #36	@ 0x24
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	3301      	adds	r3, #1
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	791b      	ldrb	r3, [r3, #4]
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3af      	bcc.n	8001100 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e044      	b.n	8001230 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80011ce:	7bfa      	ldrb	r2, [r7, #15]
 80011d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	3301      	adds	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	7bfa      	ldrb	r2, [r7, #15]
 8001236:	429a      	cmp	r2, r3
 8001238:	d3b5      	bcc.n	80011a6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7c1a      	ldrb	r2, [r3, #16]
 8001242:	f88d 2000 	strb.w	r2, [sp]
 8001246:	3304      	adds	r3, #4
 8001248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800124a:	f004 fa91 	bl	8005770 <USB_DevInit>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2202      	movs	r2, #2
 8001258:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e013      	b.n	8001288 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7b1b      	ldrb	r3, [r3, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f001 f95c 	bl	8002534 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f005 fae0 	bl	8006846 <USB_DevDisconnect>

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_PCD_Start+0x16>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e012      	b.n	80012cc <HAL_PCD_Start+0x3c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f9ee 	bl	8005694 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f005 faa1 	bl	8006804 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b08d      	sub	sp, #52	@ 0x34
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f005 fb5f 	bl	80069ae <USB_GetMode>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 84b9 	bne.w	8001c6a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f005 fac3 	bl	8006888 <USB_ReadInterrupts>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 84af 	beq.w	8001c68 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f005 fab0 	bl	8006888 <USB_ReadInterrupts>
 8001328:	4603      	mov	r3, r0
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b02      	cmp	r3, #2
 8001330:	d107      	bne.n	8001342 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f002 0202 	and.w	r2, r2, #2
 8001340:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f005 fa9e 	bl	8006888 <USB_ReadInterrupts>
 800134c:	4603      	mov	r3, r0
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b10      	cmp	r3, #16
 8001354:	d161      	bne.n	800141a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0210 	bic.w	r2, r2, #16
 8001364:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f003 020f 	and.w	r2, r3, #15
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	3304      	adds	r3, #4
 8001384:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	0c5b      	lsrs	r3, r3, #17
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	2b02      	cmp	r3, #2
 8001390:	d124      	bne.n	80013dc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d035      	beq.n	800140a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f005 f8d5 	bl	8006560 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c2:	441a      	add	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d4:	441a      	add	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	615a      	str	r2, [r3, #20]
 80013da:	e016      	b.n	800140a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d110      	bne.n	800140a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013ee:	2208      	movs	r2, #8
 80013f0:	4619      	mov	r1, r3
 80013f2:	6a38      	ldr	r0, [r7, #32]
 80013f4:	f005 f8b4 	bl	8006560 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001404:	441a      	add	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0210 	orr.w	r2, r2, #16
 8001418:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fa32 	bl	8006888 <USB_ReadInterrupts>
 8001424:	4603      	mov	r3, r0
 8001426:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800142a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800142e:	f040 80a7 	bne.w	8001580 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fa37 	bl	80068ae <USB_ReadDevAllOutEpInterrupt>
 8001440:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001442:	e099      	b.n	8001578 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 808e 	beq.w	800156c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f005 fa5b 	bl	8006916 <USB_ReadDevOutEPInterrupt>
 8001460:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00c      	beq.n	8001486 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001478:	461a      	mov	r2, r3
 800147a:	2301      	movs	r3, #1
 800147c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800147e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fed1 	bl	8002228 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00c      	beq.n	80014aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001492:	015a      	lsls	r2, r3, #5
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	4413      	add	r3, r2
 8001498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800149c:	461a      	mov	r2, r3
 800149e:	2308      	movs	r3, #8
 80014a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 ffa7 	bl	80023f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014c0:	461a      	mov	r2, r3
 80014c2:	2310      	movs	r3, #16
 80014c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d030      	beq.n	8001532 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014d0:	6a3b      	ldr	r3, [r7, #32]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d8:	2b80      	cmp	r3, #128	@ 0x80
 80014da:	d109      	bne.n	80014f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	3304      	adds	r3, #4
 8001504:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	78db      	ldrb	r3, [r3, #3]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d108      	bne.n	8001520 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2200      	movs	r2, #0
 8001512:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f007 fdca 	bl	80090b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800152c:	461a      	mov	r2, r3
 800152e:	2302      	movs	r3, #2
 8001530:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800153c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001548:	461a      	mov	r2, r3
 800154a:	2320      	movs	r3, #32
 800154c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	015a      	lsls	r2, r3, #5
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	4413      	add	r3, r2
 8001560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001564:	461a      	mov	r2, r3
 8001566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	3301      	adds	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800157a:	2b00      	cmp	r3, #0
 800157c:	f47f af62 	bne.w	8001444 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f005 f97f 	bl	8006888 <USB_ReadInterrupts>
 800158a:	4603      	mov	r3, r0
 800158c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001590:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001594:	f040 80db 	bne.w	800174e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f005 f9a0 	bl	80068e2 <USB_ReadDevAllInEpInterrupt>
 80015a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80015a8:	e0cd      	b.n	8001746 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80c2 	beq.w	800173a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 f9c6 	bl	8006952 <USB_ReadDevInEPInterrupt>
 80015c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d057      	beq.n	8001682 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	2201      	movs	r2, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69f9      	ldr	r1, [r7, #28]
 80015ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80015f2:	4013      	ands	r3, r2
 80015f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001602:	461a      	mov	r2, r3
 8001604:	2301      	movs	r3, #1
 8001606:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	799b      	ldrb	r3, [r3, #6]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d132      	bne.n	8001676 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001614:	4613      	mov	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4413      	add	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3320      	adds	r3, #32
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4403      	add	r3, r0
 8001630:	331c      	adds	r3, #28
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4419      	add	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4403      	add	r3, r0
 8001644:	3320      	adds	r3, #32
 8001646:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	2b00      	cmp	r3, #0
 800164c:	d113      	bne.n	8001676 <HAL_PCD_IRQHandler+0x3a2>
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	4413      	add	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	3324      	adds	r3, #36	@ 0x24
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d108      	bne.n	8001676 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800166e:	461a      	mov	r2, r3
 8001670:	2101      	movs	r1, #1
 8001672:	f005 f9cd 	bl	8006a10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4619      	mov	r1, r3
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f007 fc95 	bl	8008fac <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	015a      	lsls	r2, r3, #5
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	4413      	add	r3, r2
 8001694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001698:	461a      	mov	r2, r3
 800169a:	2308      	movs	r3, #8
 800169c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b4:	461a      	mov	r2, r3
 80016b6:	2310      	movs	r3, #16
 80016b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	015a      	lsls	r2, r3, #5
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016d0:	461a      	mov	r2, r3
 80016d2:	2340      	movs	r3, #64	@ 0x40
 80016d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d023      	beq.n	8001728 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016e2:	6a38      	ldr	r0, [r7, #32]
 80016e4:	f004 f9b4 	bl	8005a50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	3310      	adds	r3, #16
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	3304      	adds	r3, #4
 80016fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	78db      	ldrb	r3, [r3, #3]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2200      	movs	r2, #0
 8001708:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f007 fce1 	bl	80090d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001722:	461a      	mov	r2, r3
 8001724:	2302      	movs	r3, #2
 8001726:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001732:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fcea 	bl	800210e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	f47f af2e 	bne.w	80015aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f005 f898 	bl	8006888 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800175e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001762:	d122      	bne.n	80017aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800178a:	2100      	movs	r1, #0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fef5 	bl	800257c <HAL_PCDEx_LPM_Callback>
 8001792:	e002      	b.n	800179a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f007 fc7f 	bl	8009098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f005 f86a 	bl	8006888 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017be:	d112      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d102      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f007 fc3b 	bl	800904c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80017e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f005 f84c 	bl	8006888 <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80017fa:	d121      	bne.n	8001840 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800180a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001812:	2b00      	cmp	r3, #0
 8001814:	d111      	bne.n	800183a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	f003 020f 	and.w	r2, r3, #15
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001830:	2101      	movs	r1, #1
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fea2 	bl	800257c <HAL_PCDEx_LPM_Callback>
 8001838:	e002      	b.n	8001840 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f007 fc06 	bl	800904c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f005 f81f 	bl	8006888 <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001854:	f040 80b7 	bne.w	80019c6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2110      	movs	r1, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f004 f8ec 	bl	8005a50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800187c:	e046      	b.n	800190c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4413      	add	r3, r2
 8001886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800188a:	461a      	mov	r2, r3
 800188c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001890:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001894:	015a      	lsls	r2, r3, #5
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	4413      	add	r3, r2
 800189a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a2:	0151      	lsls	r1, r2, #5
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	440a      	add	r2, r1
 80018a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80018ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018be:	461a      	mov	r2, r3
 80018c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80018c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d6:	0151      	lsls	r1, r2, #5
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	440a      	add	r2, r1
 80018dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80018e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f6:	0151      	lsls	r1, r2, #5
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	440a      	add	r2, r1
 80018fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001900:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001904:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001908:	3301      	adds	r3, #1
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	461a      	mov	r2, r3
 8001912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001914:	4293      	cmp	r3, r2
 8001916:	d3b2      	bcc.n	800187e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001926:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800192a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7bdb      	ldrb	r3, [r3, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d016      	beq.n	8001962 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800193a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001944:	f043 030b 	orr.w	r3, r3, #11
 8001948:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800195a:	f043 030b 	orr.w	r3, r3, #11
 800195e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001960:	e015      	b.n	800198e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001970:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001974:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001978:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001988:	f043 030b 	orr.w	r3, r3, #11
 800198c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800199c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80019a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b0:	461a      	mov	r2, r3
 80019b2:	f005 f82d 	bl	8006a10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f004 ff5c 	bl	8006888 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019da:	d123      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f004 fff2 	bl	80069ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 f8a9 	bl	8005b42 <USB_GetDevSpeed>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681c      	ldr	r4, [r3, #0]
 80019fc:	f002 f864 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8001a00:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a06:	461a      	mov	r2, r3
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f003 fda1 	bl	8005550 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f007 faf4 	bl	8008ffc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 ff2d 	bl	8006888 <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d10a      	bne.n	8001a4e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f007 fad1 	bl	8008fe0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695a      	ldr	r2, [r3, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f002 0208 	and.w	r2, r2, #8
 8001a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f004 ff18 	bl	8006888 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5e:	2b80      	cmp	r3, #128	@ 0x80
 8001a60:	d123      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a72:	e014      	b.n	8001a9e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4619      	mov	r1, r3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fb0a 	bl	80020ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d3e4      	bcc.n	8001a74 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 feea 	bl	8006888 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001abe:	d13c      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac4:	e02b      	b.n	8001b1e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3318      	adds	r3, #24
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d115      	bne.n	8001b18 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001aec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da12      	bge.n	8001b18 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	3317      	adds	r3, #23
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 faca 	bl	80020ac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	791b      	ldrb	r3, [r3, #4]
 8001b22:	461a      	mov	r2, r3
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d3cd      	bcc.n	8001ac6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fea2 	bl	8006888 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b4e:	d156      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b50:	2301      	movs	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b54:	e045      	b.n	8001be2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d12e      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b7e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	da2b      	bge.n	8001bdc <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	0c1a      	lsrs	r2, r3, #16
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001b8e:	4053      	eors	r3, r2
 8001b90:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d121      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10a      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd8:	6053      	str	r3, [r2, #4]
            break;
 8001bda:	e008      	b.n	8001bee <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	3301      	adds	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	791b      	ldrb	r3, [r3, #4]
 8001be6:	461a      	mov	r2, r3
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d3b3      	bcc.n	8001b56 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 fe40 	bl	8006888 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c12:	d10a      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f007 fa71 	bl	80090fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695a      	ldr	r2, [r3, #20]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 fe2a 	bl	8006888 <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d115      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f007 fa61 	bl	8009118 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	e000      	b.n	8001c6a <HAL_PCD_IRQHandler+0x996>
      return;
 8001c68:	bf00      	nop
    }
  }
}
 8001c6a:	3734      	adds	r7, #52	@ 0x34
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}

08001c70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_PCD_SetAddress+0x1a>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e012      	b.n	8001cb0 <HAL_PCD_SetAddress+0x40>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	78fa      	ldrb	r2, [r7, #3]
 8001c96:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 fd89 	bl	80067b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	70fb      	strb	r3, [r7, #3]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	803b      	strh	r3, [r7, #0]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	da0f      	bge.n	8001cfe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	3310      	adds	r3, #16
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
 8001cfc:	e00f      	b.n	8001d1e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 020f 	and.w	r2, r3, #15
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001d2a:	883b      	ldrh	r3, [r7, #0]
 8001d2c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	78ba      	ldrb	r2, [r7, #2]
 8001d38:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d4c:	78bb      	ldrb	r3, [r7, #2]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d102      	bne.n	8001d58 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_PCD_EP_Open+0xae>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e00e      	b.n	8001d84 <HAL_PCD_EP_Open+0xcc>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 ff09 	bl	8005b8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001d82:	7afb      	ldrb	r3, [r7, #11]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	da0f      	bge.n	8001dc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	f003 020f 	and.w	r2, r3, #15
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	3310      	adds	r3, #16
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	705a      	strb	r2, [r3, #1]
 8001dbe:	e00f      	b.n	8001de0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	f003 020f 	and.w	r2, r3, #15
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_PCD_EP_Close+0x6e>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e00e      	b.n	8001e18 <HAL_PCD_EP_Close+0x8c>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 ff47 	bl	8005c9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	f003 020f 	and.w	r2, r3, #15
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	3304      	adds	r3, #4
 8001e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e62:	7afb      	ldrb	r3, [r7, #11]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	799b      	ldrb	r3, [r3, #6]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d102      	bne.n	8001e7c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	799b      	ldrb	r3, [r3, #6]
 8001e84:	461a      	mov	r2, r3
 8001e86:	6979      	ldr	r1, [r7, #20]
 8001e88:	f003 ffe4 	bl	8005e54 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	f003 020f 	and.w	r2, r3, #15
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001eb8:	681b      	ldr	r3, [r3, #0]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	7afb      	ldrb	r3, [r7, #11]
 8001ed8:	f003 020f 	and.w	r2, r3, #15
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	3304      	adds	r3, #4
 8001eec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2201      	movs	r2, #1
 8001f04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f06:	7afb      	ldrb	r3, [r7, #11]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	799b      	ldrb	r3, [r3, #6]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	799b      	ldrb	r3, [r3, #6]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	f003 ff92 	bl	8005e54 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	7912      	ldrb	r2, [r2, #4]
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e04f      	b.n	8001ff8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da0f      	bge.n	8001f80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	f003 020f 	and.w	r2, r3, #15
 8001f66:	4613      	mov	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	3310      	adds	r3, #16
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	3304      	adds	r3, #4
 8001f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
 8001f7e:	e00d      	b.n	8001f9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	3304      	adds	r3, #4
 8001f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_PCD_EP_SetStall+0x82>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e01d      	b.n	8001ff8 <HAL_PCD_EP_SetStall+0xbe>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f004 fb20 	bl	8006610 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7999      	ldrb	r1, [r3, #6]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f004 fd11 	bl	8006a10 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	7912      	ldrb	r2, [r2, #4]
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e042      	b.n	80020a4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800201e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002022:	2b00      	cmp	r3, #0
 8002024:	da0f      	bge.n	8002046 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 020f 	and.w	r2, r3, #15
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	3310      	adds	r3, #16
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	705a      	strb	r2, [r3, #1]
 8002044:	e00f      	b.n	8002066 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	3304      	adds	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_PCD_EP_ClrStall+0x86>
 8002082:	2302      	movs	r3, #2
 8002084:	e00e      	b.n	80020a4 <HAL_PCD_EP_ClrStall+0xa4>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fb29 	bl	80066ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80020b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da0c      	bge.n	80020da <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 020f 	and.w	r2, r3, #15
 80020c6:	4613      	mov	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	3310      	adds	r3, #16
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	3304      	adds	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e00c      	b.n	80020f4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 020f 	and.w	r2, r3, #15
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 f948 	bl	8006390 <USB_EPStopXfer>
 8002100:	4603      	mov	r3, r0
 8002102:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002104:	7afb      	ldrb	r3, [r7, #11]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	@ 0x28
 8002112:	af02      	add	r7, sp, #8
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	3310      	adds	r3, #16
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	429a      	cmp	r2, r3
 8002140:	d901      	bls.n	8002146 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	d902      	bls.n	8002162 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3303      	adds	r3, #3
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800216a:	e02a      	b.n	80021c2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	429a      	cmp	r2, r3
 8002180:	d902      	bls.n	8002188 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3303      	adds	r3, #3
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68d9      	ldr	r1, [r3, #12]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4603      	mov	r3, r0
 80021a4:	6978      	ldr	r0, [r7, #20]
 80021a6:	f004 f99d 	bl	80064e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	441a      	add	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	441a      	add	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d809      	bhi.n	80021ec <PCD_WriteEmptyTxFifo+0xde>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d203      	bcs.n	80021ec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1bf      	bne.n	800216c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d811      	bhi.n	800221c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	2201      	movs	r2, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800220c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	43db      	mvns	r3, r3
 8002212:	6939      	ldr	r1, [r7, #16]
 8002214:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002218:	4013      	ands	r3, r2
 800221a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3720      	adds	r7, #32
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	333c      	adds	r3, #60	@ 0x3c
 8002240:	3304      	adds	r3, #4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	799b      	ldrb	r3, [r3, #6]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d17b      	bne.n	8002356 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4a61      	ldr	r2, [pc, #388]	@ (80023f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	f240 80b9 	bls.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80b3 	beq.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	4413      	add	r3, r2
 8002286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800228a:	461a      	mov	r2, r3
 800228c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002290:	6093      	str	r3, [r2, #8]
 8002292:	e0a7      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0320 	and.w	r3, r3, #32
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022aa:	461a      	mov	r2, r3
 80022ac:	2320      	movs	r3, #32
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	e098      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f040 8093 	bne.w	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	@ (80023f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d90f      	bls.n	80022e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022e2:	6093      	str	r3, [r2, #8]
 80022e4:	e07e      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	0159      	lsls	r1, r3, #5
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	440b      	add	r3, r1
 8002308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d114      	bne.n	8002348 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002330:	461a      	mov	r2, r3
 8002332:	2101      	movs	r1, #1
 8002334:	f004 fb6c 	bl	8006a10 <USB_EP0_OutStart>
 8002338:	e006      	b.n	8002348 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	441a      	add	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f006 fe11 	bl	8008f76 <HAL_PCD_DataOutStageCallback>
 8002354:	e046      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a26      	ldr	r2, [pc, #152]	@ (80023f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d124      	bne.n	80023a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800237a:	6093      	str	r3, [r2, #8]
 800237c:	e032      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	2320      	movs	r3, #32
 8002398:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f006 fde8 	bl	8008f76 <HAL_PCD_DataOutStageCallback>
 80023a6:	e01d      	b.n	80023e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d114      	bne.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023d0:	461a      	mov	r2, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	f004 fb1c 	bl	8006a10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f006 fdc9 	bl	8008f76 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	4f54300a 	.word	0x4f54300a
 80023f4:	4f54310a 	.word	0x4f54310a

080023f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	333c      	adds	r3, #60	@ 0x3c
 8002410:	3304      	adds	r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a15      	ldr	r2, [pc, #84]	@ (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d90e      	bls.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002434:	2b00      	cmp	r3, #0
 8002436:	d009      	beq.n	800244c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002444:	461a      	mov	r2, r3
 8002446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800244a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f006 fd80 	bl	8008f52 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <PCD_EP_OutSetupPacket_int+0x88>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d90c      	bls.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	799b      	ldrb	r3, [r3, #6]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800246c:	461a      	mov	r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	f004 face 	bl	8006a10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	4f54300a 	.word	0x4f54300a

08002484 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	4613      	mov	r3, r2
 8002492:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024a2:	883b      	ldrh	r3, [r7, #0]
 80024a4:	0419      	lsls	r1, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80024b0:	e028      	b.n	8002504 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4413      	add	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e00d      	b.n	80024e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3340      	adds	r3, #64	@ 0x40
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	4413      	add	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	3301      	adds	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d3ec      	bcc.n	80024c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024ec:	883b      	ldrh	r3, [r7, #0]
 80024ee:	0418      	lsls	r0, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	4302      	orrs	r2, r0
 80024fc:	3340      	adds	r3, #64	@ 0x40
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002566:	f043 0303 	orr.w	r3, r3, #3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800259c:	4b39      	ldr	r3, [pc, #228]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d10b      	bne.n	80025c6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b4:	d905      	bls.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80025b6:	4b33      	ldr	r3, [pc, #204]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4a32      	ldr	r2, [pc, #200]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80025bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e057      	b.n	8002676 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025cc:	d90a      	bls.n	80025e4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80025ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4313      	orrs	r3, r2
 80025da:	4a2a      	ldr	r2, [pc, #168]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e0:	60d3      	str	r3, [r2, #12]
 80025e2:	e007      	b.n	80025f4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80025ec:	4925      	ldr	r1, [pc, #148]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80025f4:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a24      	ldr	r2, [pc, #144]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	2232      	movs	r2, #50	@ 0x32
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	4a21      	ldr	r2, [pc, #132]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	3301      	adds	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002612:	e002      	b.n	800261a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3b01      	subs	r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f3      	bne.n	8002614 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01b      	beq.n	800266a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a15      	ldr	r2, [pc, #84]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	2232      	movs	r2, #50	@ 0x32
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	4a11      	ldr	r2, [pc, #68]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	3301      	adds	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002650:	e002      	b.n	8002658 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b01      	subs	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002658:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800265a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f3      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e000      	b.n	8002676 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	46020800 	.word	0x46020800
 8002688:	20000000 	.word	0x20000000
 800268c:	10624dd3 	.word	0x10624dd3

08002690 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002694:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	46020800 	.word	0x46020800

080026ac <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80026b0:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	4a04      	ldr	r2, [pc, #16]	@ (80026c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	6113      	str	r3, [r2, #16]
}
 80026bc:	bf00      	nop
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	46020800 	.word	0x46020800

080026cc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80026da:	6113      	str	r3, [r2, #16]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	46020800 	.word	0x46020800

080026ec <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80026f2:	f7ff ffcd 	bl	8002690 <HAL_PWREx_GetVoltageRange>
 80026f6:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026fe:	d003      	beq.n	8002708 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002706:	d107      	bne.n	8002718 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a05      	ldr	r2, [pc, #20]	@ (8002724 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800270e:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8002712:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	46020800 	.word	0x46020800

08002728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08e      	sub	sp, #56	@ 0x38
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	f000 bec8 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002742:	4b99      	ldr	r3, [pc, #612]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800274c:	4b96      	ldr	r3, [pc, #600]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 816c 	beq.w	8002a3c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_RCC_OscConfig+0x52>
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	2b0c      	cmp	r3, #12
 800276e:	f040 80de 	bne.w	800292e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 80da 	bne.w	800292e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d102      	bne.n	8002788 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	f000 bea5 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800278c:	4b86      	ldr	r3, [pc, #536]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_RCC_OscConfig+0x7a>
 8002798:	4b83      	ldr	r3, [pc, #524]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80027a0:	e005      	b.n	80027ae <HAL_RCC_OscConfig+0x86>
 80027a2:	4b81      	ldr	r3, [pc, #516]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80027a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d255      	bcs.n	800285e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 f9e9 	bl	8003b94 <RCC_SetFlashLatencyFromMSIRange>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f000 be82 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80027ce:	4b76      	ldr	r3, [pc, #472]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	4a75      	ldr	r2, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80027d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027d8:	6093      	str	r3, [r2, #8]
 80027da:	4b73      	ldr	r3, [pc, #460]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	4970      	ldr	r1, [pc, #448]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80027f4:	d309      	bcc.n	800280a <HAL_RCC_OscConfig+0xe2>
 80027f6:	4b6c      	ldr	r3, [pc, #432]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f023 021f 	bic.w	r2, r3, #31
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4969      	ldr	r1, [pc, #420]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002804:	4313      	orrs	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
 8002808:	e07e      	b.n	8002908 <HAL_RCC_OscConfig+0x1e0>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	da0a      	bge.n	8002828 <HAL_RCC_OscConfig+0x100>
 8002812:	4b65      	ldr	r3, [pc, #404]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	015b      	lsls	r3, r3, #5
 8002820:	4961      	ldr	r1, [pc, #388]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002822:	4313      	orrs	r3, r2
 8002824:	60cb      	str	r3, [r1, #12]
 8002826:	e06f      	b.n	8002908 <HAL_RCC_OscConfig+0x1e0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002830:	d30a      	bcc.n	8002848 <HAL_RCC_OscConfig+0x120>
 8002832:	4b5d      	ldr	r3, [pc, #372]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	029b      	lsls	r3, r3, #10
 8002840:	4959      	ldr	r1, [pc, #356]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002842:	4313      	orrs	r3, r2
 8002844:	60cb      	str	r3, [r1, #12]
 8002846:	e05f      	b.n	8002908 <HAL_RCC_OscConfig+0x1e0>
 8002848:	4b57      	ldr	r3, [pc, #348]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	03db      	lsls	r3, r3, #15
 8002856:	4954      	ldr	r1, [pc, #336]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e054      	b.n	8002908 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800285e:	4b52      	ldr	r3, [pc, #328]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4a51      	ldr	r2, [pc, #324]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002864:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002868:	6093      	str	r3, [r2, #8]
 800286a:	4b4f      	ldr	r3, [pc, #316]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	494c      	ldr	r1, [pc, #304]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002884:	d309      	bcc.n	800289a <HAL_RCC_OscConfig+0x172>
 8002886:	4b48      	ldr	r3, [pc, #288]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f023 021f 	bic.w	r2, r3, #31
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	4945      	ldr	r1, [pc, #276]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002894:	4313      	orrs	r3, r2
 8002896:	60cb      	str	r3, [r1, #12]
 8002898:	e028      	b.n	80028ec <HAL_RCC_OscConfig+0x1c4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da0a      	bge.n	80028b8 <HAL_RCC_OscConfig+0x190>
 80028a2:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	015b      	lsls	r3, r3, #5
 80028b0:	493d      	ldr	r1, [pc, #244]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60cb      	str	r3, [r1, #12]
 80028b6:	e019      	b.n	80028ec <HAL_RCC_OscConfig+0x1c4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c0:	d30a      	bcc.n	80028d8 <HAL_RCC_OscConfig+0x1b0>
 80028c2:	4b39      	ldr	r3, [pc, #228]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	4935      	ldr	r1, [pc, #212]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60cb      	str	r3, [r1, #12]
 80028d6:	e009      	b.n	80028ec <HAL_RCC_OscConfig+0x1c4>
 80028d8:	4b33      	ldr	r3, [pc, #204]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	03db      	lsls	r3, r3, #15
 80028e6:	4930      	ldr	r1, [pc, #192]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 f94c 	bl	8003b94 <RCC_SetFlashLatencyFromMSIRange>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	f000 bde5 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002908:	f001 f8de 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800290c:	4b27      	ldr	r3, [pc, #156]	@ (80029ac <HAL_RCC_OscConfig+0x284>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fea7 	bl	8000664 <HAL_InitTick>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800291c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 808a 	beq.w	8002a3a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002926:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800292a:	f000 bdd2 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d066      	beq.n	8002a04 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002936:	4b1c      	ldr	r3, [pc, #112]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002942:	f7fd ffe9 	bl	8000918 <HAL_GetTick>
 8002946:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002948:	e009      	b.n	800295e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294a:	f7fd ffe5 	bl	8000918 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d902      	bls.n	800295e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	f000 bdba 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800295e:	4b12      	ldr	r3, [pc, #72]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0ef      	beq.n	800294a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4a0e      	ldr	r2, [pc, #56]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002974:	6093      	str	r3, [r2, #8]
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	4909      	ldr	r1, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002990:	d30e      	bcc.n	80029b0 <HAL_RCC_OscConfig+0x288>
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 021f 	bic.w	r2, r3, #31
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4902      	ldr	r1, [pc, #8]	@ (80029a8 <HAL_RCC_OscConfig+0x280>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60cb      	str	r3, [r1, #12]
 80029a4:	e04a      	b.n	8002a3c <HAL_RCC_OscConfig+0x314>
 80029a6:	bf00      	nop
 80029a8:	46020c00 	.word	0x46020c00
 80029ac:	20000004 	.word	0x20000004
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	da0a      	bge.n	80029ce <HAL_RCC_OscConfig+0x2a6>
 80029b8:	4b98      	ldr	r3, [pc, #608]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	015b      	lsls	r3, r3, #5
 80029c6:	4995      	ldr	r1, [pc, #596]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
 80029cc:	e036      	b.n	8002a3c <HAL_RCC_OscConfig+0x314>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d6:	d30a      	bcc.n	80029ee <HAL_RCC_OscConfig+0x2c6>
 80029d8:	4b90      	ldr	r3, [pc, #576]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	029b      	lsls	r3, r3, #10
 80029e6:	498d      	ldr	r1, [pc, #564]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
 80029ec:	e026      	b.n	8002a3c <HAL_RCC_OscConfig+0x314>
 80029ee:	4b8b      	ldr	r3, [pc, #556]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	03db      	lsls	r3, r3, #15
 80029fc:	4987      	ldr	r1, [pc, #540]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60cb      	str	r3, [r1, #12]
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002a04:	4b85      	ldr	r3, [pc, #532]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a84      	ldr	r2, [pc, #528]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002a10:	f7fd ff82 	bl	8000918 <HAL_GetTick>
 8002a14:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002a16:	e009      	b.n	8002a2c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a18:	f7fd ff7e 	bl	8000918 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d902      	bls.n	8002a2c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	f000 bd53 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ef      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2f0>
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 808b 	beq.w	8002b60 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x334>
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d106      	bne.n	8002a6a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d17d      	bne.n	8002b60 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f000 bd34 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_OscConfig+0x35a>
 8002a74:	4b69      	ldr	r3, [pc, #420]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a68      	ldr	r2, [pc, #416]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	e041      	b.n	8002b06 <HAL_RCC_OscConfig+0x3de>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a8a:	d112      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x38a>
 8002a8c:	4b63      	ldr	r3, [pc, #396]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a62      	ldr	r2, [pc, #392]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b60      	ldr	r3, [pc, #384]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5c      	ldr	r2, [pc, #368]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e029      	b.n	8002b06 <HAL_RCC_OscConfig+0x3de>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002aba:	d112      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3ba>
 8002abc:	4b57      	ldr	r3, [pc, #348]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	4b54      	ldr	r3, [pc, #336]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a53      	ldr	r2, [pc, #332]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b51      	ldr	r3, [pc, #324]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a50      	ldr	r2, [pc, #320]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e011      	b.n	8002b06 <HAL_RCC_OscConfig+0x3de>
 8002ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a4d      	ldr	r2, [pc, #308]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b4b      	ldr	r3, [pc, #300]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a4a      	ldr	r2, [pc, #296]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b48      	ldr	r3, [pc, #288]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a47      	ldr	r2, [pc, #284]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002b04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d014      	beq.n	8002b38 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8002b0e:	f7fd ff03 	bl	8000918 <HAL_GetTick>
 8002b12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b14:	e009      	b.n	8002b2a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b16:	f7fd feff 	bl	8000918 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b64      	cmp	r3, #100	@ 0x64
 8002b22:	d902      	bls.n	8002b2a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	f000 bcd4 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ef      	beq.n	8002b16 <HAL_RCC_OscConfig+0x3ee>
 8002b36:	e013      	b.n	8002b60 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002b38:	f7fd feee 	bl	8000918 <HAL_GetTick>
 8002b3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b3e:	e009      	b.n	8002b54 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fd feea 	bl	8000918 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	@ 0x64
 8002b4c:	d902      	bls.n	8002b54 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f000 bcbf 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b54:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ef      	bne.n	8002b40 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d05f      	beq.n	8002c2c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x456>
 8002b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	d114      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d111      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f000 bca3 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	4920      	ldr	r1, [pc, #128]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ba0:	e044      	b.n	8002c2c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d024      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002baa:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002bb6:	f7fd feaf 	bl	8000918 <HAL_GetTick>
 8002bba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fd feab 	bl	8000918 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d902      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f000 bc80 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0ef      	beq.n	8002bbe <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	490b      	ldr	r1, [pc, #44]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	610b      	str	r3, [r1, #16]
 8002bf2:	e01b      	b.n	8002c2c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a08      	ldr	r2, [pc, #32]	@ (8002c1c <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bfe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002c00:	f7fd fe8a 	bl	8000918 <HAL_GetTick>
 8002c04:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fd fe86 	bl	8000918 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d904      	bls.n	8002c20 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	f000 bc5b 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
 8002c1c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c20:	4baf      	ldr	r3, [pc, #700]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ed      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80c8 	beq.w	8002dca <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c40:	4ba7      	ldr	r3, [pc, #668]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d111      	bne.n	8002c72 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4ba4      	ldr	r3, [pc, #656]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c54:	4aa2      	ldr	r2, [pc, #648]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c72:	4b9c      	ldr	r3, [pc, #624]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002c7e:	4b99      	ldr	r3, [pc, #612]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	4a98      	ldr	r2, [pc, #608]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fd fe45 	bl	8000918 <HAL_GetTick>
 8002c8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c90:	e009      	b.n	8002ca6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fd fe41 	bl	8000918 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f000 bc16 	b.w	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ef      	beq.n	8002c92 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d05f      	beq.n	8002d7a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002cba:	4b89      	ldr	r3, [pc, #548]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cc0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d037      	beq.n	8002d40 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e3f4      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01b      	beq.n	8002d2a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002cf8:	4a79      	ldr	r2, [pc, #484]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002cfa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002cfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002d02:	f7fd fe09 	bl	8000918 <HAL_GetTick>
 8002d06:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7fd fe05 	bl	8000918 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e3da      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d1c:	4b70      	ldr	r3, [pc, #448]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ef      	bne.n	8002d0a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8002d2a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d30:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	4969      	ldr	r1, [pc, #420]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002d40:	4b67      	ldr	r3, [pc, #412]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d46:	4a66      	ldr	r2, [pc, #408]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002d50:	f7fd fde2 	bl	8000918 <HAL_GetTick>
 8002d54:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fd fdde 	bl	8000918 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e3b3      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ef      	beq.n	8002d58 <HAL_RCC_OscConfig+0x630>
 8002d78:	e01b      	b.n	8002db2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002d7a:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d80:	4a57      	ldr	r2, [pc, #348]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002d82:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002d8a:	f7fd fdc5 	bl	8000918 <HAL_GetTick>
 8002d8e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d92:	f7fd fdc1 	bl	8000918 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e396      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002da4:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002daa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1ef      	bne.n	8002d92 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dba:	4b49      	ldr	r3, [pc, #292]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dc0:	4a47      	ldr	r2, [pc, #284]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002dc2:	f023 0304 	bic.w	r3, r3, #4
 8002dc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8111 	beq.w	8002ffa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dde:	4b40      	ldr	r3, [pc, #256]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d111      	bne.n	8002e10 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002dfc:	4b38      	ldr	r3, [pc, #224]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e10:	4b34      	ldr	r3, [pc, #208]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d118      	bne.n	8002e4e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002e1c:	4b31      	ldr	r3, [pc, #196]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e20:	4a30      	ldr	r2, [pc, #192]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e28:	f7fd fd76 	bl	8000918 <HAL_GetTick>
 8002e2c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fd fd72 	bl	8000918 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e347      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002e42:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_OscConfig+0x7bc>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01f      	beq.n	8002e9a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002e6e:	f043 0304 	orr.w	r3, r3, #4
 8002e72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e86:	e018      	b.n	8002eba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e8e:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e98:	e00f      	b.n	8002eba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee0 <HAL_RCC_OscConfig+0x7b8>)
 8002eb2:	f023 0304 	bic.w	r3, r3, #4
 8002eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d057      	beq.n	8002f72 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002ec2:	f7fd fd29 	bl	8000918 <HAL_GetTick>
 8002ec6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fd fd25 	bl	8000918 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d905      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e2f8      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
 8002ee0:	46020c00 	.word	0x46020c00
 8002ee4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee8:	4b9c      	ldr	r3, [pc, #624]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0e9      	beq.n	8002eca <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01b      	beq.n	8002f3a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f02:	4b96      	ldr	r3, [pc, #600]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f08:	4a94      	ldr	r2, [pc, #592]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd fd00 	bl	8000918 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e2d3      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f2a:	4b8c      	ldr	r3, [pc, #560]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0ed      	beq.n	8002f14 <HAL_RCC_OscConfig+0x7ec>
 8002f38:	e053      	b.n	8002fe2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f3a:	4b88      	ldr	r3, [pc, #544]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f40:	4a86      	ldr	r2, [pc, #536]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fd fce4 	bl	8000918 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e2b7      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f62:	4b7e      	ldr	r3, [pc, #504]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ed      	bne.n	8002f4c <HAL_RCC_OscConfig+0x824>
 8002f70:	e037      	b.n	8002fe2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002f72:	f7fd fcd1 	bl	8000918 <HAL_GetTick>
 8002f76:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fd fccd 	bl	8000918 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e2a0      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	4b72      	ldr	r3, [pc, #456]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ed      	bne.n	8002f7a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01a      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fac:	4b6b      	ldr	r3, [pc, #428]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fd fcab 	bl	8000918 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e27e      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fd4:	4b61      	ldr	r3, [pc, #388]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ed      	bne.n	8002fbe <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b5c      	ldr	r3, [pc, #368]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8002ff2:	f023 0304 	bic.w	r3, r3, #4
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d036      	beq.n	8003074 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d019      	beq.n	8003042 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800300e:	4b53      	ldr	r3, [pc, #332]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a52      	ldr	r2, [pc, #328]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003014:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003018:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800301a:	f7fd fc7d 	bl	8000918 <HAL_GetTick>
 800301e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003022:	f7fd fc79 	bl	8000918 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e24e      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003034:	4b49      	ldr	r3, [pc, #292]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x8fa>
 8003040:	e018      	b.n	8003074 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003042:	4b46      	ldr	r3, [pc, #280]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a45      	ldr	r2, [pc, #276]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003048:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800304c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800304e:	f7fd fc63 	bl	8000918 <HAL_GetTick>
 8003052:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003056:	f7fd fc5f 	bl	8000918 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e234      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003068:	4b3c      	ldr	r3, [pc, #240]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d036      	beq.n	80030ee <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003084:	2b00      	cmp	r3, #0
 8003086:	d019      	beq.n	80030bc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003088:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a33      	ldr	r2, [pc, #204]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 800308e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003092:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003094:	f7fd fc40 	bl	8000918 <HAL_GetTick>
 8003098:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800309c:	f7fd fc3c 	bl	8000918 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e211      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80030ae:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x974>
 80030ba:	e018      	b.n	80030ee <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80030bc:	4b27      	ldr	r3, [pc, #156]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a26      	ldr	r2, [pc, #152]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 80030c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80030c8:	f7fd fc26 	bl	8000918 <HAL_GetTick>
 80030cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80030d0:	f7fd fc22 	bl	8000918 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1f7      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80030e2:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d07f      	beq.n	80031fa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d062      	beq.n	80031c8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	4a15      	ldr	r2, [pc, #84]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003108:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800310c:	6093      	str	r3, [r2, #8]
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	4910      	ldr	r1, [pc, #64]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003128:	d309      	bcc.n	800313e <HAL_RCC_OscConfig+0xa16>
 800312a:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f023 021f 	bic.w	r2, r3, #31
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4909      	ldr	r1, [pc, #36]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003138:	4313      	orrs	r3, r2
 800313a:	60cb      	str	r3, [r1, #12]
 800313c:	e02a      	b.n	8003194 <HAL_RCC_OscConfig+0xa6c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	2b00      	cmp	r3, #0
 8003144:	da0c      	bge.n	8003160 <HAL_RCC_OscConfig+0xa38>
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	015b      	lsls	r3, r3, #5
 8003154:	4901      	ldr	r1, [pc, #4]	@ (800315c <HAL_RCC_OscConfig+0xa34>)
 8003156:	4313      	orrs	r3, r2
 8003158:	60cb      	str	r3, [r1, #12]
 800315a:	e01b      	b.n	8003194 <HAL_RCC_OscConfig+0xa6c>
 800315c:	46020c00 	.word	0x46020c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003168:	d30a      	bcc.n	8003180 <HAL_RCC_OscConfig+0xa58>
 800316a:	4ba1      	ldr	r3, [pc, #644]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	029b      	lsls	r3, r3, #10
 8003178:	499d      	ldr	r1, [pc, #628]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800317a:	4313      	orrs	r3, r2
 800317c:	60cb      	str	r3, [r1, #12]
 800317e:	e009      	b.n	8003194 <HAL_RCC_OscConfig+0xa6c>
 8003180:	4b9b      	ldr	r3, [pc, #620]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	03db      	lsls	r3, r3, #15
 800318e:	4998      	ldr	r1, [pc, #608]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003194:	4b96      	ldr	r3, [pc, #600]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a95      	ldr	r2, [pc, #596]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800319a:	f043 0310 	orr.w	r3, r3, #16
 800319e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031a0:	f7fd fbba 	bl	8000918 <HAL_GetTick>
 80031a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80031a8:	f7fd fbb6 	bl	8000918 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e18b      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80031ba:	4b8d      	ldr	r3, [pc, #564]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xa80>
 80031c6:	e018      	b.n	80031fa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80031c8:	4b89      	ldr	r3, [pc, #548]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a88      	ldr	r2, [pc, #544]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80031d4:	f7fd fba0 	bl	8000918 <HAL_GetTick>
 80031d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80031dc:	f7fd fb9c 	bl	8000918 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e171      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80031ee:	4b80      	ldr	r3, [pc, #512]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8166 	beq.w	80034d0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003204:	2300      	movs	r3, #0
 8003206:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320a:	4b79      	ldr	r3, [pc, #484]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	2b0c      	cmp	r3, #12
 8003214:	f000 80f2 	beq.w	80033fc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 80c5 	bne.w	80033ac <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b73      	ldr	r3, [pc, #460]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a72      	ldr	r2, [pc, #456]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003228:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800322c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800322e:	f7fd fb73 	bl	8000918 <HAL_GetTick>
 8003232:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7fd fb6f 	bl	8000918 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e144      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003248:	4b69      	ldr	r3, [pc, #420]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003254:	4b66      	ldr	r3, [pc, #408]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d111      	bne.n	8003286 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	4b63      	ldr	r3, [pc, #396]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003268:	4a61      	ldr	r2, [pc, #388]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003272:	4b5f      	ldr	r3, [pc, #380]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003286:	4b5b      	ldr	r3, [pc, #364]	@ (80033f4 <HAL_RCC_OscConfig+0xccc>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800328e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800329a:	4b56      	ldr	r3, [pc, #344]	@ (80033f4 <HAL_RCC_OscConfig+0xccc>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a55      	ldr	r2, [pc, #340]	@ (80033f4 <HAL_RCC_OscConfig+0xccc>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80032a6:	4b52      	ldr	r3, [pc, #328]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80032ba:	3a01      	subs	r2, #1
 80032bc:	0212      	lsls	r2, r2, #8
 80032be:	4311      	orrs	r1, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80032c4:	430a      	orrs	r2, r1
 80032c6:	494a      	ldr	r1, [pc, #296]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80032cc:	4b48      	ldr	r3, [pc, #288]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80032ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d0:	4b49      	ldr	r3, [pc, #292]	@ (80033f8 <HAL_RCC_OscConfig+0xcd0>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032d8:	3a01      	subs	r2, #1
 80032da:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80032e2:	3a01      	subs	r2, #1
 80032e4:	0252      	lsls	r2, r2, #9
 80032e6:	b292      	uxth	r2, r2
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80032ee:	3a01      	subs	r2, #1
 80032f0:	0412      	lsls	r2, r2, #16
 80032f2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80032fc:	3a01      	subs	r2, #1
 80032fe:	0612      	lsls	r2, r2, #24
 8003300:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003304:	430a      	orrs	r2, r1
 8003306:	493a      	ldr	r1, [pc, #232]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003308:	4313      	orrs	r3, r2
 800330a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800330c:	4b38      	ldr	r3, [pc, #224]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	4a37      	ldr	r2, [pc, #220]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003312:	f023 0310 	bic.w	r3, r3, #16
 8003316:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	4a34      	ldr	r2, [pc, #208]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003322:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	4a32      	ldr	r2, [pc, #200]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003328:	f043 0310 	orr.w	r3, r3, #16
 800332c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800332e:	4b30      	ldr	r3, [pc, #192]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	f023 020c 	bic.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333a:	492d      	ldr	r1, [pc, #180]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003340:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003348:	4b2a      	ldr	r3, [pc, #168]	@ (80033f4 <HAL_RCC_OscConfig+0xccc>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a29      	ldr	r2, [pc, #164]	@ (80033f4 <HAL_RCC_OscConfig+0xccc>)
 800334e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003352:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003354:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b24      	ldr	r3, [pc, #144]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003362:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800336c:	4b20      	ldr	r3, [pc, #128]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1f      	ldr	r2, [pc, #124]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003376:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003378:	f7fd face 	bl	8000918 <HAL_GetTick>
 800337c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd faca 	bl	8000918 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e09f      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003392:	4b17      	ldr	r3, [pc, #92]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800339e:	4b14      	ldr	r3, [pc, #80]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	4a13      	ldr	r2, [pc, #76]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a8:	6293      	str	r3, [r2, #40]	@ 0x28
 80033aa:	e091      	b.n	80034d0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80033ac:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0f      	ldr	r2, [pc, #60]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80033b8:	f7fd faae 	bl	8000918 <HAL_GetTick>
 80033bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd faaa 	bl	8000918 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033d2:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80033de:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80033e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e2:	4a03      	ldr	r2, [pc, #12]	@ (80033f0 <HAL_RCC_OscConfig+0xcc8>)
 80033e4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80033e8:	f023 0303 	bic.w	r3, r3, #3
 80033ec:	6293      	str	r3, [r2, #40]	@ 0x28
 80033ee:	e06f      	b.n	80034d0 <HAL_RCC_OscConfig+0xda8>
 80033f0:	46020c00 	.word	0x46020c00
 80033f4:	46020800 	.word	0x46020800
 80033f8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80033fc:	4b37      	ldr	r3, [pc, #220]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003402:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 8003404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003406:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	2b01      	cmp	r3, #1
 800340e:	d039      	beq.n	8003484 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d132      	bne.n	8003484 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d129      	bne.n	8003484 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d122      	bne.n	8003484 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003448:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d11a      	bne.n	8003484 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	0a5b      	lsrs	r3, r3, #9
 8003452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d111      	bne.n	8003484 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d108      	bne.n	8003484 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	0e1b      	lsrs	r3, r3, #24
 8003476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e024      	b.n	80034d2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003488:	4b14      	ldr	r3, [pc, #80]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003496:	429a      	cmp	r2, r3
 8003498:	d01a      	beq.n	80034d0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800349a:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	4a0f      	ldr	r2, [pc, #60]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 80034a0:	f023 0310 	bic.w	r3, r3, #16
 80034a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fd fa37 	bl	8000918 <HAL_GetTick>
 80034aa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80034ac:	bf00      	nop
 80034ae:	f7fd fa33 	bl	8000918 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d0f9      	beq.n	80034ae <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	4a07      	ldr	r2, [pc, #28]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80034c4:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_RCC_OscConfig+0xdb4>)
 80034ca:	f043 0310 	orr.w	r3, r3, #16
 80034ce:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3738      	adds	r7, #56	@ 0x38
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	46020c00 	.word	0x46020c00

080034e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e1d9      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003764 <HAL_RCC_ClockConfig+0x284>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d910      	bls.n	8003524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b98      	ldr	r3, [pc, #608]	@ (8003764 <HAL_RCC_ClockConfig+0x284>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	4996      	ldr	r1, [pc, #600]	@ (8003764 <HAL_RCC_ClockConfig+0x284>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b94      	ldr	r3, [pc, #592]	@ (8003764 <HAL_RCC_ClockConfig+0x284>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e1c1      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	4b8c      	ldr	r3, [pc, #560]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800353c:	429a      	cmp	r2, r3
 800353e:	d908      	bls.n	8003552 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003540:	4b89      	ldr	r3, [pc, #548]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	4986      	ldr	r1, [pc, #536]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 800354e:	4313      	orrs	r3, r2
 8003550:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d012      	beq.n	8003584 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	4b81      	ldr	r3, [pc, #516]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	091b      	lsrs	r3, r3, #4
 8003568:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800356c:	429a      	cmp	r2, r3
 800356e:	d909      	bls.n	8003584 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003570:	4b7d      	ldr	r3, [pc, #500]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	497a      	ldr	r1, [pc, #488]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003580:	4313      	orrs	r3, r2
 8003582:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d010      	beq.n	80035b2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4b74      	ldr	r3, [pc, #464]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800359c:	429a      	cmp	r2, r3
 800359e:	d908      	bls.n	80035b2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80035a0:	4b71      	ldr	r3, [pc, #452]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	496e      	ldr	r1, [pc, #440]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d010      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	4b69      	ldr	r3, [pc, #420]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d908      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80035ce:	4b66      	ldr	r3, [pc, #408]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 020f 	bic.w	r2, r3, #15
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4963      	ldr	r1, [pc, #396]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80d2 	beq.w	8003792 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d143      	bne.n	8003682 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d110      	bne.n	800362a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b57      	ldr	r3, [pc, #348]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360e:	4a56      	ldr	r2, [pc, #344]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800362a:	f7fd f975 	bl	8000918 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003630:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <HAL_RCC_ClockConfig+0x28c>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800363e:	f7fd f96b 	bl	8000918 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e12b      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003650:	4b46      	ldr	r3, [pc, #280]	@ (800376c <HAL_RCC_ClockConfig+0x28c>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003662:	4b41      	ldr	r3, [pc, #260]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003668:	4a3f      	ldr	r2, [pc, #252]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 800366a:	f023 0304 	bic.w	r3, r3, #4
 800366e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003672:	4b3d      	ldr	r3, [pc, #244]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d121      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e112      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368a:	4b37      	ldr	r3, [pc, #220]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d115      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e106      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80036a2:	4b31      	ldr	r3, [pc, #196]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0fa      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0f2      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80036c2:	4b29      	ldr	r3, [pc, #164]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f023 0203 	bic.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4926      	ldr	r1, [pc, #152]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80036d4:	f7fd f920 	bl	8000918 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b03      	cmp	r3, #3
 80036e0:	d112      	bne.n	8003708 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7fd f918 	bl	8000918 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0d6      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d1ee      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x204>
 8003706:	e044      	b.n	8003792 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d112      	bne.n	8003736 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003712:	f7fd f901 	bl	8000918 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0bf      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003728:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d1ee      	bne.n	8003712 <HAL_RCC_ClockConfig+0x232>
 8003734:	e02d      	b.n	8003792 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d123      	bne.n	8003786 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800373e:	e00a      	b.n	8003756 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003740:	f7fd f8ea 	bl	8000918 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e0a8      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <HAL_RCC_ClockConfig+0x288>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ee      	bne.n	8003740 <HAL_RCC_ClockConfig+0x260>
 8003762:	e016      	b.n	8003792 <HAL_RCC_ClockConfig+0x2b2>
 8003764:	40022000 	.word	0x40022000
 8003768:	46020c00 	.word	0x46020c00
 800376c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fd f8d2 	bl	8000918 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e090      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003786:	4b4a      	ldr	r3, [pc, #296]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d1ee      	bne.n	8003770 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d010      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	4b43      	ldr	r3, [pc, #268]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d208      	bcs.n	80037c0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80037ae:	4b40      	ldr	r3, [pc, #256]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f023 020f 	bic.w	r2, r3, #15
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	493d      	ldr	r1, [pc, #244]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b3c      	ldr	r3, [pc, #240]	@ (80038b4 <HAL_RCC_ClockConfig+0x3d4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d210      	bcs.n	80037f0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b39      	ldr	r3, [pc, #228]	@ (80038b4 <HAL_RCC_ClockConfig+0x3d4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 020f 	bic.w	r2, r3, #15
 80037d6:	4937      	ldr	r1, [pc, #220]	@ (80038b4 <HAL_RCC_ClockConfig+0x3d4>)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037de:	4b35      	ldr	r3, [pc, #212]	@ (80038b4 <HAL_RCC_ClockConfig+0x3d4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e05b      	b.n	80038a8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	4b2b      	ldr	r3, [pc, #172]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003808:	429a      	cmp	r2, r3
 800380a:	d208      	bcs.n	800381e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b28      	ldr	r3, [pc, #160]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4925      	ldr	r1, [pc, #148]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003838:	429a      	cmp	r2, r3
 800383a:	d209      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800383c:	4b1c      	ldr	r3, [pc, #112]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	4919      	ldr	r1, [pc, #100]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 800384c:	4313      	orrs	r3, r2
 800384e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d010      	beq.n	800387e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003868:	429a      	cmp	r2, r3
 800386a:	d208      	bcs.n	800387e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800386c:	4b10      	ldr	r3, [pc, #64]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	490d      	ldr	r1, [pc, #52]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800387e:	f000 f821 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_RCC_ClockConfig+0x3d0>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	490a      	ldr	r1, [pc, #40]	@ (80038b8 <HAL_RCC_ClockConfig+0x3d8>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
 8003894:	4a09      	ldr	r2, [pc, #36]	@ (80038bc <HAL_RCC_ClockConfig+0x3dc>)
 8003896:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003898:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <HAL_RCC_ClockConfig+0x3e0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fc fee1 	bl	8000664 <HAL_InitTick>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	46020c00 	.word	0x46020c00
 80038b4:	40022000 	.word	0x40022000
 80038b8:	080095a8 	.word	0x080095a8
 80038bc:	20000000 	.word	0x20000000
 80038c0:	20000004 	.word	0x20000004

080038c4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b08b      	sub	sp, #44	@ 0x2c
 80038c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d2:	4b78      	ldr	r3, [pc, #480]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038dc:	4b75      	ldr	r3, [pc, #468]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x34>
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	d121      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d11e      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80038f8:	4b6e      	ldr	r3, [pc, #440]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d107      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003904:	4b6b      	ldr	r3, [pc, #428]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800390a:	0b1b      	lsrs	r3, r3, #12
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
 8003912:	e005      	b.n	8003920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003914:	4b67      	ldr	r3, [pc, #412]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	0f1b      	lsrs	r3, r3, #28
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003920:	4a65      	ldr	r2, [pc, #404]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d110      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003934:	e00d      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003936:	4b5f      	ldr	r3, [pc, #380]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d102      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003942:	4b5e      	ldr	r3, [pc, #376]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003944:	623b      	str	r3, [r7, #32]
 8003946:	e004      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	2b08      	cmp	r3, #8
 800394c:	d101      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800394e:	4b5b      	ldr	r3, [pc, #364]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003950:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b0c      	cmp	r3, #12
 8003956:	f040 80a5 	bne.w	8003aa4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800395a:	4b56      	ldr	r3, [pc, #344]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003964:	4b53      	ldr	r3, [pc, #332]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	0a1b      	lsrs	r3, r3, #8
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003972:	4b50      	ldr	r3, [pc, #320]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800397e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	08db      	lsrs	r3, r3, #3
 8003984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	fb02 f303 	mul.w	r3, r2, r3
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d003      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d022      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x128>
 80039a6:	e043      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003ac0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80039bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80039ce:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003ac4 <HAL_RCC_GetSysClockFreq+0x200>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80039da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ea:	e046      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003ac0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a0e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a12:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003ac4 <HAL_RCC_GetSysClockFreq+0x200>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a2e:	e024      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	ee07 3a90 	vmov	s15, r3
 8003a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a48:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a58:	ed97 6a01 	vldr	s12, [r7, #4]
 8003a5c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003ac4 <HAL_RCC_GetSysClockFreq+0x200>
 8003a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003a68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a78:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	0e1b      	lsrs	r3, r3, #24
 8003a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a84:	3301      	adds	r3, #1
 8003a86:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9e:	ee17 3a90 	vmov	r3, s15
 8003aa2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	372c      	adds	r7, #44	@ 0x2c
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	46020c00 	.word	0x46020c00
 8003ab8:	080095c0 	.word	0x080095c0
 8003abc:	00f42400 	.word	0x00f42400
 8003ac0:	4b742400 	.word	0x4b742400
 8003ac4:	46000000 	.word	0x46000000

08003ac8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003acc:	f7ff fefa 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <HAL_RCC_GetHCLKFreq+0x28>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4906      	ldr	r1, [pc, #24]	@ (8003af4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	4a05      	ldr	r2, [pc, #20]	@ (8003af8 <HAL_RCC_GetHCLKFreq+0x30>)
 8003ae4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003ae6:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <HAL_RCC_GetHCLKFreq+0x30>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	46020c00 	.word	0x46020c00
 8003af4:	080095a8 	.word	0x080095a8
 8003af8:	20000000 	.word	0x20000000

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8003b00:	f7ff ffe2 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	@ (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	46020c00 	.word	0x46020c00
 8003b20:	080095b8 	.word	0x080095b8

08003b24 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	221f      	movs	r2, #31
 8003b32:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8003b34:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <HAL_RCC_GetClockConfig+0x68>)
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 0203 	and.w	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8003b40:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_RCC_GetClockConfig+0x68>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f003 020f 	and.w	r2, r3, #15
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <HAL_RCC_GetClockConfig+0x68>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <HAL_RCC_GetClockConfig+0x68>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <HAL_RCC_GetClockConfig+0x68>)
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b72:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <HAL_RCC_GetClockConfig+0x6c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 020f 	and.w	r2, r3, #15
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	601a      	str	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	46020c00 	.word	0x46020c00
 8003b90:	40022000 	.word	0x40022000

08003b94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003baa:	f7fe fd71 	bl	8002690 <HAL_PWREx_GetVoltageRange>
 8003bae:	6178      	str	r0, [r7, #20]
 8003bb0:	e019      	b.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	4b39      	ldr	r3, [pc, #228]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb8:	4a37      	ldr	r2, [pc, #220]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bba:	f043 0304 	orr.w	r3, r3, #4
 8003bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003bc2:	4b35      	ldr	r3, [pc, #212]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7fe fd5e 	bl	8002690 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bd6:	4b30      	ldr	r3, [pc, #192]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003bde:	f023 0304 	bic.w	r3, r3, #4
 8003be2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bec:	d003      	beq.n	8003bf6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bf4:	d109      	bne.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bfc:	d202      	bcs.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003bfe:	2301      	movs	r3, #1
 8003c00:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c02:	e033      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003c08:	e030      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c10:	d208      	bcs.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c18:	d102      	bne.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e025      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e035      	b.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c2a:	d90f      	bls.n	8003c4c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c38:	d902      	bls.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e015      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e012      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e00f      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c52:	d109      	bne.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c5a:	d102      	bne.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	e004      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003c62:	2302      	movs	r3, #2
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e001      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003c68:	2301      	movs	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 020f 	bic.w	r2, r3, #15
 8003c74:	4909      	ldr	r1, [pc, #36]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003c7c:	4b07      	ldr	r3, [pc, #28]	@ (8003c9c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d001      	beq.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	46020c00 	.word	0x46020c00
 8003c9c:	40022000 	.word	0x40022000

08003ca0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca4:	b0c8      	sub	sp, #288	@ 0x120
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f002 0401 	and.w	r4, r2, #1
 8003cc4:	2500      	movs	r5, #0
 8003cc6:	ea54 0305 	orrs.w	r3, r4, r5
 8003cca:	d00b      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003ccc:	4bd5      	ldr	r3, [pc, #852]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cd2:	f023 0103 	bic.w	r1, r3, #3
 8003cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cdc:	4ad1      	ldr	r2, [pc, #836]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f002 0802 	and.w	r8, r2, #2
 8003cf0:	f04f 0900 	mov.w	r9, #0
 8003cf4:	ea58 0309 	orrs.w	r3, r8, r9
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003cfa:	4bca      	ldr	r3, [pc, #808]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d00:	f023 010c 	bic.w	r1, r3, #12
 8003d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	4ac6      	ldr	r2, [pc, #792]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1a:	f002 0a04 	and.w	sl, r2, #4
 8003d1e:	f04f 0b00 	mov.w	fp, #0
 8003d22:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d26:	d00b      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003d28:	4bbe      	ldr	r3, [pc, #760]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d2e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d38:	4aba      	ldr	r2, [pc, #744]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f002 0308 	and.w	r3, r2, #8
 8003d4c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d56:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003d60:	4bb0      	ldr	r3, [pc, #704]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d70:	4aac      	ldr	r2, [pc, #688]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d72:	430b      	orrs	r3, r1
 8003d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f002 0310 	and.w	r3, r2, #16
 8003d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003d98:	4ba2      	ldr	r3, [pc, #648]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da8:	4a9e      	ldr	r2, [pc, #632]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003daa:	430b      	orrs	r3, r1
 8003dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	d00b      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003dd0:	4b94      	ldr	r3, [pc, #592]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003dd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003de0:	4a90      	ldr	r2, [pc, #576]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003de2:	430b      	orrs	r3, r1
 8003de4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f002 0320 	and.w	r3, r2, #32
 8003df4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003dfe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003e08:	4b86      	ldr	r3, [pc, #536]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e0e:	f023 0107 	bic.w	r1, r3, #7
 8003e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e18:	4a82      	ldr	r2, [pc, #520]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e30:	2300      	movs	r3, #0
 8003e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003e40:	4b78      	ldr	r3, [pc, #480]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e46:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e50:	4a74      	ldr	r2, [pc, #464]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	4313      	orrs	r3, r2
 8003e76:	d00b      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003e78:	4b6a      	ldr	r3, [pc, #424]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	4a66      	ldr	r2, [pc, #408]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ea6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4313      	orrs	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003eb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec0:	4a58      	ldr	r2, [pc, #352]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ede:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003eee:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef8:	4a4a      	ldr	r2, [pc, #296]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003efa:	430b      	orrs	r3, r1
 8003efc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003f20:	4b40      	ldr	r3, [pc, #256]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f26:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f30:	4a3c      	ldr	r2, [pc, #240]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d00c      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003f58:	4b32      	ldr	r3, [pc, #200]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f5e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f88:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d00c      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003f92:	4b24      	ldr	r3, [pc, #144]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f98:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fc2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	d00c      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003fcc:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	4a11      	ldr	r2, [pc, #68]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ffc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004000:	460b      	mov	r3, r1
 8004002:	4313      	orrs	r3, r2
 8004004:	d010      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004006:	4b07      	ldr	r3, [pc, #28]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800400c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004018:	4a02      	ldr	r2, [pc, #8]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800401a:	430b      	orrs	r3, r1
 800401c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8004022:	bf00      	nop
 8004024:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800403e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d04c      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800404c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004050:	2b80      	cmp	r3, #128	@ 0x80
 8004052:	d02d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004054:	2b80      	cmp	r3, #128	@ 0x80
 8004056:	d827      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004058:	2b60      	cmp	r3, #96	@ 0x60
 800405a:	d02b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800405c:	2b60      	cmp	r3, #96	@ 0x60
 800405e:	d823      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d006      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004064:	2b40      	cmp	r3, #64	@ 0x40
 8004066:	d81f      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800406c:	2b20      	cmp	r3, #32
 800406e:	d011      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004070:	e01a      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004072:	4bc0      	ldr	r3, [pc, #768]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	4abf      	ldr	r2, [pc, #764]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800407c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800407e:	e01a      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004084:	3308      	adds	r3, #8
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fd42 	bl	8004b10 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004092:	e010      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004098:	332c      	adds	r3, #44	@ 0x2c
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fdd0 	bl	8004c40 <RCCEx_PLL3_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80040a6:	e006      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80040ae:	e002      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80040b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10d      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80040be:	4bad      	ldr	r3, [pc, #692]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80040c4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80040c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040d0:	4aa8      	ldr	r2, [pc, #672]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80040d2:	430b      	orrs	r3, r1
 80040d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80040de:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80040ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040fc:	460b      	mov	r3, r1
 80040fe:	4313      	orrs	r3, r2
 8004100:	d053      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800410e:	d033      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8004110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004114:	d82c      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800411a:	d02f      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800411c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004120:	d826      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8004128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412c:	d820      	bhi.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004136:	d011      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004138:	e01a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800413a:	4b8e      	ldr	r3, [pc, #568]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	4a8d      	ldr	r2, [pc, #564]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004146:	e01a      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800414c:	3308      	adds	r3, #8
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fcde 	bl	8004b10 <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800415a:	e010      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800415c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004160:	332c      	adds	r3, #44	@ 0x2c
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd6c 	bl	8004c40 <RCCEx_PLL3_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800416e:	e006      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004176:	e002      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800417c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800417e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10d      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004186:	4b7b      	ldr	r3, [pc, #492]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004188:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800418c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004194:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004198:	4a76      	ldr	r2, [pc, #472]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800419a:	430b      	orrs	r3, r1
 800419c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80041a6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80041aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80041b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041ba:	2300      	movs	r3, #0
 80041bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041c4:	460b      	mov	r3, r1
 80041c6:	4313      	orrs	r3, r2
 80041c8:	d046      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041d6:	d028      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80041d8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041dc:	d821      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80041de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e2:	d022      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80041e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041e8:	d81b      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80041ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041ee:	d01c      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80041f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041f4:	d815      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004200:	d80f      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d011      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8004206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420a:	d00e      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800420c:	e009      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800420e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004212:	3308      	adds	r3, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fc7b 	bl	8004b10 <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 800422a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10d      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004234:	4b4f      	ldr	r3, [pc, #316]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800423a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800423e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004246:	4a4b      	ldr	r2, [pc, #300]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004248:	430b      	orrs	r3, r1
 800424a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800424e:	e003      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004254:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004264:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800426e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d03f      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004278:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800427c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004280:	2b04      	cmp	r3, #4
 8004282:	d81e      	bhi.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8004284:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042cb 	.word	0x080042cb
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042af 	.word	0x080042af
 8004298:	080042cb 	.word	0x080042cb
 800429c:	080042cb 	.word	0x080042cb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042a0:	4b34      	ldr	r3, [pc, #208]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	4a33      	ldr	r2, [pc, #204]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80042ac:	e00e      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042b2:	332c      	adds	r3, #44	@ 0x2c
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fcc3 	bl	8004c40 <RCCEx_PLL3_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80042c0:	e004      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80042c8:	e000      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 80042ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 80042cc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10d      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80042d4:	4b27      	ldr	r3, [pc, #156]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042da:	f023 0107 	bic.w	r1, r3, #7
 80042de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e6:	4a23      	ldr	r2, [pc, #140]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80042f4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80042f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004304:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004306:	2300      	movs	r3, #0
 8004308:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800430a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d04c      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004314:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004318:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800431c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004320:	d02a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8004322:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004326:	d821      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004328:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800432c:	d026      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800432e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004332:	d81b      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004334:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004338:	d00e      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800433a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800433e:	d815      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01d      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004348:	d110      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800434a:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	4a09      	ldr	r2, [pc, #36]	@ (8004374 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004356:	e014      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800435c:	332c      	adds	r3, #44	@ 0x2c
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fc6e 	bl	8004c40 <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800436a:	e00a      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004372:	e006      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004374:	46020c00 	.word	0x46020c00
        break;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8004380:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004382:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10d      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800438a:	4baf      	ldr	r3, [pc, #700]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800438c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004390:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004398:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800439c:	4aaa      	ldr	r2, [pc, #680]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800439e:	430b      	orrs	r3, r1
 80043a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80043aa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80043bc:	2300      	movs	r3, #0
 80043be:	677b      	str	r3, [r7, #116]	@ 0x74
 80043c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043c4:	460b      	mov	r3, r1
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f000 80b5 	beq.w	8004536 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d2:	4b9d      	ldr	r3, [pc, #628]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d113      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b99      	ldr	r3, [pc, #612]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e6:	4a98      	ldr	r2, [pc, #608]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80043e8:	f043 0304 	orr.w	r3, r3, #4
 80043ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80043f0:	4b95      	ldr	r3, [pc, #596]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80043fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004408:	4b90      	ldr	r3, [pc, #576]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	4a8f      	ldr	r2, [pc, #572]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004414:	f7fc fa80 	bl	8000918 <HAL_GetTick>
 8004418:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800441c:	e00b      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7fc fa7b 	bl	8000918 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d903      	bls.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004434:	e005      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004436:	4b85      	ldr	r3, [pc, #532]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0ed      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8004442:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004446:	2b00      	cmp	r3, #0
 8004448:	d165      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800444a:	4b7f      	ldr	r3, [pc, #508]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800444c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004454:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8004460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004464:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004468:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800446c:	4293      	cmp	r3, r2
 800446e:	d01b      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004470:	4b75      	ldr	r3, [pc, #468]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800447e:	4b72      	ldr	r3, [pc, #456]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004484:	4a70      	ldr	r2, [pc, #448]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800448e:	4b6e      	ldr	r3, [pc, #440]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004494:	4a6c      	ldr	r2, [pc, #432]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800449a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800449e:	4a6a      	ldr	r2, [pc, #424]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80044a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d019      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fc fa30 	bl	8000918 <HAL_GetTick>
 80044b8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044bc:	e00d      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fc fa2b 	bl	8000918 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	1ad2      	subs	r2, r2, r3
 80044ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d903      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 80044d8:	e006      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044da:	4b5b      	ldr	r3, [pc, #364]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80044dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ea      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 80044e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10d      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80044f0:	4b55      	ldr	r3, [pc, #340]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80044f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004502:	4a51      	ldr	r2, [pc, #324]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004504:	430b      	orrs	r3, r1
 8004506:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800450a:	e008      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800450c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004510:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800451a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800451e:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004526:	4b48      	ldr	r3, [pc, #288]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800452c:	4a46      	ldr	r2, [pc, #280]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800452e:	f023 0304 	bic.w	r3, r3, #4
 8004532:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004542:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004544:	2300      	movs	r3, #0
 8004546:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004548:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800454c:	460b      	mov	r3, r1
 800454e:	4313      	orrs	r3, r2
 8004550:	d042      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800455a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800455e:	d022      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8004560:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004564:	d81b      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8004566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800456a:	d011      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800456c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004570:	d815      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d019      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004576:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800457a:	d110      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800457c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004580:	3308      	adds	r3, #8
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fac4 	bl	8004b10 <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800458e:	e00d      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004590:	4b2d      	ldr	r3, [pc, #180]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	4a2c      	ldr	r2, [pc, #176]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800459a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800459c:	e006      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80045a4:	e002      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80045a6:	bf00      	nop
 80045a8:	e000      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80045aa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80045ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10d      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80045b4:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80045b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80045be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80045c6:	4a20      	ldr	r2, [pc, #128]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80045d4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80045e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045e6:	2300      	movs	r3, #0
 80045e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045ee:	460b      	mov	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	d031      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80045f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004600:	d00b      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8004602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004606:	d804      	bhi.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004610:	d007      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004618:	e004      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800461a:	bf00      	nop
 800461c:	e002      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8004622:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004624:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004628:	2b00      	cmp	r3, #0
 800462a:	d111      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800462c:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800462e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004632:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800463a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800463e:	4a02      	ldr	r2, [pc, #8]	@ (8004648 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004640:	430b      	orrs	r3, r1
 8004642:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004646:	e007      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8004648:	46020c00 	.word	0x46020c00
 800464c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004654:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8004658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004666:	2300      	movs	r3, #0
 8004668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800466a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d00c      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8004674:	4bb2      	ldr	r3, [pc, #712]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004676:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800467a:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800467e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004686:	4aae      	ldr	r2, [pc, #696]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004688:	430b      	orrs	r3, r1
 800468a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800468e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800469a:	653b      	str	r3, [r7, #80]	@ 0x50
 800469c:	2300      	movs	r3, #0
 800469e:	657b      	str	r3, [r7, #84]	@ 0x54
 80046a0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d019      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80046aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046b6:	d105      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80046b8:	4ba1      	ldr	r3, [pc, #644]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046bc:	4aa0      	ldr	r2, [pc, #640]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c2:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80046c4:	4b9e      	ldr	r3, [pc, #632]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80046ca:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80046ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046d6:	4a9a      	ldr	r2, [pc, #616]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046d8:	430b      	orrs	r3, r1
 80046da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ec:	2300      	movs	r3, #0
 80046ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046f4:	460b      	mov	r3, r1
 80046f6:	4313      	orrs	r3, r2
 80046f8:	d00c      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80046fa:	4b91      	ldr	r3, [pc, #580]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004700:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004708:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800470c:	4a8c      	ldr	r2, [pc, #560]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800470e:	430b      	orrs	r3, r1
 8004710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004720:	643b      	str	r3, [r7, #64]	@ 0x40
 8004722:	2300      	movs	r3, #0
 8004724:	647b      	str	r3, [r7, #68]	@ 0x44
 8004726:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d00c      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004730:	4b83      	ldr	r3, [pc, #524]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004736:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800473e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004742:	4a7f      	ldr	r2, [pc, #508]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004744:	430b      	orrs	r3, r1
 8004746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800474a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004758:	2300      	movs	r3, #0
 800475a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800475c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004760:	460b      	mov	r3, r1
 8004762:	4313      	orrs	r3, r2
 8004764:	d00c      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004766:	4b76      	ldr	r3, [pc, #472]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800476c:	f023 0118 	bic.w	r1, r3, #24
 8004770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004774:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004778:	4a71      	ldr	r2, [pc, #452]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800477a:	430b      	orrs	r3, r1
 800477c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004788:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800478c:	633b      	str	r3, [r7, #48]	@ 0x30
 800478e:	2300      	movs	r3, #0
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
 8004792:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004796:	460b      	mov	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	d032      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800479c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047a8:	d105      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047aa:	4b65      	ldr	r3, [pc, #404]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	4a64      	ldr	r2, [pc, #400]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b4:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80047b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047c2:	d108      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047c8:	3308      	adds	r3, #8
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 f9a0 	bl	8004b10 <RCCEx_PLL2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 80047d6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10d      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80047de:	4b58      	ldr	r3, [pc, #352]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80047e4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80047f0:	4a53      	ldr	r2, [pc, #332]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80047f8:	e003      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80047fe:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8004802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	2100      	movs	r1, #0
 800480c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004814:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d04a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800481e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004822:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004826:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800482a:	d01e      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xbca>
 800482c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004830:	d825      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8004832:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004836:	d00e      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8004838:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800483c:	d81f      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d021      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004846:	d11a      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004848:	4b3d      	ldr	r3, [pc, #244]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	4a3c      	ldr	r2, [pc, #240]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800484e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004852:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004854:	e018      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800485a:	3308      	adds	r3, #8
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f957 	bl	8004b10 <RCCEx_PLL2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004868:	e00e      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800486a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800486e:	332c      	adds	r3, #44	@ 0x2c
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f9e5 	bl	8004c40 <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800487c:	e004      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004884:	e000      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8004886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004888:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10d      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8004890:	4b2b      	ldr	r3, [pc, #172]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004892:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004896:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80048a2:	4927      	ldr	r1, [pc, #156]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80048aa:	e003      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80048b0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80048b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	2300      	movs	r3, #0
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d03d      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80048d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048dc:	d00e      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80048de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048e2:	d815      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d017      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80048e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ec:	d110      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ee:	4b14      	ldr	r3, [pc, #80]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	4a13      	ldr	r2, [pc, #76]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80048f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80048fa:	e00e      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004900:	3308      	adds	r3, #8
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f904 	bl	8004b10 <RCCEx_PLL2_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800490e:	e004      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004916:	e000      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004918:	bf00      	nop
    }
    if (ret == HAL_OK)
 800491a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800491e:	2b00      	cmp	r3, #0
 8004920:	d110      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004922:	4b07      	ldr	r3, [pc, #28]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004928:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004934:	4902      	ldr	r1, [pc, #8]	@ (8004940 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800493e:	bf00      	nop
 8004940:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004948:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800494c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
 800495e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004962:	460b      	mov	r3, r1
 8004964:	4313      	orrs	r3, r2
 8004966:	d00c      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004968:	4b68      	ldr	r3, [pc, #416]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800496a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800496e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004976:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800497a:	4964      	ldr	r1, [pc, #400]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	2100      	movs	r1, #0
 800498c:	6139      	str	r1, [r7, #16]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d036      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80049aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049ae:	d113      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049b4:	3308      	adds	r3, #8
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 f8aa 	bl	8004b10 <RCCEx_PLL2_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80049c2:	e00d      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c8:	332c      	adds	r3, #44	@ 0x2c
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f938 	bl	8004c40 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80049d6:	e003      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 80049e8:	4b48      	ldr	r3, [pc, #288]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80049ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80049ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80049f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049fa:	4944      	ldr	r1, [pc, #272]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004a02:	e003      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004a08:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	2100      	movs	r1, #0
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d024      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8004a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d108      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a38:	332c      	adds	r3, #44	@ 0x2c
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f900 	bl	8004c40 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8004a46:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10d      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 8004a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004a50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a54:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a60:	492a      	ldr	r1, [pc, #168]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004a68:	e003      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004a6e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8004a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6039      	str	r1, [r7, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	607b      	str	r3, [r7, #4]
 8004a84:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	d036      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8004a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004a96:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8004a9c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004aa0:	d811      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8004aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa6:	d012      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8004aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aac:	d80b      	bhi.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ab8:	4b14      	ldr	r3, [pc, #80]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	4a13      	ldr	r2, [pc, #76]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8004ac4:	e004      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8004acc:	e000      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 8004ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10d      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004ada:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ade:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004aea:	4908      	ldr	r1, [pc, #32]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004af2:	e003      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8004af8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004afc:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8004b06:	46bd      	mov	sp, r7
 8004b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b0c:	46020c00 	.word	0x46020c00

08004b10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004b18:	4b47      	ldr	r3, [pc, #284]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a46      	ldr	r2, [pc, #280]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004b1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b24:	f7fb fef8 	bl	8000918 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b2a:	e008      	b.n	8004b3e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b2c:	f7fb fef4 	bl	8000918 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e077      	b.n	8004c2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6811      	ldr	r1, [r2, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6852      	ldr	r2, [r2, #4]
 8004b5e:	3a01      	subs	r2, #1
 8004b60:	0212      	lsls	r2, r2, #8
 8004b62:	430a      	orrs	r2, r1
 8004b64:	4934      	ldr	r1, [pc, #208]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004b6a:	4b33      	ldr	r3, [pc, #204]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b6e:	4b33      	ldr	r3, [pc, #204]	@ (8004c3c <RCCEx_PLL2_Config+0x12c>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6892      	ldr	r2, [r2, #8]
 8004b76:	3a01      	subs	r2, #1
 8004b78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	68d2      	ldr	r2, [r2, #12]
 8004b80:	3a01      	subs	r2, #1
 8004b82:	0252      	lsls	r2, r2, #9
 8004b84:	b292      	uxth	r2, r2
 8004b86:	4311      	orrs	r1, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6912      	ldr	r2, [r2, #16]
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	0412      	lsls	r2, r2, #16
 8004b90:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6952      	ldr	r2, [r2, #20]
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	0612      	lsls	r2, r2, #24
 8004b9e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	4924      	ldr	r1, [pc, #144]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004baa:	4b23      	ldr	r3, [pc, #140]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	f023 020c 	bic.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	4920      	ldr	r1, [pc, #128]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	491c      	ldr	r1, [pc, #112]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004bca:	4b1b      	ldr	r3, [pc, #108]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bce:	4a1a      	ldr	r2, [pc, #104]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bd0:	f023 0310 	bic.w	r3, r3, #16
 8004bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bd6:	4b18      	ldr	r3, [pc, #96]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bde:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	69d2      	ldr	r2, [r2, #28]
 8004be6:	00d2      	lsls	r2, r2, #3
 8004be8:	4913      	ldr	r1, [pc, #76]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004bee:	4b12      	ldr	r3, [pc, #72]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	4a11      	ldr	r2, [pc, #68]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bf4:	f043 0310 	orr.w	r3, r3, #16
 8004bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004c00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c06:	f7fb fe87 	bl	8000918 <HAL_GetTick>
 8004c0a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c0c:	e008      	b.n	8004c20 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c0e:	f7fb fe83 	bl	8000918 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e006      	b.n	8004c2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c20:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <RCCEx_PLL2_Config+0x128>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0

}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	46020c00 	.word	0x46020c00
 8004c3c:	80800000 	.word	0x80800000

08004c40 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004c48:	4b47      	ldr	r3, [pc, #284]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a46      	ldr	r2, [pc, #280]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004c54:	f7fb fe60 	bl	8000918 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c5a:	e008      	b.n	8004c6e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c5c:	f7fb fe5c 	bl	8000918 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e077      	b.n	8004d5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6811      	ldr	r1, [r2, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6852      	ldr	r2, [r2, #4]
 8004c8e:	3a01      	subs	r2, #1
 8004c90:	0212      	lsls	r2, r2, #8
 8004c92:	430a      	orrs	r2, r1
 8004c94:	4934      	ldr	r1, [pc, #208]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	630b      	str	r3, [r1, #48]	@ 0x30
 8004c9a:	4b33      	ldr	r3, [pc, #204]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c9e:	4b33      	ldr	r3, [pc, #204]	@ (8004d6c <RCCEx_PLL3_Config+0x12c>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6892      	ldr	r2, [r2, #8]
 8004ca6:	3a01      	subs	r2, #1
 8004ca8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68d2      	ldr	r2, [r2, #12]
 8004cb0:	3a01      	subs	r2, #1
 8004cb2:	0252      	lsls	r2, r2, #9
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6912      	ldr	r2, [r2, #16]
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	0412      	lsls	r2, r2, #16
 8004cc0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6952      	ldr	r2, [r2, #20]
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	0612      	lsls	r2, r2, #24
 8004cce:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	4924      	ldr	r1, [pc, #144]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004cda:	4b23      	ldr	r3, [pc, #140]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	f023 020c 	bic.w	r2, r3, #12
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	4920      	ldr	r1, [pc, #128]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004cec:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	491c      	ldr	r1, [pc, #112]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d06:	4b18      	ldr	r3, [pc, #96]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	69d2      	ldr	r2, [r2, #28]
 8004d16:	00d2      	lsls	r2, r2, #3
 8004d18:	4913      	ldr	r1, [pc, #76]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004d1e:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	4a11      	ldr	r2, [pc, #68]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d24:	f043 0310 	orr.w	r3, r3, #16
 8004d28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d36:	f7fb fdef 	bl	8000918 <HAL_GetTick>
 8004d3a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d3c:	e008      	b.n	8004d50 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d3e:	f7fb fdeb 	bl	8000918 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e006      	b.n	8004d5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d50:	4b05      	ldr	r3, [pc, #20]	@ (8004d68 <RCCEx_PLL3_Config+0x128>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	46020c00 	.word	0x46020c00
 8004d6c:	80800000 	.word	0x80800000

08004d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e049      	b.n	8004e16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f841 	bl	8004e1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 fa58 	bl	8005264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e072      	b.n	8004f32 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a35      	ldr	r2, [pc, #212]	@ (8004f40 <HAL_TIM_Base_Start_IT+0x10c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d040      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a34      	ldr	r2, [pc, #208]	@ (8004f44 <HAL_TIM_Base_Start_IT+0x110>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d03b      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d036      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e8a:	d031      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <HAL_TIM_Base_Start_IT+0x114>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d02c      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f4c <HAL_TIM_Base_Start_IT+0x118>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d027      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f50 <HAL_TIM_Base_Start_IT+0x11c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d022      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a29      	ldr	r2, [pc, #164]	@ (8004f54 <HAL_TIM_Base_Start_IT+0x120>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d01d      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a27      	ldr	r2, [pc, #156]	@ (8004f58 <HAL_TIM_Base_Start_IT+0x124>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d018      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a26      	ldr	r2, [pc, #152]	@ (8004f5c <HAL_TIM_Base_Start_IT+0x128>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a24      	ldr	r2, [pc, #144]	@ (8004f60 <HAL_TIM_Base_Start_IT+0x12c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a23      	ldr	r2, [pc, #140]	@ (8004f64 <HAL_TIM_Base_Start_IT+0x130>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a21      	ldr	r2, [pc, #132]	@ (8004f68 <HAL_TIM_Base_Start_IT+0x134>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_Base_Start_IT+0xbc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a20      	ldr	r2, [pc, #128]	@ (8004f6c <HAL_TIM_Base_Start_IT+0x138>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d115      	bne.n	8004f1c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <HAL_TIM_Base_Start_IT+0x13c>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b06      	cmp	r3, #6
 8004f00:	d015      	beq.n	8004f2e <HAL_TIM_Base_Start_IT+0xfa>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f08:	d011      	beq.n	8004f2e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0201 	orr.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	e008      	b.n	8004f2e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e000      	b.n	8004f30 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	50012c00 	.word	0x50012c00
 8004f48:	40000400 	.word	0x40000400
 8004f4c:	50000400 	.word	0x50000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	50000800 	.word	0x50000800
 8004f58:	40000c00 	.word	0x40000c00
 8004f5c:	50000c00 	.word	0x50000c00
 8004f60:	40013400 	.word	0x40013400
 8004f64:	50013400 	.word	0x50013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	50014000 	.word	0x50014000
 8004f70:	00010007 	.word	0x00010007

08004f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0202 	mvn.w	r2, #2
 8004fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f931 	bl	8005226 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e005      	b.n	8004fd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f923 	bl	8005212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f934 	bl	800523a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0204 	mvn.w	r2, #4
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f90b 	bl	8005226 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8fd 	bl	8005212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f90e 	bl	800523a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d020      	beq.n	8005070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01b      	beq.n	8005070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0208 	mvn.w	r2, #8
 8005040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2204      	movs	r2, #4
 8005046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f8e5 	bl	8005226 <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8d7 	bl	8005212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8e8 	bl	800523a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0310 	and.w	r3, r3, #16
 8005076:	2b00      	cmp	r3, #0
 8005078:	d020      	beq.n	80050bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0210 	mvn.w	r2, #16
 800508c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2208      	movs	r2, #8
 8005092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f8bf 	bl	8005226 <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f8b1 	bl	8005212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f8c2 	bl	800523a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f06f 0201 	mvn.w	r2, #1
 80050d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb fa00 	bl	80004e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00c      	beq.n	800510e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d007      	beq.n	800510e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9b5 	bl	8005478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00c      	beq.n	8005132 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d007      	beq.n	8005132 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800512a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f9ad 	bl	800548c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800514e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f87c 	bl	800524e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0220 	mvn.w	r2, #32
 8005172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f975 	bl	8005464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00c      	beq.n	800519e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f981 	bl	80054a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00c      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80051ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f979 	bl	80054b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80051de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f971 	bl	80054c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00c      	beq.n	800520a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f969 	bl	80054dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a6b      	ldr	r2, [pc, #428]	@ (8005424 <TIM_Base_SetConfig+0x1c0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d02b      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a6a      	ldr	r2, [pc, #424]	@ (8005428 <TIM_Base_SetConfig+0x1c4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d027      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528a:	d023      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005292:	d01f      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a65      	ldr	r2, [pc, #404]	@ (800542c <TIM_Base_SetConfig+0x1c8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d01b      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a64      	ldr	r2, [pc, #400]	@ (8005430 <TIM_Base_SetConfig+0x1cc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d017      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a63      	ldr	r2, [pc, #396]	@ (8005434 <TIM_Base_SetConfig+0x1d0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a62      	ldr	r2, [pc, #392]	@ (8005438 <TIM_Base_SetConfig+0x1d4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00f      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a61      	ldr	r2, [pc, #388]	@ (800543c <TIM_Base_SetConfig+0x1d8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a60      	ldr	r2, [pc, #384]	@ (8005440 <TIM_Base_SetConfig+0x1dc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d007      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005444 <TIM_Base_SetConfig+0x1e0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d003      	beq.n	80052d4 <TIM_Base_SetConfig+0x70>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a5e      	ldr	r2, [pc, #376]	@ (8005448 <TIM_Base_SetConfig+0x1e4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d108      	bne.n	80052e6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a4e      	ldr	r2, [pc, #312]	@ (8005424 <TIM_Base_SetConfig+0x1c0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d043      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005428 <TIM_Base_SetConfig+0x1c4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d03f      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fc:	d03b      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005304:	d037      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a48      	ldr	r2, [pc, #288]	@ (800542c <TIM_Base_SetConfig+0x1c8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d033      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a47      	ldr	r2, [pc, #284]	@ (8005430 <TIM_Base_SetConfig+0x1cc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02f      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a46      	ldr	r2, [pc, #280]	@ (8005434 <TIM_Base_SetConfig+0x1d0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d02b      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a45      	ldr	r2, [pc, #276]	@ (8005438 <TIM_Base_SetConfig+0x1d4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d027      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a44      	ldr	r2, [pc, #272]	@ (800543c <TIM_Base_SetConfig+0x1d8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d023      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a43      	ldr	r2, [pc, #268]	@ (8005440 <TIM_Base_SetConfig+0x1dc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d01f      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a42      	ldr	r2, [pc, #264]	@ (8005444 <TIM_Base_SetConfig+0x1e0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01b      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a41      	ldr	r2, [pc, #260]	@ (8005448 <TIM_Base_SetConfig+0x1e4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d017      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a40      	ldr	r2, [pc, #256]	@ (800544c <TIM_Base_SetConfig+0x1e8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a3f      	ldr	r2, [pc, #252]	@ (8005450 <TIM_Base_SetConfig+0x1ec>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00f      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a3e      	ldr	r2, [pc, #248]	@ (8005454 <TIM_Base_SetConfig+0x1f0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00b      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a3d      	ldr	r2, [pc, #244]	@ (8005458 <TIM_Base_SetConfig+0x1f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d007      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a3c      	ldr	r2, [pc, #240]	@ (800545c <TIM_Base_SetConfig+0x1f8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_Base_SetConfig+0x112>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a3b      	ldr	r2, [pc, #236]	@ (8005460 <TIM_Base_SetConfig+0x1fc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d108      	bne.n	8005388 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005424 <TIM_Base_SetConfig+0x1c0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d023      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <TIM_Base_SetConfig+0x1c4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01f      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a22      	ldr	r2, [pc, #136]	@ (8005444 <TIM_Base_SetConfig+0x1e0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01b      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a21      	ldr	r2, [pc, #132]	@ (8005448 <TIM_Base_SetConfig+0x1e4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d017      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a20      	ldr	r2, [pc, #128]	@ (800544c <TIM_Base_SetConfig+0x1e8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005450 <TIM_Base_SetConfig+0x1ec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005454 <TIM_Base_SetConfig+0x1f0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <TIM_Base_SetConfig+0x1f4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1c      	ldr	r2, [pc, #112]	@ (800545c <TIM_Base_SetConfig+0x1f8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_Base_SetConfig+0x192>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005460 <TIM_Base_SetConfig+0x1fc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d103      	bne.n	80053fe <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f043 0204 	orr.w	r2, r3, #4
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40012c00 	.word	0x40012c00
 8005428:	50012c00 	.word	0x50012c00
 800542c:	40000400 	.word	0x40000400
 8005430:	50000400 	.word	0x50000400
 8005434:	40000800 	.word	0x40000800
 8005438:	50000800 	.word	0x50000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	50000c00 	.word	0x50000c00
 8005444:	40013400 	.word	0x40013400
 8005448:	50013400 	.word	0x50013400
 800544c:	40014000 	.word	0x40014000
 8005450:	50014000 	.word	0x50014000
 8005454:	40014400 	.word	0x40014400
 8005458:	50014400 	.word	0x50014400
 800545c:	40014800 	.word	0x40014800
 8005460:	50014800 	.word	0x50014800

08005464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054f0:	b084      	sub	sp, #16
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	f107 001c 	add.w	r0, r7, #28
 80054fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005502:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005506:	2b03      	cmp	r3, #3
 8005508:	d105      	bne.n	8005516 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 fad8 	bl	8006acc <USB_CoreReset>
 800551c:	4603      	mov	r3, r0
 800551e:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8005520:	7fbb      	ldrb	r3, [r7, #30]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d10b      	bne.n	800553e <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f043 0208 	orr.w	r2, r3, #8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f043 0220 	orr.w	r2, r3, #32
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800554a:	b004      	add	sp, #16
 800554c:	4770      	bx	lr
	...

08005550 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d165      	bne.n	8005630 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a41      	ldr	r2, [pc, #260]	@ (800566c <USB_SetTurnaroundTime+0x11c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d906      	bls.n	800557a <USB_SetTurnaroundTime+0x2a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a40      	ldr	r2, [pc, #256]	@ (8005670 <USB_SetTurnaroundTime+0x120>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d202      	bcs.n	800557a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005574:	230f      	movs	r3, #15
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e062      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a3c      	ldr	r2, [pc, #240]	@ (8005670 <USB_SetTurnaroundTime+0x120>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d306      	bcc.n	8005590 <USB_SetTurnaroundTime+0x40>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4a3b      	ldr	r2, [pc, #236]	@ (8005674 <USB_SetTurnaroundTime+0x124>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d202      	bcs.n	8005590 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800558a:	230e      	movs	r3, #14
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	e057      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a38      	ldr	r2, [pc, #224]	@ (8005674 <USB_SetTurnaroundTime+0x124>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d306      	bcc.n	80055a6 <USB_SetTurnaroundTime+0x56>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a37      	ldr	r2, [pc, #220]	@ (8005678 <USB_SetTurnaroundTime+0x128>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d202      	bcs.n	80055a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055a0:	230d      	movs	r3, #13
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	e04c      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <USB_SetTurnaroundTime+0x128>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d306      	bcc.n	80055bc <USB_SetTurnaroundTime+0x6c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a32      	ldr	r2, [pc, #200]	@ (800567c <USB_SetTurnaroundTime+0x12c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d802      	bhi.n	80055bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055b6:	230c      	movs	r3, #12
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e041      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a2f      	ldr	r2, [pc, #188]	@ (800567c <USB_SetTurnaroundTime+0x12c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d906      	bls.n	80055d2 <USB_SetTurnaroundTime+0x82>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005680 <USB_SetTurnaroundTime+0x130>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d802      	bhi.n	80055d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055cc:	230b      	movs	r3, #11
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e036      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005680 <USB_SetTurnaroundTime+0x130>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d906      	bls.n	80055e8 <USB_SetTurnaroundTime+0x98>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a29      	ldr	r2, [pc, #164]	@ (8005684 <USB_SetTurnaroundTime+0x134>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d802      	bhi.n	80055e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055e2:	230a      	movs	r3, #10
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e02b      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4a26      	ldr	r2, [pc, #152]	@ (8005684 <USB_SetTurnaroundTime+0x134>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d906      	bls.n	80055fe <USB_SetTurnaroundTime+0xae>
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a25      	ldr	r2, [pc, #148]	@ (8005688 <USB_SetTurnaroundTime+0x138>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d202      	bcs.n	80055fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055f8:	2309      	movs	r3, #9
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e020      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a21      	ldr	r2, [pc, #132]	@ (8005688 <USB_SetTurnaroundTime+0x138>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d306      	bcc.n	8005614 <USB_SetTurnaroundTime+0xc4>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4a20      	ldr	r2, [pc, #128]	@ (800568c <USB_SetTurnaroundTime+0x13c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800560e:	2308      	movs	r3, #8
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e015      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a1d      	ldr	r2, [pc, #116]	@ (800568c <USB_SetTurnaroundTime+0x13c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d906      	bls.n	800562a <USB_SetTurnaroundTime+0xda>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a1c      	ldr	r2, [pc, #112]	@ (8005690 <USB_SetTurnaroundTime+0x140>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d202      	bcs.n	800562a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005624:	2307      	movs	r3, #7
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e00a      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800562a:	2306      	movs	r3, #6
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	e007      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005636:	2309      	movs	r3, #9
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e001      	b.n	8005640 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800563c:	2309      	movs	r3, #9
 800563e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	00d8acbf 	.word	0x00d8acbf
 8005670:	00e4e1c0 	.word	0x00e4e1c0
 8005674:	00f42400 	.word	0x00f42400
 8005678:	01067380 	.word	0x01067380
 800567c:	011a499f 	.word	0x011a499f
 8005680:	01312cff 	.word	0x01312cff
 8005684:	014ca43f 	.word	0x014ca43f
 8005688:	016e3600 	.word	0x016e3600
 800568c:	01a6ab1f 	.word	0x01a6ab1f
 8005690:	01e84800 	.word	0x01e84800

08005694 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 0201 	bic.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d115      	bne.n	8005726 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005706:	200a      	movs	r0, #10
 8005708:	f7fb f912 	bl	8000930 <HAL_Delay>
      ms += 10U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	330a      	adds	r3, #10
 8005710:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f001 f94b 	bl	80069ae <USB_GetMode>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d01e      	beq.n	800575c <USB_SetCurrentMode+0x84>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2bc7      	cmp	r3, #199	@ 0xc7
 8005722:	d9f0      	bls.n	8005706 <USB_SetCurrentMode+0x2e>
 8005724:	e01a      	b.n	800575c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d115      	bne.n	8005758 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005738:	200a      	movs	r0, #10
 800573a:	f7fb f8f9 	bl	8000930 <HAL_Delay>
      ms += 10U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	330a      	adds	r3, #10
 8005742:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f001 f932 	bl	80069ae <USB_GetMode>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <USB_SetCurrentMode+0x84>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2bc7      	cmp	r3, #199	@ 0xc7
 8005754:	d9f0      	bls.n	8005738 <USB_SetCurrentMode+0x60>
 8005756:	e001      	b.n	800575c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e005      	b.n	8005768 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005760:	d101      	bne.n	8005766 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005770:	b084      	sub	sp, #16
 8005772:	b580      	push	{r7, lr}
 8005774:	b086      	sub	sp, #24
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800577e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800578a:	2300      	movs	r3, #0
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	e009      	b.n	80057a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3340      	adds	r3, #64	@ 0x40
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	2200      	movs	r2, #0
 800579c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	3301      	adds	r3, #1
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	2b0e      	cmp	r3, #14
 80057a8:	d9f2      	bls.n	8005790 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11c      	bne.n	80057f8 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057cc:	f043 0302 	orr.w	r3, r3, #2
 80057d0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80057f6:	e011      	b.n	800581c <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005814:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005828:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800582c:	2b03      	cmp	r3, #3
 800582e:	d10d      	bne.n	800584c <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005834:	2b00      	cmp	r3, #0
 8005836:	d104      	bne.n	8005842 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005838:	2100      	movs	r1, #0
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f968 	bl	8005b10 <USB_SetDevSpeed>
 8005840:	e008      	b.n	8005854 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005842:	2101      	movs	r1, #1
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f963 	bl	8005b10 <USB_SetDevSpeed>
 800584a:	e003      	b.n	8005854 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800584c:	2103      	movs	r1, #3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f95e 	bl	8005b10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005854:	2110      	movs	r1, #16
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f8fa 	bl	8005a50 <USB_FlushTxFifo>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f924 	bl	8005ab4 <USB_FlushRxFifo>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587c:	461a      	mov	r2, r3
 800587e:	2300      	movs	r3, #0
 8005880:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005888:	461a      	mov	r2, r3
 800588a:	2300      	movs	r3, #0
 800588c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005894:	461a      	mov	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	e043      	b.n	8005928 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058b6:	d118      	bne.n	80058ea <USB_DevInit+0x17a>
    {
      if (i == 0U)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ca:	461a      	mov	r2, r3
 80058cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	e013      	b.n	80058fc <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e0:	461a      	mov	r2, r3
 80058e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	e008      	b.n	80058fc <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f6:	461a      	mov	r2, r3
 80058f8:	2300      	movs	r3, #0
 80058fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005908:	461a      	mov	r2, r3
 800590a:	2300      	movs	r3, #0
 800590c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591a:	461a      	mov	r2, r3
 800591c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005920:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	3301      	adds	r3, #1
 8005926:	613b      	str	r3, [r7, #16]
 8005928:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800592c:	461a      	mov	r2, r3
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4293      	cmp	r3, r2
 8005932:	d3b5      	bcc.n	80058a0 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e043      	b.n	80059c2 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800594c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005950:	d118      	bne.n	8005984 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005964:	461a      	mov	r2, r3
 8005966:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e013      	b.n	8005996 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e008      	b.n	8005996 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005990:	461a      	mov	r2, r3
 8005992:	2300      	movs	r3, #0
 8005994:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a2:	461a      	mov	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059b4:	461a      	mov	r2, r3
 80059b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3301      	adds	r3, #1
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059c6:	461a      	mov	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d3b5      	bcc.n	800593a <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f043 0210 	orr.w	r2, r3, #16
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699a      	ldr	r2, [r3, #24]
 8005a08:	4b10      	ldr	r3, [pc, #64]	@ (8005a4c <USB_DevInit+0x2dc>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d005      	beq.n	8005a24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f043 0208 	orr.w	r2, r3, #8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d107      	bne.n	8005a3c <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a34:	f043 0304 	orr.w	r3, r3, #4
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a48:	b004      	add	sp, #16
 8005a4a:	4770      	bx	lr
 8005a4c:	803c3800 	.word	0x803c3800

08005a50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a6a:	d901      	bls.n	8005a70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e01b      	b.n	8005aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	daf2      	bge.n	8005a5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	019b      	lsls	r3, r3, #6
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a94:	d901      	bls.n	8005a9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e006      	b.n	8005aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d0f0      	beq.n	8005a88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005acc:	d901      	bls.n	8005ad2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e018      	b.n	8005b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	daf2      	bge.n	8005ac0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af0:	d901      	bls.n	8005af6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e006      	b.n	8005b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b10      	cmp	r3, #16
 8005b00:	d0f0      	beq.n	8005ae4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	68f9      	ldr	r1, [r7, #12]
 8005b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f003 0306 	and.w	r3, r3, #6
 8005b5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]
 8005b66:	e00a      	b.n	8005b7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d002      	beq.n	8005b74 <USB_GetDevSpeed+0x32>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d102      	bne.n	8005b7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b74:	2302      	movs	r3, #2
 8005b76:	75fb      	strb	r3, [r7, #23]
 8005b78:	e001      	b.n	8005b7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b7a:	230f      	movs	r3, #15
 8005b7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d13a      	bne.n	8005c1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d155      	bne.n	8005c8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	059b      	lsls	r3, r3, #22
 8005c02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c04:	4313      	orrs	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	e036      	b.n	8005c8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	2101      	movs	r1, #1
 8005c30:	fa01 f303 	lsl.w	r3, r1, r3
 8005c34:	041b      	lsls	r3, r3, #16
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11a      	bne.n	8005c8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	791b      	ldrb	r3, [r3, #4]
 8005c70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c72:	430b      	orrs	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d161      	bne.n	8005d7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cce:	d11f      	bne.n	8005d10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	0151      	lsls	r1, r2, #5
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	440a      	add	r2, r1
 8005ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	2101      	movs	r1, #1
 8005d22:	fa01 f303 	lsl.w	r3, r1, r3
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d30:	4013      	ands	r3, r2
 8005d32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	2101      	movs	r1, #1
 8005d46:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d54:	4013      	ands	r3, r2
 8005d56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	0159      	lsls	r1, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	440b      	add	r3, r1
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d72:	4619      	mov	r1, r3
 8005d74:	4b35      	ldr	r3, [pc, #212]	@ (8005e4c <USB_DeactivateEndpoint+0x1b0>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]
 8005d7a:	e060      	b.n	8005e3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d92:	d11f      	bne.n	8005dd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005db2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	2101      	movs	r1, #1
 8005de6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dea:	041b      	lsls	r3, r3, #16
 8005dec:	43db      	mvns	r3, r3
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005df4:	4013      	ands	r3, r2
 8005df6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	2101      	movs	r1, #1
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	43db      	mvns	r3, r3
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	0159      	lsls	r1, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	440b      	add	r3, r1
 8005e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e36:	4619      	mov	r1, r3
 8005e38:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <USB_DeactivateEndpoint+0x1b4>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	ec337800 	.word	0xec337800
 8005e50:	eff37800 	.word	0xeff37800

08005e54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	@ 0x28
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	f040 817f 	bne.w	8006174 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d132      	bne.n	8005ee4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ebc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ec0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005edc:	0cdb      	lsrs	r3, r3, #19
 8005ede:	04db      	lsls	r3, r3, #19
 8005ee0:	6113      	str	r3, [r2, #16]
 8005ee2:	e097      	b.n	8006014 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005efe:	0cdb      	lsrs	r3, r3, #19
 8005f00:	04db      	lsls	r3, r3, #19
 8005f02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f22:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f26:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d11a      	bne.n	8005f64 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d903      	bls.n	8005f42 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f60:	6113      	str	r3, [r2, #16]
 8005f62:	e044      	b.n	8005fee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	1e5a      	subs	r2, r3, #1
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	8afb      	ldrh	r3, [r7, #22]
 8005f8a:	04d9      	lsls	r1, r3, #19
 8005f8c:	4ba4      	ldr	r3, [pc, #656]	@ (8006220 <USB_EPStartXfer+0x3cc>)
 8005f8e:	400b      	ands	r3, r1
 8005f90:	69b9      	ldr	r1, [r7, #24]
 8005f92:	0148      	lsls	r0, r1, #5
 8005f94:	69f9      	ldr	r1, [r7, #28]
 8005f96:	4401      	add	r1, r0
 8005f98:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	791b      	ldrb	r3, [r3, #4]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d122      	bne.n	8005fee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005fc6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	8afb      	ldrh	r3, [r7, #22]
 8005fd8:	075b      	lsls	r3, r3, #29
 8005fda:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005fde:	69b9      	ldr	r1, [r7, #24]
 8005fe0:	0148      	lsls	r0, r1, #5
 8005fe2:	69f9      	ldr	r1, [r7, #28]
 8005fe4:	4401      	add	r1, r0
 8005fe6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fea:	4313      	orrs	r3, r2
 8005fec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006004:	69b9      	ldr	r1, [r7, #24]
 8006006:	0148      	lsls	r0, r1, #5
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	4401      	add	r1, r0
 800600c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006010:	4313      	orrs	r3, r2
 8006012:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d14b      	bne.n	80060b2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602e:	461a      	mov	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	791b      	ldrb	r3, [r3, #4]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d128      	bne.n	8006090 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d110      	bne.n	8006070 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006068:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e00f      	b.n	8006090 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800608a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800608e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e166      	b.n	8006380 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060d0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	791b      	ldrb	r3, [r3, #4]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d015      	beq.n	8006106 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 814e 	beq.w	8006380 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	2101      	movs	r1, #1
 80060f6:	fa01 f303 	lsl.w	r3, r1, r3
 80060fa:	69f9      	ldr	r1, [r7, #28]
 80060fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006100:	4313      	orrs	r3, r2
 8006102:	634b      	str	r3, [r1, #52]	@ 0x34
 8006104:	e13c      	b.n	8006380 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006112:	2b00      	cmp	r3, #0
 8006114:	d110      	bne.n	8006138 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006130:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e00f      	b.n	8006158 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006156:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	68d9      	ldr	r1, [r3, #12]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	781a      	ldrb	r2, [r3, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	b298      	uxth	r0, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	4603      	mov	r3, r0
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f9b9 	bl	80064e4 <USB_WritePacket>
 8006172:	e105      	b.n	8006380 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	440a      	add	r2, r1
 800618a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800618e:	0cdb      	lsrs	r3, r3, #19
 8006190:	04db      	lsls	r3, r3, #19
 8006192:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	0151      	lsls	r1, r2, #5
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	440a      	add	r2, r1
 80061aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061b6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d132      	bne.n	8006224 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ec:	69b9      	ldr	r1, [r7, #24]
 80061ee:	0148      	lsls	r0, r1, #5
 80061f0:	69f9      	ldr	r1, [r7, #28]
 80061f2:	4401      	add	r1, r0
 80061f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061f8:	4313      	orrs	r3, r2
 80061fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006216:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800621a:	6113      	str	r3, [r2, #16]
 800621c:	e062      	b.n	80062e4 <USB_EPStartXfer+0x490>
 800621e:	bf00      	nop
 8006220:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d123      	bne.n	8006274 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006242:	69b9      	ldr	r1, [r7, #24]
 8006244:	0148      	lsls	r0, r1, #5
 8006246:	69f9      	ldr	r1, [r7, #28]
 8006248:	4401      	add	r1, r0
 800624a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800624e:	4313      	orrs	r3, r2
 8006250:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800626c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006270:	6113      	str	r3, [r2, #16]
 8006272:	e037      	b.n	80062e4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4413      	add	r3, r2
 800627e:	1e5a      	subs	r2, r3, #1
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	8afa      	ldrh	r2, [r7, #22]
 8006290:	fb03 f202 	mul.w	r2, r3, r2
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	8afb      	ldrh	r3, [r7, #22]
 80062a8:	04d9      	lsls	r1, r3, #19
 80062aa:	4b38      	ldr	r3, [pc, #224]	@ (800638c <USB_EPStartXfer+0x538>)
 80062ac:	400b      	ands	r3, r1
 80062ae:	69b9      	ldr	r1, [r7, #24]
 80062b0:	0148      	lsls	r0, r1, #5
 80062b2:	69f9      	ldr	r1, [r7, #28]
 80062b4:	4401      	add	r1, r0
 80062b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062ba:	4313      	orrs	r3, r2
 80062bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ca:	691a      	ldr	r2, [r3, #16]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062d4:	69b9      	ldr	r1, [r7, #24]
 80062d6:	0148      	lsls	r0, r1, #5
 80062d8:	69f9      	ldr	r1, [r7, #28]
 80062da:	4401      	add	r1, r0
 80062dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062e0:	4313      	orrs	r3, r2
 80062e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10d      	bne.n	8006306 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006302:	460a      	mov	r2, r1
 8006304:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	791b      	ldrb	r3, [r3, #4]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d128      	bne.n	8006360 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d110      	bne.n	8006340 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006338:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e00f      	b.n	8006360 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	69fa      	ldr	r2, [r7, #28]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800635a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800637a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800637e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	1ff80000 	.word	0x1ff80000

08006390 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	785b      	ldrb	r3, [r3, #1]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d14a      	bne.n	8006444 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063c6:	f040 8086 	bne.w	80064d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	7812      	ldrb	r2, [r2, #0]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	7812      	ldrb	r2, [r2, #0]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800640c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006410:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800641e:	4293      	cmp	r3, r2
 8006420:	d902      	bls.n	8006428 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
          break;
 8006426:	e056      	b.n	80064d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800643c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006440:	d0e7      	beq.n	8006412 <USB_EPStopXfer+0x82>
 8006442:	e048      	b.n	80064d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800645c:	d13b      	bne.n	80064d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	7812      	ldrb	r2, [r2, #0]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	440a      	add	r2, r1
 8006478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800647c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006480:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	7812      	ldrb	r2, [r2, #0]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d902      	bls.n	80064bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
          break;
 80064ba:	e00c      	b.n	80064d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064d4:	d0e7      	beq.n	80064a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b089      	sub	sp, #36	@ 0x24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4611      	mov	r1, r2
 80064f0:	461a      	mov	r2, r3
 80064f2:	460b      	mov	r3, r1
 80064f4:	71fb      	strb	r3, [r7, #7]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006502:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006506:	2b00      	cmp	r3, #0
 8006508:	d123      	bne.n	8006552 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800650a:	88bb      	ldrh	r3, [r7, #4]
 800650c:	3303      	adds	r3, #3
 800650e:	089b      	lsrs	r3, r3, #2
 8006510:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e018      	b.n	800654a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	031a      	lsls	r2, r3, #12
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006524:	461a      	mov	r2, r3
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	3301      	adds	r3, #1
 8006530:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3301      	adds	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3301      	adds	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	3301      	adds	r3, #1
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	429a      	cmp	r2, r3
 8006550:	d3e2      	bcc.n	8006518 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3724      	adds	r7, #36	@ 0x24
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006560:	b480      	push	{r7}
 8006562:	b08b      	sub	sp, #44	@ 0x2c
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	4613      	mov	r3, r2
 800656c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	089b      	lsrs	r3, r3, #2
 800657a:	b29b      	uxth	r3, r3
 800657c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006586:	2300      	movs	r3, #0
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	e014      	b.n	80065b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	601a      	str	r2, [r3, #0]
    pDest++;
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	3301      	adds	r3, #1
 800659c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	3301      	adds	r3, #1
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	3301      	adds	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	3301      	adds	r3, #1
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	3301      	adds	r3, #1
 80065b4:	623b      	str	r3, [r7, #32]
 80065b6:	6a3a      	ldr	r2, [r7, #32]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d3e6      	bcc.n	800658c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065be:	8bfb      	ldrh	r3, [r7, #30]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01e      	beq.n	8006602 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ce:	461a      	mov	r2, r3
 80065d0:	f107 0310 	add.w	r3, r7, #16
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	701a      	strb	r2, [r3, #0]
      i++;
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	3301      	adds	r3, #1
 80065ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	3301      	adds	r3, #1
 80065f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80065f6:	8bfb      	ldrh	r3, [r7, #30]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065fc:	8bfb      	ldrh	r3, [r7, #30]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1ea      	bne.n	80065d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006604:	4618      	mov	r0, r3
 8006606:	372c      	adds	r7, #44	@ 0x2c
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d12c      	bne.n	8006686 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	db12      	blt.n	8006664 <USB_EPSetStall+0x54>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00f      	beq.n	8006664 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	440a      	add	r2, r1
 800665a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800665e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006662:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800667e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	e02b      	b.n	80066de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	db12      	blt.n	80066be <USB_EPSetStall+0xae>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00f      	beq.n	80066be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d128      	bne.n	800675a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006722:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006726:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	791b      	ldrb	r3, [r3, #4]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d003      	beq.n	8006738 <USB_EPClearStall+0x4c>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	791b      	ldrb	r3, [r3, #4]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d138      	bne.n	80067aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006756:	6013      	str	r3, [r2, #0]
 8006758:	e027      	b.n	80067aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006774:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006778:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	791b      	ldrb	r3, [r3, #4]
 800677e:	2b03      	cmp	r3, #3
 8006780:	d003      	beq.n	800678a <USB_EPClearStall+0x9e>
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	791b      	ldrb	r3, [r3, #4]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d10f      	bne.n	80067aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	015a      	lsls	r2, r3, #5
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4413      	add	r3, r2
 8006792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80067da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80067ec:	68f9      	ldr	r1, [r7, #12]
 80067ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006832:	f023 0302 	bic.w	r3, r3, #2
 8006836:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006846:	b480      	push	{r7}
 8006848:	b085      	sub	sp, #20
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006860:	f023 0303 	bic.w	r3, r3, #3
 8006864:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006874:	f043 0302 	orr.w	r3, r3, #2
 8006878:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4013      	ands	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	4013      	ands	r3, r2
 80068d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	0c1b      	lsrs	r3, r3, #16
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	4013      	ands	r3, r2
 8006904:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	b29b      	uxth	r3, r3
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006926:	78fb      	ldrb	r3, [r7, #3]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4013      	ands	r3, r2
 8006942:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006944:	68bb      	ldr	r3, [r7, #8]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3714      	adds	r7, #20
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006952:	b480      	push	{r7}
 8006954:	b087      	sub	sp, #28
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006974:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	01db      	lsls	r3, r3, #7
 8006984:	b2db      	uxtb	r3, r3
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4013      	ands	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069a0:	68bb      	ldr	r3, [r7, #8]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f003 0301 	and.w	r3, r3, #1
}
 80069be:	4618      	mov	r0, r3
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80069e8:	f023 0307 	bic.w	r3, r3, #7
 80069ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	333c      	adds	r3, #60	@ 0x3c
 8006a26:	3304      	adds	r3, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	4a26      	ldr	r2, [pc, #152]	@ (8006ac8 <USB_EP0_OutStart+0xb8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d90a      	bls.n	8006a4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a44:	d101      	bne.n	8006a4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	e037      	b.n	8006aba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a50:	461a      	mov	r2, r3
 8006a52:	2300      	movs	r3, #0
 8006a54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a78:	f043 0318 	orr.w	r3, r3, #24
 8006a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006a90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d10f      	bne.n	8006ab8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ab2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006ab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	4f54300a 	.word	0x4f54300a

08006acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ae4:	d901      	bls.n	8006aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e01b      	b.n	8006b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	daf2      	bge.n	8006ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b0e:	d901      	bls.n	8006b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e006      	b.n	8006b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d0f0      	beq.n	8006b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b3c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006b40:	f002 fc88 	bl	8009454 <USBD_static_malloc>
 8006b44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	32b0      	adds	r2, #176	@ 0xb0
 8006b56:	2100      	movs	r1, #0
 8006b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e0d4      	b.n	8006d0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b60:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006b64:	2100      	movs	r1, #0
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f002 fcb8 	bl	80094dc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	32b0      	adds	r2, #176	@ 0xb0
 8006b76:	68f9      	ldr	r1, [r7, #12]
 8006b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	32b0      	adds	r2, #176	@ 0xb0
 8006b86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7c1b      	ldrb	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d138      	bne.n	8006c0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b98:	4b5e      	ldr	r3, [pc, #376]	@ (8006d14 <USBD_CDC_Init+0x1e4>)
 8006b9a:	7819      	ldrb	r1, [r3, #0]
 8006b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f002 fb33 	bl	800920e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d14 <USBD_CDC_Init+0x1e4>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f003 020f 	and.w	r2, r3, #15
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	3324      	adds	r3, #36	@ 0x24
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bc2:	4b55      	ldr	r3, [pc, #340]	@ (8006d18 <USBD_CDC_Init+0x1e8>)
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006bca:	2202      	movs	r2, #2
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f002 fb1e 	bl	800920e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006bd2:	4b51      	ldr	r3, [pc, #324]	@ (8006d18 <USBD_CDC_Init+0x1e8>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 020f 	and.w	r2, r3, #15
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006bea:	2201      	movs	r2, #1
 8006bec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bee:	4b4b      	ldr	r3, [pc, #300]	@ (8006d1c <USBD_CDC_Init+0x1ec>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	f003 020f 	and.w	r2, r3, #15
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	3326      	adds	r3, #38	@ 0x26
 8006c04:	2210      	movs	r2, #16
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e035      	b.n	8006c76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006c0a:	4b42      	ldr	r3, [pc, #264]	@ (8006d14 <USBD_CDC_Init+0x1e4>)
 8006c0c:	7819      	ldrb	r1, [r3, #0]
 8006c0e:	2340      	movs	r3, #64	@ 0x40
 8006c10:	2202      	movs	r2, #2
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f002 fafb 	bl	800920e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006c18:	4b3e      	ldr	r3, [pc, #248]	@ (8006d14 <USBD_CDC_Init+0x1e4>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f003 020f 	and.w	r2, r3, #15
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	3324      	adds	r3, #36	@ 0x24
 8006c2e:	2201      	movs	r2, #1
 8006c30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006c32:	4b39      	ldr	r3, [pc, #228]	@ (8006d18 <USBD_CDC_Init+0x1e8>)
 8006c34:	7819      	ldrb	r1, [r3, #0]
 8006c36:	2340      	movs	r3, #64	@ 0x40
 8006c38:	2202      	movs	r2, #2
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f002 fae7 	bl	800920e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c40:	4b35      	ldr	r3, [pc, #212]	@ (8006d18 <USBD_CDC_Init+0x1e8>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c58:	2201      	movs	r2, #1
 8006c5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8006d1c <USBD_CDC_Init+0x1ec>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f003 020f 	and.w	r2, r3, #15
 8006c64:	6879      	ldr	r1, [r7, #4]
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	440b      	add	r3, r1
 8006c70:	3326      	adds	r3, #38	@ 0x26
 8006c72:	2210      	movs	r2, #16
 8006c74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c76:	4b29      	ldr	r3, [pc, #164]	@ (8006d1c <USBD_CDC_Init+0x1ec>)
 8006c78:	7819      	ldrb	r1, [r3, #0]
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	2203      	movs	r2, #3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f002 fac5 	bl	800920e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c84:	4b25      	ldr	r3, [pc, #148]	@ (8006d1c <USBD_CDC_Init+0x1ec>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3324      	adds	r3, #36	@ 0x24
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	33b0      	adds	r3, #176	@ 0xb0
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e018      	b.n	8006d0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7c1b      	ldrb	r3, [r3, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10a      	bne.n	8006cf6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <USBD_CDC_Init+0x1e8>)
 8006ce2:	7819      	ldrb	r1, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f002 fb7c 	bl	80093ec <USBD_LL_PrepareReceive>
 8006cf4:	e008      	b.n	8006d08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cf6:	4b08      	ldr	r3, [pc, #32]	@ (8006d18 <USBD_CDC_Init+0x1e8>)
 8006cf8:	7819      	ldrb	r1, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d00:	2340      	movs	r3, #64	@ 0x40
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f002 fb72 	bl	80093ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000093 	.word	0x20000093
 8006d18:	20000094 	.word	0x20000094
 8006d1c:	20000095 	.word	0x20000095

08006d20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e18 <USBD_CDC_DeInit+0xf8>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f002 fa91 	bl	800925a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d38:	4b37      	ldr	r3, [pc, #220]	@ (8006e18 <USBD_CDC_DeInit+0xf8>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f003 020f 	and.w	r2, r3, #15
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	3324      	adds	r3, #36	@ 0x24
 8006d4e:	2200      	movs	r2, #0
 8006d50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d52:	4b32      	ldr	r3, [pc, #200]	@ (8006e1c <USBD_CDC_DeInit+0xfc>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f002 fa7e 	bl	800925a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8006e1c <USBD_CDC_DeInit+0xfc>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 020f 	and.w	r2, r3, #15
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d76:	2200      	movs	r2, #0
 8006d78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d7a:	4b29      	ldr	r3, [pc, #164]	@ (8006e20 <USBD_CDC_DeInit+0x100>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f002 fa6a 	bl	800925a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d86:	4b26      	ldr	r3, [pc, #152]	@ (8006e20 <USBD_CDC_DeInit+0x100>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3324      	adds	r3, #36	@ 0x24
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006da0:	4b1f      	ldr	r3, [pc, #124]	@ (8006e20 <USBD_CDC_DeInit+0x100>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 020f 	and.w	r2, r3, #15
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4413      	add	r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	3326      	adds	r3, #38	@ 0x26
 8006db6:	2200      	movs	r2, #0
 8006db8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	32b0      	adds	r2, #176	@ 0xb0
 8006dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01f      	beq.n	8006e0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	33b0      	adds	r3, #176	@ 0xb0
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	@ 0xb0
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f002 fb3e 	bl	8009470 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32b0      	adds	r2, #176	@ 0xb0
 8006dfe:	2100      	movs	r1, #0
 8006e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3708      	adds	r7, #8
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000093 	.word	0x20000093
 8006e1c:	20000094 	.word	0x20000094
 8006e20:	20000095 	.word	0x20000095

08006e24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	32b0      	adds	r2, #176	@ 0xb0
 8006e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e0bf      	b.n	8006fd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d050      	beq.n	8006f02 <USBD_CDC_Setup+0xde>
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	f040 80af 	bne.w	8006fc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	88db      	ldrh	r3, [r3, #6]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d03a      	beq.n	8006ee4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	b25b      	sxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da1b      	bge.n	8006eb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	33b0      	adds	r3, #176	@ 0xb0
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	88d2      	ldrh	r2, [r2, #6]
 8006e94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	2b07      	cmp	r3, #7
 8006e9c:	bf28      	it	cs
 8006e9e:	2307      	movcs	r3, #7
 8006ea0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	89fa      	ldrh	r2, [r7, #14]
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fdbd 	bl	8008a28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006eae:	e090      	b.n	8006fd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	785a      	ldrb	r2, [r3, #1]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	88db      	ldrh	r3, [r3, #6]
 8006ebe:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ec0:	d803      	bhi.n	8006eca <USBD_CDC_Setup+0xa6>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	88db      	ldrh	r3, [r3, #6]
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	e000      	b.n	8006ecc <USBD_CDC_Setup+0xa8>
 8006eca:	2240      	movs	r2, #64	@ 0x40
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006ed2:	6939      	ldr	r1, [r7, #16]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006eda:	461a      	mov	r2, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 fdcf 	bl	8008a80 <USBD_CtlPrepareRx>
      break;
 8006ee2:	e076      	b.n	8006fd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	33b0      	adds	r3, #176	@ 0xb0
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	7850      	ldrb	r0, [r2, #1]
 8006efa:	2200      	movs	r2, #0
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	4798      	blx	r3
      break;
 8006f00:	e067      	b.n	8006fd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b0b      	cmp	r3, #11
 8006f08:	d851      	bhi.n	8006fae <USBD_CDC_Setup+0x18a>
 8006f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f10 <USBD_CDC_Setup+0xec>)
 8006f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f10:	08006f41 	.word	0x08006f41
 8006f14:	08006fbd 	.word	0x08006fbd
 8006f18:	08006faf 	.word	0x08006faf
 8006f1c:	08006faf 	.word	0x08006faf
 8006f20:	08006faf 	.word	0x08006faf
 8006f24:	08006faf 	.word	0x08006faf
 8006f28:	08006faf 	.word	0x08006faf
 8006f2c:	08006faf 	.word	0x08006faf
 8006f30:	08006faf 	.word	0x08006faf
 8006f34:	08006faf 	.word	0x08006faf
 8006f38:	08006f6b 	.word	0x08006f6b
 8006f3c:	08006f95 	.word	0x08006f95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d107      	bne.n	8006f5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f4c:	f107 030a 	add.w	r3, r7, #10
 8006f50:	2202      	movs	r2, #2
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fd67 	bl	8008a28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f5a:	e032      	b.n	8006fc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fce5 	bl	800892e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	75fb      	strb	r3, [r7, #23]
          break;
 8006f68:	e02b      	b.n	8006fc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d107      	bne.n	8006f86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f76:	f107 030d 	add.w	r3, r7, #13
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 fd52 	bl	8008a28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f84:	e01d      	b.n	8006fc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f001 fcd0 	bl	800892e <USBD_CtlError>
            ret = USBD_FAIL;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	75fb      	strb	r3, [r7, #23]
          break;
 8006f92:	e016      	b.n	8006fc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d00f      	beq.n	8006fc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 fcc3 	bl	800892e <USBD_CtlError>
            ret = USBD_FAIL;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006fac:	e008      	b.n	8006fc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 fcbc 	bl	800892e <USBD_CtlError>
          ret = USBD_FAIL;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fba:	e002      	b.n	8006fc2 <USBD_CDC_Setup+0x19e>
          break;
 8006fbc:	bf00      	nop
 8006fbe:	e008      	b.n	8006fd2 <USBD_CDC_Setup+0x1ae>
          break;
 8006fc0:	bf00      	nop
      }
      break;
 8006fc2:	e006      	b.n	8006fd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fcb1 	bl	800892e <USBD_CtlError>
      ret = USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32b0      	adds	r2, #176	@ 0xb0
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007002:	2303      	movs	r3, #3
 8007004:	e065      	b.n	80070d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	32b0      	adds	r2, #176	@ 0xb0
 8007010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007014:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	f003 020f 	and.w	r2, r3, #15
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	440b      	add	r3, r1
 8007028:	3318      	adds	r3, #24
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d02f      	beq.n	8007090 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	f003 020f 	and.w	r2, r3, #15
 8007036:	6879      	ldr	r1, [r7, #4]
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	440b      	add	r3, r1
 8007042:	3318      	adds	r3, #24
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	f003 010f 	and.w	r1, r3, #15
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	460b      	mov	r3, r1
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	440b      	add	r3, r1
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4403      	add	r3, r0
 8007058:	331c      	adds	r3, #28
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007060:	fb01 f303 	mul.w	r3, r1, r3
 8007064:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007066:	2b00      	cmp	r3, #0
 8007068:	d112      	bne.n	8007090 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	f003 020f 	and.w	r2, r3, #15
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3318      	adds	r3, #24
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007082:	78f9      	ldrb	r1, [r7, #3]
 8007084:	2300      	movs	r3, #0
 8007086:	2200      	movs	r2, #0
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f002 f98e 	bl	80093aa <USBD_LL_Transmit>
 800708e:	e01f      	b.n	80070d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	33b0      	adds	r3, #176	@ 0xb0
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d010      	beq.n	80070d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	33b0      	adds	r3, #176	@ 0xb0
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80070cc:	78fa      	ldrb	r2, [r7, #3]
 80070ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32b0      	adds	r2, #176	@ 0xb0
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	32b0      	adds	r2, #176	@ 0xb0
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007108:	2303      	movs	r3, #3
 800710a:	e01a      	b.n	8007142 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f002 f98c 	bl	800942e <USBD_LL_GetRxDataSize>
 8007116:	4602      	mov	r2, r0
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	33b0      	adds	r3, #176	@ 0xb0
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4413      	add	r3, r2
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800713c:	4611      	mov	r1, r2
 800713e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	32b0      	adds	r2, #176	@ 0xb0
 800715c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007160:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	e024      	b.n	80071b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	33b0      	adds	r3, #176	@ 0xb0
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d019      	beq.n	80071b4 <USBD_CDC_EP0_RxReady+0x6a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007186:	2bff      	cmp	r3, #255	@ 0xff
 8007188:	d014      	beq.n	80071b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	33b0      	adds	r3, #176	@ 0xb0
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80071a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80071aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	22ff      	movs	r2, #255	@ 0xff
 80071b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80071c8:	2182      	movs	r1, #130	@ 0x82
 80071ca:	4818      	ldr	r0, [pc, #96]	@ (800722c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071cc:	f000 fd4f 	bl	8007c6e <USBD_GetEpDesc>
 80071d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80071d2:	2101      	movs	r1, #1
 80071d4:	4815      	ldr	r0, [pc, #84]	@ (800722c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071d6:	f000 fd4a 	bl	8007c6e <USBD_GetEpDesc>
 80071da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071dc:	2181      	movs	r1, #129	@ 0x81
 80071de:	4813      	ldr	r0, [pc, #76]	@ (800722c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071e0:	f000 fd45 	bl	8007c6e <USBD_GetEpDesc>
 80071e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2210      	movs	r2, #16
 80071f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d006      	beq.n	8007206 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007200:	711a      	strb	r2, [r3, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d006      	beq.n	800721a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007214:	711a      	strb	r2, [r3, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2243      	movs	r2, #67	@ 0x43
 800721e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007220:	4b02      	ldr	r3, [pc, #8]	@ (800722c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000050 	.word	0x20000050

08007230 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007238:	2182      	movs	r1, #130	@ 0x82
 800723a:	4818      	ldr	r0, [pc, #96]	@ (800729c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800723c:	f000 fd17 	bl	8007c6e <USBD_GetEpDesc>
 8007240:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007242:	2101      	movs	r1, #1
 8007244:	4815      	ldr	r0, [pc, #84]	@ (800729c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007246:	f000 fd12 	bl	8007c6e <USBD_GetEpDesc>
 800724a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800724c:	2181      	movs	r1, #129	@ 0x81
 800724e:	4813      	ldr	r0, [pc, #76]	@ (800729c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007250:	f000 fd0d 	bl	8007c6e <USBD_GetEpDesc>
 8007254:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2210      	movs	r2, #16
 8007260:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d006      	beq.n	8007276 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2200      	movs	r2, #0
 800726c:	711a      	strb	r2, [r3, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f042 0202 	orr.w	r2, r2, #2
 8007274:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d006      	beq.n	800728a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	711a      	strb	r2, [r3, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f042 0202 	orr.w	r2, r2, #2
 8007288:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2243      	movs	r2, #67	@ 0x43
 800728e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007290:	4b02      	ldr	r3, [pc, #8]	@ (800729c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000050 	.word	0x20000050

080072a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80072a8:	2182      	movs	r1, #130	@ 0x82
 80072aa:	4818      	ldr	r0, [pc, #96]	@ (800730c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072ac:	f000 fcdf 	bl	8007c6e <USBD_GetEpDesc>
 80072b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80072b2:	2101      	movs	r1, #1
 80072b4:	4815      	ldr	r0, [pc, #84]	@ (800730c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072b6:	f000 fcda 	bl	8007c6e <USBD_GetEpDesc>
 80072ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80072bc:	2181      	movs	r1, #129	@ 0x81
 80072be:	4813      	ldr	r0, [pc, #76]	@ (800730c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80072c0:	f000 fcd5 	bl	8007c6e <USBD_GetEpDesc>
 80072c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2210      	movs	r2, #16
 80072d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2200      	movs	r2, #0
 80072dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072e0:	711a      	strb	r2, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d006      	beq.n	80072fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072f4:	711a      	strb	r2, [r3, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2243      	movs	r2, #67	@ 0x43
 80072fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007300:	4b02      	ldr	r3, [pc, #8]	@ (800730c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000050 	.word	0x20000050

08007310 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	220a      	movs	r2, #10
 800731c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800731e:	4b03      	ldr	r3, [pc, #12]	@ (800732c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	2000000c 	.word	0x2000000c

08007330 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	e009      	b.n	8007358 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	33b0      	adds	r3, #176	@ 0xb0
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	32b0      	adds	r2, #176	@ 0xb0
 800737a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800737e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007386:	2303      	movs	r3, #3
 8007388:	e008      	b.n	800739c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	32b0      	adds	r2, #176	@ 0xb0
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e004      	b.n	80073d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	32b0      	adds	r2, #176	@ 0xb0
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80073fc:	2301      	movs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007406:	2303      	movs	r3, #3
 8007408:	e025      	b.n	8007456 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11f      	bne.n	8007454 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2201      	movs	r2, #1
 8007418:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800741c:	4b10      	ldr	r3, [pc, #64]	@ (8007460 <USBD_CDC_TransmitPacket+0x7c>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 020f 	and.w	r2, r3, #15
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4403      	add	r3, r0
 8007436:	3318      	adds	r3, #24
 8007438:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800743a:	4b09      	ldr	r3, [pc, #36]	@ (8007460 <USBD_CDC_TransmitPacket+0x7c>)
 800743c:	7819      	ldrb	r1, [r3, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f001 ffad 	bl	80093aa <USBD_LL_Transmit>

    ret = USBD_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000093 	.word	0x20000093

08007464 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32b0      	adds	r2, #176	@ 0xb0
 8007476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	32b0      	adds	r2, #176	@ 0xb0
 8007486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800748e:	2303      	movs	r3, #3
 8007490:	e018      	b.n	80074c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	7c1b      	ldrb	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800749a:	4b0c      	ldr	r3, [pc, #48]	@ (80074cc <USBD_CDC_ReceivePacket+0x68>)
 800749c:	7819      	ldrb	r1, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 ff9f 	bl	80093ec <USBD_LL_PrepareReceive>
 80074ae:	e008      	b.n	80074c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074b0:	4b06      	ldr	r3, [pc, #24]	@ (80074cc <USBD_CDC_ReceivePacket+0x68>)
 80074b2:	7819      	ldrb	r1, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074ba:	2340      	movs	r3, #64	@ 0x40
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 ff95 	bl	80093ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20000094 	.word	0x20000094

080074d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e01f      	b.n	8007528 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	79fa      	ldrb	r2, [r7, #7]
 800751a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f001 fe09 	bl	8009134 <USBD_LL_Init>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	e025      	b.n	8007594 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	32ae      	adds	r2, #174	@ 0xae
 800755a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	32ae      	adds	r2, #174	@ 0xae
 800756e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	f107 020e 	add.w	r2, r7, #14
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	4602      	mov	r2, r0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fe17 	bl	80091d8 <USBD_LL_Start>
 80075aa:	4603      	mov	r3, r0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	78fa      	ldrb	r2, [r7, #3]
 80075ee:	4611      	mov	r1, r2
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4798      	blx	r3
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	4611      	mov	r1, r2
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007628:	2303      	movs	r3, #3
 800762a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	4618      	mov	r0, r3
 800764a:	f001 f936 	bl	80088ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800766a:	f003 031f 	and.w	r3, r3, #31
 800766e:	2b02      	cmp	r3, #2
 8007670:	d01a      	beq.n	80076a8 <USBD_LL_SetupStage+0x72>
 8007672:	2b02      	cmp	r3, #2
 8007674:	d822      	bhi.n	80076bc <USBD_LL_SetupStage+0x86>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <USBD_LL_SetupStage+0x4a>
 800767a:	2b01      	cmp	r3, #1
 800767c:	d00a      	beq.n	8007694 <USBD_LL_SetupStage+0x5e>
 800767e:	e01d      	b.n	80076bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fb63 	bl	8007d54 <USBD_StdDevReq>
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
      break;
 8007692:	e020      	b.n	80076d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fbcb 	bl	8007e38 <USBD_StdItfReq>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]
      break;
 80076a6:	e016      	b.n	80076d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fc2d 	bl	8007f10 <USBD_StdEPReq>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ba:	e00c      	b.n	80076d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80076c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fde4 	bl	8009298 <USBD_LL_StallEP>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]
      break;
 80076d4:	bf00      	nop
  }

  return ret;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	460b      	mov	r3, r1
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d16e      	bne.n	80077d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80076fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007706:	2b03      	cmp	r3, #3
 8007708:	f040 8098 	bne.w	800783c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	429a      	cmp	r2, r3
 8007716:	d913      	bls.n	8007740 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	1ad2      	subs	r2, r2, r3
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	4293      	cmp	r3, r2
 8007730:	bf28      	it	cs
 8007732:	4613      	movcs	r3, r2
 8007734:	461a      	mov	r2, r3
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f001 f9be 	bl	8008aba <USBD_CtlContinueRx>
 800773e:	e07d      	b.n	800783c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007746:	f003 031f 	and.w	r3, r3, #31
 800774a:	2b02      	cmp	r3, #2
 800774c:	d014      	beq.n	8007778 <USBD_LL_DataOutStage+0x98>
 800774e:	2b02      	cmp	r3, #2
 8007750:	d81d      	bhi.n	800778e <USBD_LL_DataOutStage+0xae>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <USBD_LL_DataOutStage+0x7c>
 8007756:	2b01      	cmp	r3, #1
 8007758:	d003      	beq.n	8007762 <USBD_LL_DataOutStage+0x82>
 800775a:	e018      	b.n	800778e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	75bb      	strb	r3, [r7, #22]
            break;
 8007760:	e018      	b.n	8007794 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007768:	b2db      	uxtb	r3, r3
 800776a:	4619      	mov	r1, r3
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 fa64 	bl	8007c3a <USBD_CoreFindIF>
 8007772:	4603      	mov	r3, r0
 8007774:	75bb      	strb	r3, [r7, #22]
            break;
 8007776:	e00d      	b.n	8007794 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800777e:	b2db      	uxtb	r3, r3
 8007780:	4619      	mov	r1, r3
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 fa66 	bl	8007c54 <USBD_CoreFindEP>
 8007788:	4603      	mov	r3, r0
 800778a:	75bb      	strb	r3, [r7, #22]
            break;
 800778c:	e002      	b.n	8007794 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	75bb      	strb	r3, [r7, #22]
            break;
 8007792:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007794:	7dbb      	ldrb	r3, [r7, #22]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d119      	bne.n	80077ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d113      	bne.n	80077ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80077a6:	7dba      	ldrb	r2, [r7, #22]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	32ae      	adds	r2, #174	@ 0xae
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80077b6:	7dba      	ldrb	r2, [r7, #22]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80077be:	7dba      	ldrb	r2, [r7, #22]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	32ae      	adds	r2, #174	@ 0xae
 80077c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f001 f984 	bl	8008adc <USBD_CtlSendStatus>
 80077d4:	e032      	b.n	800783c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	4619      	mov	r1, r3
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fa37 	bl	8007c54 <USBD_CoreFindEP>
 80077e6:	4603      	mov	r3, r0
 80077e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077ea:	7dbb      	ldrb	r3, [r7, #22]
 80077ec:	2bff      	cmp	r3, #255	@ 0xff
 80077ee:	d025      	beq.n	800783c <USBD_LL_DataOutStage+0x15c>
 80077f0:	7dbb      	ldrb	r3, [r7, #22]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d122      	bne.n	800783c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d117      	bne.n	8007832 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007802:	7dba      	ldrb	r2, [r7, #22]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	32ae      	adds	r2, #174	@ 0xae
 8007808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00f      	beq.n	8007832 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007812:	7dba      	ldrb	r2, [r7, #22]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800781a:	7dba      	ldrb	r2, [r7, #22]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	32ae      	adds	r2, #174	@ 0xae
 8007820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	7afa      	ldrb	r2, [r7, #11]
 8007828:	4611      	mov	r1, r2
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007832:	7dfb      	ldrb	r3, [r7, #23]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	e000      	b.n	800783e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	460b      	mov	r3, r1
 8007850:	607a      	str	r2, [r7, #4]
 8007852:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d16f      	bne.n	800793a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3314      	adds	r3, #20
 800785e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007866:	2b02      	cmp	r3, #2
 8007868:	d15a      	bne.n	8007920 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	429a      	cmp	r2, r3
 8007874:	d914      	bls.n	80078a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	461a      	mov	r2, r3
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f001 f8e6 	bl	8008a5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007892:	2300      	movs	r3, #0
 8007894:	2200      	movs	r2, #0
 8007896:	2100      	movs	r1, #0
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f001 fda7 	bl	80093ec <USBD_LL_PrepareReceive>
 800789e:	e03f      	b.n	8007920 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d11c      	bne.n	80078e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d316      	bcc.n	80078e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d20f      	bcs.n	80078e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078c6:	2200      	movs	r2, #0
 80078c8:	2100      	movs	r1, #0
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f001 f8c7 	bl	8008a5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078d8:	2300      	movs	r3, #0
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f001 fd84 	bl	80093ec <USBD_LL_PrepareReceive>
 80078e4:	e01c      	b.n	8007920 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d10f      	bne.n	8007912 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007912:	2180      	movs	r1, #128	@ 0x80
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f001 fcbf 	bl	8009298 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f001 f8f1 	bl	8008b02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d03a      	beq.n	80079a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff fe42 	bl	80075b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007938:	e032      	b.n	80079a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800793a:	7afb      	ldrb	r3, [r7, #11]
 800793c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007940:	b2db      	uxtb	r3, r3
 8007942:	4619      	mov	r1, r3
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f985 	bl	8007c54 <USBD_CoreFindEP>
 800794a:	4603      	mov	r3, r0
 800794c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	2bff      	cmp	r3, #255	@ 0xff
 8007952:	d025      	beq.n	80079a0 <USBD_LL_DataInStage+0x15a>
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d122      	bne.n	80079a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b03      	cmp	r3, #3
 8007964:	d11c      	bne.n	80079a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007966:	7dfa      	ldrb	r2, [r7, #23]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	32ae      	adds	r2, #174	@ 0xae
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d014      	beq.n	80079a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007976:	7dfa      	ldrb	r2, [r7, #23]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800797e:	7dfa      	ldrb	r2, [r7, #23]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	32ae      	adds	r2, #174	@ 0xae
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	7afa      	ldrb	r2, [r7, #11]
 800798c:	4611      	mov	r1, r2
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	4798      	blx	r3
 8007992:	4603      	mov	r3, r0
 8007994:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007996:	7dbb      	ldrb	r3, [r7, #22]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800799c:	7dbb      	ldrb	r3, [r7, #22]
 800799e:	e000      	b.n	80079a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d014      	beq.n	8007a10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00e      	beq.n	8007a10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	6852      	ldr	r2, [r2, #4]
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	4611      	mov	r1, r2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a10:	2340      	movs	r3, #64	@ 0x40
 8007a12:	2200      	movs	r2, #0
 8007a14:	2100      	movs	r1, #0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f001 fbf9 	bl	800920e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2240      	movs	r2, #64	@ 0x40
 8007a28:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a2c:	2340      	movs	r3, #64	@ 0x40
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2180      	movs	r1, #128	@ 0x80
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f001 fbeb 	bl	800920e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2240      	movs	r2, #64	@ 0x40
 8007a42:	621a      	str	r2, [r3, #32]

  return ret;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	460b      	mov	r3, r1
 8007a58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d006      	beq.n	8007a90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2204      	movs	r2, #4
 8007a94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b04      	cmp	r3, #4
 8007ab8:	d106      	bne.n	8007ac8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d110      	bne.n	8007b0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	32ae      	adds	r2, #174	@ 0xae
 8007b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e01c      	b.n	8007b72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d115      	bne.n	8007b70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	@ 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	32ae      	adds	r2, #174	@ 0xae
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	78fa      	ldrb	r2, [r7, #3]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	32ae      	adds	r2, #174	@ 0xae
 8007b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e01c      	b.n	8007bd6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d115      	bne.n	8007bd4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	32ae      	adds	r2, #174	@ 0xae
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00b      	beq.n	8007bd4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32ae      	adds	r2, #174	@ 0xae
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6852      	ldr	r2, [r2, #4]
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	4611      	mov	r1, r2
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	4798      	blx	r3
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b086      	sub	sp, #24
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	885b      	ldrh	r3, [r3, #2]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d91f      	bls.n	8007cd4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c9a:	e013      	b.n	8007cc4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c9c:	f107 030a 	add.w	r3, r7, #10
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6978      	ldr	r0, [r7, #20]
 8007ca4:	f000 f81b 	bl	8007cde <USBD_GetNextDesc>
 8007ca8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b05      	cmp	r3, #5
 8007cb0:	d108      	bne.n	8007cc4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	789b      	ldrb	r3, [r3, #2]
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d008      	beq.n	8007cd2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	885b      	ldrh	r3, [r3, #2]
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	897b      	ldrh	r3, [r7, #10]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d8e5      	bhi.n	8007c9c <USBD_GetEpDesc+0x2e>
 8007cd0:	e000      	b.n	8007cd4 <USBD_GetEpDesc+0x66>
          break;
 8007cd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007cd4:	693b      	ldr	r3, [r7, #16]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	7812      	ldrb	r2, [r2, #0]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4413      	add	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d08:	68fb      	ldr	r3, [r7, #12]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b087      	sub	sp, #28
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d34:	8a3b      	ldrh	r3, [r7, #16]
 8007d36:	021b      	lsls	r3, r3, #8
 8007d38:	b21a      	sxth	r2, r3
 8007d3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d44:	89fb      	ldrh	r3, [r7, #14]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d6a:	2b40      	cmp	r3, #64	@ 0x40
 8007d6c:	d005      	beq.n	8007d7a <USBD_StdDevReq+0x26>
 8007d6e:	2b40      	cmp	r3, #64	@ 0x40
 8007d70:	d857      	bhi.n	8007e22 <USBD_StdDevReq+0xce>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00f      	beq.n	8007d96 <USBD_StdDevReq+0x42>
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d153      	bne.n	8007e22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	32ae      	adds	r2, #174	@ 0xae
 8007d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	4798      	blx	r3
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
      break;
 8007d94:	e04a      	b.n	8007e2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	2b09      	cmp	r3, #9
 8007d9c:	d83b      	bhi.n	8007e16 <USBD_StdDevReq+0xc2>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <USBD_StdDevReq+0x50>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007df9 	.word	0x08007df9
 8007da8:	08007e0d 	.word	0x08007e0d
 8007dac:	08007e17 	.word	0x08007e17
 8007db0:	08007e03 	.word	0x08007e03
 8007db4:	08007e17 	.word	0x08007e17
 8007db8:	08007dd7 	.word	0x08007dd7
 8007dbc:	08007dcd 	.word	0x08007dcd
 8007dc0:	08007e17 	.word	0x08007e17
 8007dc4:	08007def 	.word	0x08007def
 8007dc8:	08007de1 	.word	0x08007de1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa3c 	bl	800824c <USBD_GetDescriptor>
          break;
 8007dd4:	e024      	b.n	8007e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fbcb 	bl	8008574 <USBD_SetAddress>
          break;
 8007dde:	e01f      	b.n	8007e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fc0a 	bl	80085fc <USBD_SetConfig>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]
          break;
 8007dec:	e018      	b.n	8007e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fcad 	bl	8008750 <USBD_GetConfig>
          break;
 8007df6:	e013      	b.n	8007e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fcde 	bl	80087bc <USBD_GetStatus>
          break;
 8007e00:	e00e      	b.n	8007e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fd0d 	bl	8008824 <USBD_SetFeature>
          break;
 8007e0a:	e009      	b.n	8007e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fd31 	bl	8008876 <USBD_ClrFeature>
          break;
 8007e14:	e004      	b.n	8007e20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fd88 	bl	800892e <USBD_CtlError>
          break;
 8007e1e:	bf00      	nop
      }
      break;
 8007e20:	e004      	b.n	8007e2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fd82 	bl	800892e <USBD_CtlError>
      break;
 8007e2a:	bf00      	nop
  }

  return ret;
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop

08007e38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e4e:	2b40      	cmp	r3, #64	@ 0x40
 8007e50:	d005      	beq.n	8007e5e <USBD_StdItfReq+0x26>
 8007e52:	2b40      	cmp	r3, #64	@ 0x40
 8007e54:	d852      	bhi.n	8007efc <USBD_StdItfReq+0xc4>
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <USBD_StdItfReq+0x26>
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d14e      	bne.n	8007efc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	3b01      	subs	r3, #1
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d840      	bhi.n	8007eee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	889b      	ldrh	r3, [r3, #4]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d836      	bhi.n	8007ee4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	889b      	ldrh	r3, [r3, #4]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff fedb 	bl	8007c3a <USBD_CoreFindIF>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2bff      	cmp	r3, #255	@ 0xff
 8007e8c:	d01d      	beq.n	8007eca <USBD_StdItfReq+0x92>
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d11a      	bne.n	8007eca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e94:	7bba      	ldrb	r2, [r7, #14]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	32ae      	adds	r2, #174	@ 0xae
 8007e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00f      	beq.n	8007ec4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ea4:	7bba      	ldrb	r2, [r7, #14]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007eac:	7bba      	ldrb	r2, [r7, #14]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	32ae      	adds	r2, #174	@ 0xae
 8007eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ec2:	e004      	b.n	8007ece <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ec8:	e001      	b.n	8007ece <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	88db      	ldrh	r3, [r3, #6]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d110      	bne.n	8007ef8 <USBD_StdItfReq+0xc0>
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10d      	bne.n	8007ef8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fdfd 	bl	8008adc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ee2:	e009      	b.n	8007ef8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fd21 	bl	800892e <USBD_CtlError>
          break;
 8007eec:	e004      	b.n	8007ef8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fd1c 	bl	800892e <USBD_CtlError>
          break;
 8007ef6:	e000      	b.n	8007efa <USBD_StdItfReq+0xc2>
          break;
 8007ef8:	bf00      	nop
      }
      break;
 8007efa:	e004      	b.n	8007f06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fd15 	bl	800892e <USBD_CtlError>
      break;
 8007f04:	bf00      	nop
  }

  return ret;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	889b      	ldrh	r3, [r3, #4]
 8007f22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f2c:	2b40      	cmp	r3, #64	@ 0x40
 8007f2e:	d007      	beq.n	8007f40 <USBD_StdEPReq+0x30>
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	f200 817f 	bhi.w	8008234 <USBD_StdEPReq+0x324>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d02a      	beq.n	8007f90 <USBD_StdEPReq+0x80>
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	f040 817a 	bne.w	8008234 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fe85 	bl	8007c54 <USBD_CoreFindEP>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f4e:	7b7b      	ldrb	r3, [r7, #13]
 8007f50:	2bff      	cmp	r3, #255	@ 0xff
 8007f52:	f000 8174 	beq.w	800823e <USBD_StdEPReq+0x32e>
 8007f56:	7b7b      	ldrb	r3, [r7, #13]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f040 8170 	bne.w	800823e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f5e:	7b7a      	ldrb	r2, [r7, #13]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f66:	7b7a      	ldrb	r2, [r7, #13]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	32ae      	adds	r2, #174	@ 0xae
 8007f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 8163 	beq.w	800823e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f78:	7b7a      	ldrb	r2, [r7, #13]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	32ae      	adds	r2, #174	@ 0xae
 8007f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	4798      	blx	r3
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f8e:	e156      	b.n	800823e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d008      	beq.n	8007faa <USBD_StdEPReq+0x9a>
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	f300 8145 	bgt.w	8008228 <USBD_StdEPReq+0x318>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 809b 	beq.w	80080da <USBD_StdEPReq+0x1ca>
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d03c      	beq.n	8008022 <USBD_StdEPReq+0x112>
 8007fa8:	e13e      	b.n	8008228 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d002      	beq.n	8007fbc <USBD_StdEPReq+0xac>
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d016      	beq.n	8007fe8 <USBD_StdEPReq+0xd8>
 8007fba:	e02c      	b.n	8008016 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00d      	beq.n	8007fde <USBD_StdEPReq+0xce>
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	2b80      	cmp	r3, #128	@ 0x80
 8007fc6:	d00a      	beq.n	8007fde <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f963 	bl	8009298 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fd2:	2180      	movs	r1, #128	@ 0x80
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f95f 	bl	8009298 <USBD_LL_StallEP>
 8007fda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fdc:	e020      	b.n	8008020 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fca4 	bl	800892e <USBD_CtlError>
              break;
 8007fe6:	e01b      	b.n	8008020 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	885b      	ldrh	r3, [r3, #2]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10e      	bne.n	800800e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <USBD_StdEPReq+0xfe>
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b80      	cmp	r3, #128	@ 0x80
 8007ffa:	d008      	beq.n	800800e <USBD_StdEPReq+0xfe>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	88db      	ldrh	r3, [r3, #6]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d104      	bne.n	800800e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f945 	bl	8009298 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fd64 	bl	8008adc <USBD_CtlSendStatus>

              break;
 8008014:	e004      	b.n	8008020 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fc88 	bl	800892e <USBD_CtlError>
              break;
 800801e:	bf00      	nop
          }
          break;
 8008020:	e107      	b.n	8008232 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d002      	beq.n	8008034 <USBD_StdEPReq+0x124>
 800802e:	2b03      	cmp	r3, #3
 8008030:	d016      	beq.n	8008060 <USBD_StdEPReq+0x150>
 8008032:	e04b      	b.n	80080cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008034:	7bbb      	ldrb	r3, [r7, #14]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00d      	beq.n	8008056 <USBD_StdEPReq+0x146>
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b80      	cmp	r3, #128	@ 0x80
 800803e:	d00a      	beq.n	8008056 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f927 	bl	8009298 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800804a:	2180      	movs	r1, #128	@ 0x80
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 f923 	bl	8009298 <USBD_LL_StallEP>
 8008052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008054:	e040      	b.n	80080d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fc68 	bl	800892e <USBD_CtlError>
              break;
 800805e:	e03b      	b.n	80080d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d136      	bne.n	80080d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 f92d 	bl	80092d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fd2d 	bl	8008adc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7ff fde4 	bl	8007c54 <USBD_CoreFindEP>
 800808c:	4603      	mov	r3, r0
 800808e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008090:	7b7b      	ldrb	r3, [r7, #13]
 8008092:	2bff      	cmp	r3, #255	@ 0xff
 8008094:	d01f      	beq.n	80080d6 <USBD_StdEPReq+0x1c6>
 8008096:	7b7b      	ldrb	r3, [r7, #13]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11c      	bne.n	80080d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800809c:	7b7a      	ldrb	r2, [r7, #13]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80080a4:	7b7a      	ldrb	r2, [r7, #13]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32ae      	adds	r2, #174	@ 0xae
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d010      	beq.n	80080d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080b4:	7b7a      	ldrb	r2, [r7, #13]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32ae      	adds	r2, #174	@ 0xae
 80080ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80080ca:	e004      	b.n	80080d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fc2d 	bl	800892e <USBD_CtlError>
              break;
 80080d4:	e000      	b.n	80080d8 <USBD_StdEPReq+0x1c8>
              break;
 80080d6:	bf00      	nop
          }
          break;
 80080d8:	e0ab      	b.n	8008232 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d002      	beq.n	80080ec <USBD_StdEPReq+0x1dc>
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d032      	beq.n	8008150 <USBD_StdEPReq+0x240>
 80080ea:	e097      	b.n	800821c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d007      	beq.n	8008102 <USBD_StdEPReq+0x1f2>
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b80      	cmp	r3, #128	@ 0x80
 80080f6:	d004      	beq.n	8008102 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fc17 	bl	800892e <USBD_CtlError>
                break;
 8008100:	e091      	b.n	8008226 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008106:	2b00      	cmp	r3, #0
 8008108:	da0b      	bge.n	8008122 <USBD_StdEPReq+0x212>
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	3310      	adds	r3, #16
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	3304      	adds	r3, #4
 8008120:	e00b      	b.n	800813a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	3304      	adds	r3, #4
 800813a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2202      	movs	r2, #2
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fc6d 	bl	8008a28 <USBD_CtlSendData>
              break;
 800814e:	e06a      	b.n	8008226 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008154:	2b00      	cmp	r3, #0
 8008156:	da11      	bge.n	800817c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	f003 020f 	and.w	r2, r3, #15
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	3324      	adds	r3, #36	@ 0x24
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d117      	bne.n	80081a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fbda 	bl	800892e <USBD_CtlError>
                  break;
 800817a:	e054      	b.n	8008226 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	f003 020f 	and.w	r2, r3, #15
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d104      	bne.n	80081a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fbc7 	bl	800892e <USBD_CtlError>
                  break;
 80081a0:	e041      	b.n	8008226 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da0b      	bge.n	80081c2 <USBD_StdEPReq+0x2b2>
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	3310      	adds	r3, #16
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4413      	add	r3, r2
 80081be:	3304      	adds	r3, #4
 80081c0:	e00b      	b.n	80081da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	3304      	adds	r3, #4
 80081da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <USBD_StdEPReq+0x2d8>
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b80      	cmp	r3, #128	@ 0x80
 80081e6:	d103      	bne.n	80081f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	e00e      	b.n	800820e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f001 f88d 	bl	8009314 <USBD_LL_IsStallEP>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2201      	movs	r2, #1
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e002      	b.n	800820e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2202      	movs	r2, #2
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc07 	bl	8008a28 <USBD_CtlSendData>
              break;
 800821a:	e004      	b.n	8008226 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fb85 	bl	800892e <USBD_CtlError>
              break;
 8008224:	bf00      	nop
          }
          break;
 8008226:	e004      	b.n	8008232 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fb7f 	bl	800892e <USBD_CtlError>
          break;
 8008230:	bf00      	nop
      }
      break;
 8008232:	e005      	b.n	8008240 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fb79 	bl	800892e <USBD_CtlError>
      break;
 800823c:	e000      	b.n	8008240 <USBD_StdEPReq+0x330>
      break;
 800823e:	bf00      	nop
  }

  return ret;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	0a1b      	lsrs	r3, r3, #8
 8008268:	b29b      	uxth	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	2b0e      	cmp	r3, #14
 800826e:	f200 8152 	bhi.w	8008516 <USBD_GetDescriptor+0x2ca>
 8008272:	a201      	add	r2, pc, #4	@ (adr r2, 8008278 <USBD_GetDescriptor+0x2c>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	080082e9 	.word	0x080082e9
 800827c:	08008301 	.word	0x08008301
 8008280:	08008341 	.word	0x08008341
 8008284:	08008517 	.word	0x08008517
 8008288:	08008517 	.word	0x08008517
 800828c:	080084b7 	.word	0x080084b7
 8008290:	080084e3 	.word	0x080084e3
 8008294:	08008517 	.word	0x08008517
 8008298:	08008517 	.word	0x08008517
 800829c:	08008517 	.word	0x08008517
 80082a0:	08008517 	.word	0x08008517
 80082a4:	08008517 	.word	0x08008517
 80082a8:	08008517 	.word	0x08008517
 80082ac:	08008517 	.word	0x08008517
 80082b0:	080082b5 	.word	0x080082b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00b      	beq.n	80082d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	7c12      	ldrb	r2, [r2, #16]
 80082cc:	f107 0108 	add.w	r1, r7, #8
 80082d0:	4610      	mov	r0, r2
 80082d2:	4798      	blx	r3
 80082d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082d6:	e126      	b.n	8008526 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fb27 	bl	800892e <USBD_CtlError>
        err++;
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	3301      	adds	r3, #1
 80082e4:	72fb      	strb	r3, [r7, #11]
      break;
 80082e6:	e11e      	b.n	8008526 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
      break;
 80082fe:	e112      	b.n	8008526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	7c1b      	ldrb	r3, [r3, #16]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10d      	bne.n	8008324 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800830e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008310:	f107 0208 	add.w	r2, r7, #8
 8008314:	4610      	mov	r0, r2
 8008316:	4798      	blx	r3
 8008318:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3301      	adds	r3, #1
 800831e:	2202      	movs	r2, #2
 8008320:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008322:	e100      	b.n	8008526 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800832a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800832c:	f107 0208 	add.w	r2, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3301      	adds	r3, #1
 800833a:	2202      	movs	r2, #2
 800833c:	701a      	strb	r2, [r3, #0]
      break;
 800833e:	e0f2      	b.n	8008526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	885b      	ldrh	r3, [r3, #2]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b05      	cmp	r3, #5
 8008348:	f200 80ac 	bhi.w	80084a4 <USBD_GetDescriptor+0x258>
 800834c:	a201      	add	r2, pc, #4	@ (adr r2, 8008354 <USBD_GetDescriptor+0x108>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	0800836d 	.word	0x0800836d
 8008358:	080083a1 	.word	0x080083a1
 800835c:	080083d5 	.word	0x080083d5
 8008360:	08008409 	.word	0x08008409
 8008364:	0800843d 	.word	0x0800843d
 8008368:	08008471 	.word	0x08008471
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800838e:	e091      	b.n	80084b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 facb 	bl	800892e <USBD_CtlError>
            err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
          break;
 800839e:	e089      	b.n	80084b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c2:	e077      	b.n	80084b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fab1 	bl	800892e <USBD_CtlError>
            err++;
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	3301      	adds	r3, #1
 80083d0:	72fb      	strb	r3, [r7, #11]
          break;
 80083d2:	e06f      	b.n	80084b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	7c12      	ldrb	r2, [r2, #16]
 80083ec:	f107 0108 	add.w	r1, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f6:	e05d      	b.n	80084b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa97 	bl	800892e <USBD_CtlError>
            err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
          break;
 8008406:	e055      	b.n	80084b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	7c12      	ldrb	r2, [r2, #16]
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
 8008428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842a:	e043      	b.n	80084b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa7d 	bl	800892e <USBD_CtlError>
            err++;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	3301      	adds	r3, #1
 8008438:	72fb      	strb	r3, [r7, #11]
          break;
 800843a:	e03b      	b.n	80084b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	7c12      	ldrb	r2, [r2, #16]
 8008454:	f107 0108 	add.w	r1, r7, #8
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800845e:	e029      	b.n	80084b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa63 	bl	800892e <USBD_CtlError>
            err++;
 8008468:	7afb      	ldrb	r3, [r7, #11]
 800846a:	3301      	adds	r3, #1
 800846c:	72fb      	strb	r3, [r7, #11]
          break;
 800846e:	e021      	b.n	80084b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7c12      	ldrb	r2, [r2, #16]
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008492:	e00f      	b.n	80084b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa49 	bl	800892e <USBD_CtlError>
            err++;
 800849c:	7afb      	ldrb	r3, [r7, #11]
 800849e:	3301      	adds	r3, #1
 80084a0:	72fb      	strb	r3, [r7, #11]
          break;
 80084a2:	e007      	b.n	80084b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa41 	bl	800892e <USBD_CtlError>
          err++;
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	3301      	adds	r3, #1
 80084b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80084b2:	bf00      	nop
      }
      break;
 80084b4:	e037      	b.n	8008526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7c1b      	ldrb	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d109      	bne.n	80084d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c6:	f107 0208 	add.w	r2, r7, #8
 80084ca:	4610      	mov	r0, r2
 80084cc:	4798      	blx	r3
 80084ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084d0:	e029      	b.n	8008526 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa2a 	bl	800892e <USBD_CtlError>
        err++;
 80084da:	7afb      	ldrb	r3, [r7, #11]
 80084dc:	3301      	adds	r3, #1
 80084de:	72fb      	strb	r3, [r7, #11]
      break;
 80084e0:	e021      	b.n	8008526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7c1b      	ldrb	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10d      	bne.n	8008506 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f2:	f107 0208 	add.w	r2, r7, #8
 80084f6:	4610      	mov	r0, r2
 80084f8:	4798      	blx	r3
 80084fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	3301      	adds	r3, #1
 8008500:	2207      	movs	r2, #7
 8008502:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008504:	e00f      	b.n	8008526 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fa10 	bl	800892e <USBD_CtlError>
        err++;
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	3301      	adds	r3, #1
 8008512:	72fb      	strb	r3, [r7, #11]
      break;
 8008514:	e007      	b.n	8008526 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008516:	6839      	ldr	r1, [r7, #0]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fa08 	bl	800892e <USBD_CtlError>
      err++;
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	3301      	adds	r3, #1
 8008522:	72fb      	strb	r3, [r7, #11]
      break;
 8008524:	bf00      	nop
  }

  if (err != 0U)
 8008526:	7afb      	ldrb	r3, [r7, #11]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d11e      	bne.n	800856a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d016      	beq.n	8008562 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00e      	beq.n	8008558 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	88da      	ldrh	r2, [r3, #6]
 800853e:	893b      	ldrh	r3, [r7, #8]
 8008540:	4293      	cmp	r3, r2
 8008542:	bf28      	it	cs
 8008544:	4613      	movcs	r3, r2
 8008546:	b29b      	uxth	r3, r3
 8008548:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800854a:	893b      	ldrh	r3, [r7, #8]
 800854c:	461a      	mov	r2, r3
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa69 	bl	8008a28 <USBD_CtlSendData>
 8008556:	e009      	b.n	800856c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f9e7 	bl	800892e <USBD_CtlError>
 8008560:	e004      	b.n	800856c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 faba 	bl	8008adc <USBD_CtlSendStatus>
 8008568:	e000      	b.n	800856c <USBD_GetDescriptor+0x320>
    return;
 800856a:	bf00      	nop
  }
}
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop

08008574 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	889b      	ldrh	r3, [r3, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d131      	bne.n	80085ea <USBD_SetAddress+0x76>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	88db      	ldrh	r3, [r3, #6]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d12d      	bne.n	80085ea <USBD_SetAddress+0x76>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	2b7f      	cmp	r3, #127	@ 0x7f
 8008594:	d829      	bhi.n	80085ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d104      	bne.n	80085b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f9bc 	bl	800892e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	e01d      	b.n	80085f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7bfa      	ldrb	r2, [r7, #15]
 80085bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fed1 	bl	800936c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fa86 	bl	8008adc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085de:	e009      	b.n	80085f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e8:	e004      	b.n	80085f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f99e 	bl	800892e <USBD_CtlError>
  }
}
 80085f2:	bf00      	nop
 80085f4:	bf00      	nop
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	885b      	ldrh	r3, [r3, #2]
 800860e:	b2da      	uxtb	r2, r3
 8008610:	4b4e      	ldr	r3, [pc, #312]	@ (800874c <USBD_SetConfig+0x150>)
 8008612:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008614:	4b4d      	ldr	r3, [pc, #308]	@ (800874c <USBD_SetConfig+0x150>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d905      	bls.n	8008628 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f985 	bl	800892e <USBD_CtlError>
    return USBD_FAIL;
 8008624:	2303      	movs	r3, #3
 8008626:	e08c      	b.n	8008742 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800862e:	b2db      	uxtb	r3, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d002      	beq.n	800863a <USBD_SetConfig+0x3e>
 8008634:	2b03      	cmp	r3, #3
 8008636:	d029      	beq.n	800868c <USBD_SetConfig+0x90>
 8008638:	e075      	b.n	8008726 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800863a:	4b44      	ldr	r3, [pc, #272]	@ (800874c <USBD_SetConfig+0x150>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d020      	beq.n	8008684 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008642:	4b42      	ldr	r3, [pc, #264]	@ (800874c <USBD_SetConfig+0x150>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800864c:	4b3f      	ldr	r3, [pc, #252]	@ (800874c <USBD_SetConfig+0x150>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7fe ffb9 	bl	80075ca <USBD_SetClassConfig>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d008      	beq.n	8008674 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f962 	bl	800892e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008672:	e065      	b.n	8008740 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fa31 	bl	8008adc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2203      	movs	r2, #3
 800867e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008682:	e05d      	b.n	8008740 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fa29 	bl	8008adc <USBD_CtlSendStatus>
      break;
 800868a:	e059      	b.n	8008740 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800868c:	4b2f      	ldr	r3, [pc, #188]	@ (800874c <USBD_SetConfig+0x150>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d112      	bne.n	80086ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800869c:	4b2b      	ldr	r3, [pc, #172]	@ (800874c <USBD_SetConfig+0x150>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086a6:	4b29      	ldr	r3, [pc, #164]	@ (800874c <USBD_SetConfig+0x150>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f7fe ffa8 	bl	8007602 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa12 	bl	8008adc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80086b8:	e042      	b.n	8008740 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80086ba:	4b24      	ldr	r3, [pc, #144]	@ (800874c <USBD_SetConfig+0x150>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d02a      	beq.n	800871e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7fe ff96 	bl	8007602 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80086d6:	4b1d      	ldr	r3, [pc, #116]	@ (800874c <USBD_SetConfig+0x150>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80086e0:	4b1a      	ldr	r3, [pc, #104]	@ (800874c <USBD_SetConfig+0x150>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	4619      	mov	r1, r3
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fe ff6f 	bl	80075ca <USBD_SetClassConfig>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00f      	beq.n	8008716 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f918 	bl	800892e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7fe ff7b 	bl	8007602 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008714:	e014      	b.n	8008740 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f9e0 	bl	8008adc <USBD_CtlSendStatus>
      break;
 800871c:	e010      	b.n	8008740 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f9dc 	bl	8008adc <USBD_CtlSendStatus>
      break;
 8008724:	e00c      	b.n	8008740 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f900 	bl	800892e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800872e:	4b07      	ldr	r3, [pc, #28]	@ (800874c <USBD_SetConfig+0x150>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f7fe ff64 	bl	8007602 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
      break;
 800873e:	bf00      	nop
  }

  return ret;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000650 	.word	0x20000650

08008750 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	88db      	ldrh	r3, [r3, #6]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d004      	beq.n	800876c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f8e2 	bl	800892e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800876a:	e023      	b.n	80087b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	dc02      	bgt.n	800877e <USBD_GetConfig+0x2e>
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc03      	bgt.n	8008784 <USBD_GetConfig+0x34>
 800877c:	e015      	b.n	80087aa <USBD_GetConfig+0x5a>
 800877e:	2b03      	cmp	r3, #3
 8008780:	d00b      	beq.n	800879a <USBD_GetConfig+0x4a>
 8008782:	e012      	b.n	80087aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	3308      	adds	r3, #8
 800878e:	2201      	movs	r2, #1
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f948 	bl	8008a28 <USBD_CtlSendData>
        break;
 8008798:	e00c      	b.n	80087b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3304      	adds	r3, #4
 800879e:	2201      	movs	r2, #1
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f940 	bl	8008a28 <USBD_CtlSendData>
        break;
 80087a8:	e004      	b.n	80087b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f8be 	bl	800892e <USBD_CtlError>
        break;
 80087b2:	bf00      	nop
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d81e      	bhi.n	8008812 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	88db      	ldrh	r3, [r3, #6]
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d004      	beq.n	80087e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f8a5 	bl	800892e <USBD_CtlError>
        break;
 80087e4:	e01a      	b.n	800881c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d005      	beq.n	8008802 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f043 0202 	orr.w	r2, r3, #2
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	330c      	adds	r3, #12
 8008806:	2202      	movs	r2, #2
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f90c 	bl	8008a28 <USBD_CtlSendData>
      break;
 8008810:	e004      	b.n	800881c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f88a 	bl	800892e <USBD_CtlError>
      break;
 800881a:	bf00      	nop
  }
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	885b      	ldrh	r3, [r3, #2]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d107      	bne.n	8008846 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f94c 	bl	8008adc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008844:	e013      	b.n	800886e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	2b02      	cmp	r3, #2
 800884c:	d10b      	bne.n	8008866 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	889b      	ldrh	r3, [r3, #4]
 8008852:	0a1b      	lsrs	r3, r3, #8
 8008854:	b29b      	uxth	r3, r3
 8008856:	b2da      	uxtb	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f93c 	bl	8008adc <USBD_CtlSendStatus>
}
 8008864:	e003      	b.n	800886e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f860 	bl	800892e <USBD_CtlError>
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008886:	b2db      	uxtb	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	2b02      	cmp	r3, #2
 800888c:	d80b      	bhi.n	80088a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	885b      	ldrh	r3, [r3, #2]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d10c      	bne.n	80088b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f91c 	bl	8008adc <USBD_CtlSendStatus>
      }
      break;
 80088a4:	e004      	b.n	80088b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f840 	bl	800892e <USBD_CtlError>
      break;
 80088ae:	e000      	b.n	80088b2 <USBD_ClrFeature+0x3c>
      break;
 80088b0:	bf00      	nop
  }
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	781a      	ldrb	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff fa16 	bl	8007d16 <SWAPBYTE>
 80088ea:	4603      	mov	r3, r0
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3301      	adds	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fa09 	bl	8007d16 <SWAPBYTE>
 8008904:	4603      	mov	r3, r0
 8008906:	461a      	mov	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3301      	adds	r3, #1
 8008910:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3301      	adds	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7ff f9fc 	bl	8007d16 <SWAPBYTE>
 800891e:	4603      	mov	r3, r0
 8008920:	461a      	mov	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	80da      	strh	r2, [r3, #6]
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008938:	2180      	movs	r1, #128	@ 0x80
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fcac 	bl	8009298 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fca8 	bl	8009298 <USBD_LL_StallEP>
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d042      	beq.n	80089ec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800896a:	6938      	ldr	r0, [r7, #16]
 800896c:	f000 f842 	bl	80089f4 <USBD_GetLen>
 8008970:	4603      	mov	r3, r0
 8008972:	3301      	adds	r3, #1
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800897a:	d808      	bhi.n	800898e <USBD_GetString+0x3e>
 800897c:	6938      	ldr	r0, [r7, #16]
 800897e:	f000 f839 	bl	80089f4 <USBD_GetLen>
 8008982:	4603      	mov	r3, r0
 8008984:	3301      	adds	r3, #1
 8008986:	b29b      	uxth	r3, r3
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	b29a      	uxth	r2, r3
 800898c:	e001      	b.n	8008992 <USBD_GetString+0x42>
 800898e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008996:	7dfb      	ldrb	r3, [r7, #23]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	4413      	add	r3, r2
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	3301      	adds	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4413      	add	r3, r2
 80089ae:	2203      	movs	r2, #3
 80089b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
 80089b4:	3301      	adds	r3, #1
 80089b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089b8:	e013      	b.n	80089e2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	4413      	add	r3, r2
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	7812      	ldrb	r2, [r2, #0]
 80089c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	3301      	adds	r3, #1
 80089ca:	613b      	str	r3, [r7, #16]
    idx++;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	3301      	adds	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	4413      	add	r3, r2
 80089d8:	2200      	movs	r2, #0
 80089da:	701a      	strb	r2, [r3, #0]
    idx++;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	3301      	adds	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e7      	bne.n	80089ba <USBD_GetString+0x6a>
 80089ea:	e000      	b.n	80089ee <USBD_GetString+0x9e>
    return;
 80089ec:	bf00      	nop
  }
}
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a04:	e005      	b.n	8008a12 <USBD_GetLen+0x1e>
  {
    len++;
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1f5      	bne.n	8008a06 <USBD_GetLen+0x12>
  }

  return len;
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fcab 	bl	80093aa <USBD_LL_Transmit>

  return USBD_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	2100      	movs	r1, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fc9a 	bl	80093aa <USBD_LL_Transmit>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2203      	movs	r2, #3
 8008a90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 fc9e 	bl	80093ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	2100      	movs	r1, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fc8d 	bl	80093ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008aec:	2300      	movs	r3, #0
 8008aee:	2200      	movs	r2, #0
 8008af0:	2100      	movs	r1, #0
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fc59 	bl	80093aa <USBD_LL_Transmit>

  return USBD_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2205      	movs	r2, #5
 8008b0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b12:	2300      	movs	r3, #0
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fc67 	bl	80093ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	4912      	ldr	r1, [pc, #72]	@ (8008b78 <MX_USB_DEVICE_Init+0x50>)
 8008b30:	4812      	ldr	r0, [pc, #72]	@ (8008b7c <MX_USB_DEVICE_Init+0x54>)
 8008b32:	f7fe fccd 	bl	80074d0 <USBD_Init>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b3c:	f7f7 fce2 	bl	8000504 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8008b40:	490f      	ldr	r1, [pc, #60]	@ (8008b80 <MX_USB_DEVICE_Init+0x58>)
 8008b42:	480e      	ldr	r0, [pc, #56]	@ (8008b7c <MX_USB_DEVICE_Init+0x54>)
 8008b44:	f7fe fcf4 	bl	8007530 <USBD_RegisterClass>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b4e:	f7f7 fcd9 	bl	8000504 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8008b52:	490c      	ldr	r1, [pc, #48]	@ (8008b84 <MX_USB_DEVICE_Init+0x5c>)
 8008b54:	4809      	ldr	r0, [pc, #36]	@ (8008b7c <MX_USB_DEVICE_Init+0x54>)
 8008b56:	f7fe fbeb 	bl	8007330 <USBD_CDC_RegisterInterface>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b60:	f7f7 fcd0 	bl	8000504 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008b64:	4805      	ldr	r0, [pc, #20]	@ (8008b7c <MX_USB_DEVICE_Init+0x54>)
 8008b66:	f7fe fd19 	bl	800759c <USBD_Start>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b70:	f7f7 fcc8 	bl	8000504 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b74:	bf00      	nop
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	200000ac 	.word	0x200000ac
 8008b7c:	20000654 	.word	0x20000654
 8008b80:	20000018 	.word	0x20000018
 8008b84:	20000098 	.word	0x20000098

08008b88 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	4905      	ldr	r1, [pc, #20]	@ (8008ba4 <CDC_Init_HS+0x1c>)
 8008b90:	4805      	ldr	r0, [pc, #20]	@ (8008ba8 <CDC_Init_HS+0x20>)
 8008b92:	f7fe fbe7 	bl	8007364 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8008b96:	4905      	ldr	r1, [pc, #20]	@ (8008bac <CDC_Init_HS+0x24>)
 8008b98:	4803      	ldr	r0, [pc, #12]	@ (8008ba8 <CDC_Init_HS+0x20>)
 8008b9a:	f7fe fc05 	bl	80073a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b9e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20001130 	.word	0x20001130
 8008ba8:	20000654 	.word	0x20000654
 8008bac:	20000930 	.word	0x20000930

08008bb0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8008bb4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	2b23      	cmp	r3, #35	@ 0x23
 8008bd4:	d84a      	bhi.n	8008c6c <CDC_Control_HS+0xac>
 8008bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <CDC_Control_HS+0x1c>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008c6d 	.word	0x08008c6d
 8008be0:	08008c6d 	.word	0x08008c6d
 8008be4:	08008c6d 	.word	0x08008c6d
 8008be8:	08008c6d 	.word	0x08008c6d
 8008bec:	08008c6d 	.word	0x08008c6d
 8008bf0:	08008c6d 	.word	0x08008c6d
 8008bf4:	08008c6d 	.word	0x08008c6d
 8008bf8:	08008c6d 	.word	0x08008c6d
 8008bfc:	08008c6d 	.word	0x08008c6d
 8008c00:	08008c6d 	.word	0x08008c6d
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008c6d 	.word	0x08008c6d
 8008c0c:	08008c6d 	.word	0x08008c6d
 8008c10:	08008c6d 	.word	0x08008c6d
 8008c14:	08008c6d 	.word	0x08008c6d
 8008c18:	08008c6d 	.word	0x08008c6d
 8008c1c:	08008c6d 	.word	0x08008c6d
 8008c20:	08008c6d 	.word	0x08008c6d
 8008c24:	08008c6d 	.word	0x08008c6d
 8008c28:	08008c6d 	.word	0x08008c6d
 8008c2c:	08008c6d 	.word	0x08008c6d
 8008c30:	08008c6d 	.word	0x08008c6d
 8008c34:	08008c6d 	.word	0x08008c6d
 8008c38:	08008c6d 	.word	0x08008c6d
 8008c3c:	08008c6d 	.word	0x08008c6d
 8008c40:	08008c6d 	.word	0x08008c6d
 8008c44:	08008c6d 	.word	0x08008c6d
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c6d 	.word	0x08008c6d
 8008c50:	08008c6d 	.word	0x08008c6d
 8008c54:	08008c6d 	.word	0x08008c6d
 8008c58:	08008c6d 	.word	0x08008c6d
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008c6d 	.word	0x08008c6d
 8008c64:	08008c6d 	.word	0x08008c6d
 8008c68:	08008c6d 	.word	0x08008c6d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c6c:	bf00      	nop
  }

  return (USBD_OK);
 8008c6e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */

	 Buf[*Len] = '\0';
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
	 CDC_Transmit_HS(Buf, *Len);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f80e 	bl	8008cbc <CDC_Transmit_HS>
// prepare for the next recieve
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	4805      	ldr	r0, [pc, #20]	@ (8008cb8 <CDC_Receive_HS+0x3c>)
 8008ca4:	f7fe fb80 	bl	80073a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8008ca8:	4803      	ldr	r0, [pc, #12]	@ (8008cb8 <CDC_Receive_HS+0x3c>)
 8008caa:	f7fe fbdb 	bl	8007464 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cae:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20000654 	.word	0x20000654

08008cbc <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8008d0c <CDC_Transmit_HS+0x50>)
 8008cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cd2:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL) return USBD_FAIL;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <CDC_Transmit_HS+0x22>
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e012      	b.n	8008d04 <CDC_Transmit_HS+0x48>

  if (hcdc->TxState != 0){
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <CDC_Transmit_HS+0x30>
    return USBD_BUSY;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e00b      	b.n	8008d04 <CDC_Transmit_HS+0x48>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8008cec:	887b      	ldrh	r3, [r7, #2]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	4806      	ldr	r0, [pc, #24]	@ (8008d0c <CDC_Transmit_HS+0x50>)
 8008cf4:	f7fe fb36 	bl	8007364 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8008cf8:	4804      	ldr	r0, [pc, #16]	@ (8008d0c <CDC_Transmit_HS+0x50>)
 8008cfa:	f7fe fb73 	bl	80073e4 <USBD_CDC_TransmitPacket>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8008d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20000654 	.word	0x20000654

08008d10 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8008d22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2212      	movs	r2, #18
 8008d44:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008d46:	4b03      	ldr	r3, [pc, #12]	@ (8008d54 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	200000cc 	.word	0x200000cc

08008d58 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2204      	movs	r2, #4
 8008d68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d6a:	4b03      	ldr	r3, [pc, #12]	@ (8008d78 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	200000e0 	.word	0x200000e0

08008d7c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d105      	bne.n	8008d9a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008d8e:	683a      	ldr	r2, [r7, #0]
 8008d90:	4907      	ldr	r1, [pc, #28]	@ (8008db0 <USBD_HS_ProductStrDescriptor+0x34>)
 8008d92:	4808      	ldr	r0, [pc, #32]	@ (8008db4 <USBD_HS_ProductStrDescriptor+0x38>)
 8008d94:	f7ff fddc 	bl	8008950 <USBD_GetString>
 8008d98:	e004      	b.n	8008da4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	4904      	ldr	r1, [pc, #16]	@ (8008db0 <USBD_HS_ProductStrDescriptor+0x34>)
 8008d9e:	4805      	ldr	r0, [pc, #20]	@ (8008db4 <USBD_HS_ProductStrDescriptor+0x38>)
 8008da0:	f7ff fdd6 	bl	8008950 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da4:	4b02      	ldr	r3, [pc, #8]	@ (8008db0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20001930 	.word	0x20001930
 8008db4:	08009560 	.word	0x08009560

08008db8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	4904      	ldr	r1, [pc, #16]	@ (8008dd8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008dc8:	4804      	ldr	r0, [pc, #16]	@ (8008ddc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8008dca:	f7ff fdc1 	bl	8008950 <USBD_GetString>
  return USBD_StrDesc;
 8008dce:	4b02      	ldr	r3, [pc, #8]	@ (8008dd8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3708      	adds	r7, #8
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20001930 	.word	0x20001930
 8008ddc:	08009578 	.word	0x08009578

08008de0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	6039      	str	r1, [r7, #0]
 8008dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	221a      	movs	r2, #26
 8008df0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008df2:	f000 f843 	bl	8008e7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008df6:	4b02      	ldr	r3, [pc, #8]	@ (8008e00 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	200000e4 	.word	0x200000e4

08008e04 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	6039      	str	r1, [r7, #0]
 8008e0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d105      	bne.n	8008e22 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	4907      	ldr	r1, [pc, #28]	@ (8008e38 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008e1a:	4808      	ldr	r0, [pc, #32]	@ (8008e3c <USBD_HS_ConfigStrDescriptor+0x38>)
 8008e1c:	f7ff fd98 	bl	8008950 <USBD_GetString>
 8008e20:	e004      	b.n	8008e2c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4904      	ldr	r1, [pc, #16]	@ (8008e38 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008e26:	4805      	ldr	r0, [pc, #20]	@ (8008e3c <USBD_HS_ConfigStrDescriptor+0x38>)
 8008e28:	f7ff fd92 	bl	8008950 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e2c:	4b02      	ldr	r3, [pc, #8]	@ (8008e38 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3708      	adds	r7, #8
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20001930 	.word	0x20001930
 8008e3c:	0800958c 	.word	0x0800958c

08008e40 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d105      	bne.n	8008e5e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	4907      	ldr	r1, [pc, #28]	@ (8008e74 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008e56:	4808      	ldr	r0, [pc, #32]	@ (8008e78 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008e58:	f7ff fd7a 	bl	8008950 <USBD_GetString>
 8008e5c:	e004      	b.n	8008e68 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	4904      	ldr	r1, [pc, #16]	@ (8008e74 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008e62:	4805      	ldr	r0, [pc, #20]	@ (8008e78 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008e64:	f7ff fd74 	bl	8008950 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e68:	4b02      	ldr	r3, [pc, #8]	@ (8008e74 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20001930 	.word	0x20001930
 8008e78:	08009598 	.word	0x08009598

08008e7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e82:	4b0f      	ldr	r3, [pc, #60]	@ (8008ec0 <Get_SerialNum+0x44>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec4 <Get_SerialNum+0x48>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec8 <Get_SerialNum+0x4c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4413      	add	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	4909      	ldr	r1, [pc, #36]	@ (8008ecc <Get_SerialNum+0x50>)
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f814 	bl	8008ed4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008eac:	2204      	movs	r2, #4
 8008eae:	4908      	ldr	r1, [pc, #32]	@ (8008ed0 <Get_SerialNum+0x54>)
 8008eb0:	68b8      	ldr	r0, [r7, #8]
 8008eb2:	f000 f80f 	bl	8008ed4 <IntToUnicode>
  }
}
 8008eb6:	bf00      	nop
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	0bfa0700 	.word	0x0bfa0700
 8008ec4:	0bfa0704 	.word	0x0bfa0704
 8008ec8:	0bfa0708 	.word	0x0bfa0708
 8008ecc:	200000e6 	.word	0x200000e6
 8008ed0:	200000f6 	.word	0x200000f6

08008ed4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]
 8008eea:	e027      	b.n	8008f3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	0f1b      	lsrs	r3, r3, #28
 8008ef0:	2b09      	cmp	r3, #9
 8008ef2:	d80b      	bhi.n	8008f0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	0f1b      	lsrs	r3, r3, #28
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	4619      	mov	r1, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	440b      	add	r3, r1
 8008f04:	3230      	adds	r2, #48	@ 0x30
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
 8008f0a:	e00a      	b.n	8008f22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	0f1b      	lsrs	r3, r3, #28
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	4619      	mov	r1, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3237      	adds	r2, #55	@ 0x37
 8008f1e:	b2d2      	uxtb	r2, r2
 8008f20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	4413      	add	r3, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	75fb      	strb	r3, [r7, #23]
 8008f3c:	7dfa      	ldrb	r2, [r7, #23]
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d3d3      	bcc.n	8008eec <IntToUnicode+0x18>
  }
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fe fb64 	bl	8007636 <USBD_LL_SetupStage>
}
 8008f6e:	bf00      	nop
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	f7fe fb9e 	bl	80076e0 <USBD_LL_DataOutStage>
}
 8008fa4:	bf00      	nop
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	3320      	adds	r3, #32
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	f7fe fc37 	bl	8007846 <USBD_LL_DataInStage>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fd71 	bl	8007ad6 <USBD_LL_SOF>
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009004:	2301      	movs	r3, #1
 8009006:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	79db      	ldrb	r3, [r3, #7]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d102      	bne.n	8009016 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
 8009014:	e008      	b.n	8009028 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	79db      	ldrb	r3, [r3, #7]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d102      	bne.n	8009024 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800901e:	2301      	movs	r3, #1
 8009020:	73fb      	strb	r3, [r7, #15]
 8009022:	e001      	b.n	8009028 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009024:	f7f7 fa6e 	bl	8000504 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800902e:	7bfa      	ldrb	r2, [r7, #15]
 8009030:	4611      	mov	r1, r2
 8009032:	4618      	mov	r0, r3
 8009034:	f7fe fd0b 	bl	8007a4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fcb3 	bl	80079aa <USBD_LL_Reset>
}
 8009044:	bf00      	nop
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe fd07 	bl	8007a6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6812      	ldr	r2, [r2, #0]
 800906e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	7adb      	ldrb	r3, [r3, #11]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009080:	4b04      	ldr	r3, [pc, #16]	@ (8009094 <HAL_PCD_SuspendCallback+0x48>)
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	4a03      	ldr	r2, [pc, #12]	@ (8009094 <HAL_PCD_SuspendCallback+0x48>)
 8009086:	f043 0306 	orr.w	r3, r3, #6
 800908a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	e000ed00 	.word	0xe000ed00

08009098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fcfd 	bl	8007aa6 <USBD_LL_Resume>
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fd55 	bl	8007b7a <USBD_LL_IsoOUTIncomplete>
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090ea:	78fa      	ldrb	r2, [r7, #3]
 80090ec:	4611      	mov	r1, r2
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fd11 	bl	8007b16 <USBD_LL_IsoINIncomplete>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe fd67 	bl	8007bde <USBD_LL_DevConnected>
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe fd64 	bl	8007bf4 <USBD_LL_DevDisconnected>
}
 800912c:	bf00      	nop
 800912e:	3708      	adds	r7, #8
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d140      	bne.n	80091c6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009144:	4a22      	ldr	r2, [pc, #136]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a20      	ldr	r2, [pc, #128]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009150:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009154:	4b1e      	ldr	r3, [pc, #120]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009156:	4a1f      	ldr	r2, [pc, #124]	@ (80091d4 <USBD_LL_Init+0xa0>)
 8009158:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800915a:	4b1d      	ldr	r3, [pc, #116]	@ (80091d0 <USBD_LL_Init+0x9c>)
 800915c:	2209      	movs	r2, #9
 800915e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009160:	4b1b      	ldr	r3, [pc, #108]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009162:	2202      	movs	r2, #2
 8009164:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009166:	4b1a      	ldr	r3, [pc, #104]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009168:	2200      	movs	r2, #0
 800916a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 800916c:	4b18      	ldr	r3, [pc, #96]	@ (80091d0 <USBD_LL_Init+0x9c>)
 800916e:	2203      	movs	r2, #3
 8009170:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009172:	4b17      	ldr	r3, [pc, #92]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009174:	2200      	movs	r2, #0
 8009176:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009178:	4b15      	ldr	r3, [pc, #84]	@ (80091d0 <USBD_LL_Init+0x9c>)
 800917a:	2200      	movs	r2, #0
 800917c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800917e:	4b14      	ldr	r3, [pc, #80]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009180:	2200      	movs	r2, #0
 8009182:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009184:	4b12      	ldr	r3, [pc, #72]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009186:	2200      	movs	r2, #0
 8009188:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800918a:	4b11      	ldr	r3, [pc, #68]	@ (80091d0 <USBD_LL_Init+0x9c>)
 800918c:	2200      	movs	r2, #0
 800918e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009190:	4b0f      	ldr	r3, [pc, #60]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009192:	2200      	movs	r2, #0
 8009194:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009196:	480e      	ldr	r0, [pc, #56]	@ (80091d0 <USBD_LL_Init+0x9c>)
 8009198:	f7f7 ff6e 	bl	8001078 <HAL_PCD_Init>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80091a2:	f7f7 f9af 	bl	8000504 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80091a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80091aa:	4809      	ldr	r0, [pc, #36]	@ (80091d0 <USBD_LL_Init+0x9c>)
 80091ac:	f7f9 f9b1 	bl	8002512 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80091b0:	2280      	movs	r2, #128	@ 0x80
 80091b2:	2100      	movs	r1, #0
 80091b4:	4806      	ldr	r0, [pc, #24]	@ (80091d0 <USBD_LL_Init+0x9c>)
 80091b6:	f7f9 f965 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80091ba:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80091be:	2101      	movs	r1, #1
 80091c0:	4803      	ldr	r0, [pc, #12]	@ (80091d0 <USBD_LL_Init+0x9c>)
 80091c2:	f7f9 f95f 	bl	8002484 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	2000011c 	.word	0x2000011c
 80091d4:	42040000 	.word	0x42040000

080091d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7f8 f84e 	bl	8001290 <HAL_PCD_Start>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f942 	bl	8009484 <USBD_Get_USB_Status>
 8009200:	4603      	mov	r3, r0
 8009202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009204:	7bbb      	ldrb	r3, [r7, #14]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	4608      	mov	r0, r1
 8009218:	4611      	mov	r1, r2
 800921a:	461a      	mov	r2, r3
 800921c:	4603      	mov	r3, r0
 800921e:	70fb      	strb	r3, [r7, #3]
 8009220:	460b      	mov	r3, r1
 8009222:	70bb      	strb	r3, [r7, #2]
 8009224:	4613      	mov	r3, r2
 8009226:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009236:	78bb      	ldrb	r3, [r7, #2]
 8009238:	883a      	ldrh	r2, [r7, #0]
 800923a:	78f9      	ldrb	r1, [r7, #3]
 800923c:	f7f8 fd3c 	bl	8001cb8 <HAL_PCD_EP_Open>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009244:	7bfb      	ldrb	r3, [r7, #15]
 8009246:	4618      	mov	r0, r3
 8009248:	f000 f91c 	bl	8009484 <USBD_Get_USB_Status>
 800924c:	4603      	mov	r3, r0
 800924e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009250:	7bbb      	ldrb	r3, [r7, #14]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
 8009262:	460b      	mov	r3, r1
 8009264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f7f8 fd87 	bl	8001d8c <HAL_PCD_EP_Close>
 800927e:	4603      	mov	r3, r0
 8009280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 f8fd 	bl	8009484 <USBD_Get_USB_Status>
 800928a:	4603      	mov	r3, r0
 800928c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800928e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f8 fe3f 	bl	8001f3a <HAL_PCD_EP_SetStall>
 80092bc:	4603      	mov	r3, r0
 80092be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 f8de 	bl	8009484 <USBD_Get_USB_Status>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7f8 fe83 	bl	8002000 <HAL_PCD_EP_ClrStall>
 80092fa:	4603      	mov	r3, r0
 80092fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f8bf 	bl	8009484 <USBD_Get_USB_Status>
 8009306:	4603      	mov	r3, r0
 8009308:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800930a:	7bbb      	ldrb	r3, [r7, #14]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009326:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800932c:	2b00      	cmp	r3, #0
 800932e:	da0b      	bge.n	8009348 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009336:	68f9      	ldr	r1, [r7, #12]
 8009338:	4613      	mov	r3, r2
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	440b      	add	r3, r1
 8009342:	3316      	adds	r3, #22
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	e00b      	b.n	8009360 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800934e:	68f9      	ldr	r1, [r7, #12]
 8009350:	4613      	mov	r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	440b      	add	r3, r1
 800935a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800935e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	4611      	mov	r1, r2
 800938a:	4618      	mov	r0, r3
 800938c:	f7f8 fc70 	bl	8001c70 <HAL_PCD_SetAddress>
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009394:	7bfb      	ldrb	r3, [r7, #15]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f874 	bl	8009484 <USBD_Get_USB_Status>
 800939c:	4603      	mov	r3, r0
 800939e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b086      	sub	sp, #24
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	460b      	mov	r3, r1
 80093b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093c8:	7af9      	ldrb	r1, [r7, #11]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	f7f8 fd7a 	bl	8001ec6 <HAL_PCD_EP_Transmit>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 f853 	bl	8009484 <USBD_Get_USB_Status>
 80093de:	4603      	mov	r3, r0
 80093e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	607a      	str	r2, [r7, #4]
 80093f6:	603b      	str	r3, [r7, #0]
 80093f8:	460b      	mov	r3, r1
 80093fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800940a:	7af9      	ldrb	r1, [r7, #11]
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	f7f8 fd06 	bl	8001e20 <HAL_PCD_EP_Receive>
 8009414:	4603      	mov	r3, r0
 8009416:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f832 	bl	8009484 <USBD_Get_USB_Status>
 8009420:	4603      	mov	r3, r0
 8009422:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009424:	7dbb      	ldrb	r3, [r7, #22]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f7f8 fd26 	bl	8001e96 <HAL_PCD_EP_GetRxCount>
 800944a:	4603      	mov	r3, r0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800945c:	4b03      	ldr	r3, [pc, #12]	@ (800946c <USBD_static_malloc+0x18>)
}
 800945e:	4618      	mov	r0, r3
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	20001b30 	.word	0x20001b30

08009470 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	2b03      	cmp	r3, #3
 8009496:	d817      	bhi.n	80094c8 <USBD_Get_USB_Status+0x44>
 8009498:	a201      	add	r2, pc, #4	@ (adr r2, 80094a0 <USBD_Get_USB_Status+0x1c>)
 800949a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949e:	bf00      	nop
 80094a0:	080094b1 	.word	0x080094b1
 80094a4:	080094b7 	.word	0x080094b7
 80094a8:	080094bd 	.word	0x080094bd
 80094ac:	080094c3 	.word	0x080094c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73fb      	strb	r3, [r7, #15]
    break;
 80094b4:	e00b      	b.n	80094ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094b6:	2303      	movs	r3, #3
 80094b8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ba:	e008      	b.n	80094ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094bc:	2301      	movs	r3, #1
 80094be:	73fb      	strb	r3, [r7, #15]
    break;
 80094c0:	e005      	b.n	80094ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094c2:	2303      	movs	r3, #3
 80094c4:	73fb      	strb	r3, [r7, #15]
    break;
 80094c6:	e002      	b.n	80094ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	73fb      	strb	r3, [r7, #15]
    break;
 80094cc:	bf00      	nop
  }
  return usb_status;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <memset>:
 80094dc:	4402      	add	r2, r0
 80094de:	4603      	mov	r3, r0
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d100      	bne.n	80094e6 <memset+0xa>
 80094e4:	4770      	bx	lr
 80094e6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ea:	e7f9      	b.n	80094e0 <memset+0x4>

080094ec <__libc_init_array>:
 80094ec:	b570      	push	{r4, r5, r6, lr}
 80094ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009524 <__libc_init_array+0x38>)
 80094f0:	2600      	movs	r6, #0
 80094f2:	4c0d      	ldr	r4, [pc, #52]	@ (8009528 <__libc_init_array+0x3c>)
 80094f4:	1b64      	subs	r4, r4, r5
 80094f6:	10a4      	asrs	r4, r4, #2
 80094f8:	42a6      	cmp	r6, r4
 80094fa:	d109      	bne.n	8009510 <__libc_init_array+0x24>
 80094fc:	4d0b      	ldr	r5, [pc, #44]	@ (800952c <__libc_init_array+0x40>)
 80094fe:	2600      	movs	r6, #0
 8009500:	4c0b      	ldr	r4, [pc, #44]	@ (8009530 <__libc_init_array+0x44>)
 8009502:	f000 f817 	bl	8009534 <_init>
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	42a6      	cmp	r6, r4
 800950c:	d105      	bne.n	800951a <__libc_init_array+0x2e>
 800950e:	bd70      	pop	{r4, r5, r6, pc}
 8009510:	f855 3b04 	ldr.w	r3, [r5], #4
 8009514:	3601      	adds	r6, #1
 8009516:	4798      	blx	r3
 8009518:	e7ee      	b.n	80094f8 <__libc_init_array+0xc>
 800951a:	f855 3b04 	ldr.w	r3, [r5], #4
 800951e:	3601      	adds	r6, #1
 8009520:	4798      	blx	r3
 8009522:	e7f2      	b.n	800950a <__libc_init_array+0x1e>
 8009524:	08009680 	.word	0x08009680
 8009528:	08009680 	.word	0x08009680
 800952c:	08009680 	.word	0x08009680
 8009530:	08009684 	.word	0x08009684

08009534 <_init>:
 8009534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009536:	bf00      	nop
 8009538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953a:	bc08      	pop	{r3}
 800953c:	469e      	mov	lr, r3
 800953e:	4770      	bx	lr

08009540 <_fini>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	bf00      	nop
 8009544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009546:	bc08      	pop	{r3}
 8009548:	469e      	mov	lr, r3
 800954a:	4770      	bx	lr
